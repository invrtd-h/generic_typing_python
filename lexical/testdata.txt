PROGRAM_BEGIN;





trait StackLike(self):{
    fn:{
        append(self, any) -> [self or None];
        pop(self) -> [self or None];

    };fn:{
        __len__(self) -> int;





};};trait PointLike(self):{
    var:{
        x: int;
        y: int;


};};trait AnyRandom(Self):{
    var:{
        x: int;
        y: int;
        z;
    };fn:{
        __init__(self, int, int, any) -> None;
        __init__(self, int, int) -> None;
        __init__(self, int) -> None;
        __init__(self) -> None;

    };cls_fn:{
        foo(cls, int) -> str;
        foo(cls, float) -> str;

    };cls_var:{
        xxx;
        yyy: int;

    };static_fn:{
        bar() -> None;




};};trait Addable(self, T):{
    fn:{
        __add__(self, T) -> self;

};};trait Multipliable(self, T):{
    fn:{
        __mul__(self, T) -> self;




};};printinfo StackLike(int) ;
printinfo StackLike(list) ;

printinfo Addable(str, int) ;
printinfo Multipliable(str, int) ;




printinfo Addable[int](str) ;


trait AddableSubable(self, T) extends Addable[T]:{
    fn:{
        __sub__(self, T);




};};trait Fooable(self):{
    fn:{
        foo(self, any);

};};printinfo Fooable;









trait FooBarable(self):{
    fn:{
        foo(self, any);
        bar(self, any);

};};trait BarBazable(self):{
    fn:{
        bar(self, any);
        baz(self, any);

};};printinfo [FooBarable and BarBazable];









printinfo [FooBarable or BarBazable];









printinfo typetrace(baz <| int) ;

policy Fooo:{
    int -> int;
    float -> float;
    typename T: Addable[int] -> T;
    typename U -> typetrace(try_lshift <| U);

};

generate Fooo;
generate FooBarable;

PROGRAM_END;
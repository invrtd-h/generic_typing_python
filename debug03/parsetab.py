
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CLS_FN CLS_VAR COLON COMMA DOT EQ EXTENDS FALSE FN GENERATE ID IMPLIES LP1 LP2 LP3 NEQ NONE NOT OR PASS PRINTINFO PROGRAM_BEGIN PROGRAM_END RP1 RP2 RP3 R_ARROW STAR STATIC_FN S_COLON TRAIT TRAIT_OF TRUE VAR WS XOR\n    Program : PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON\n            | WS\n    stmts : stmts stmt\n          | stmt\n    stmt : trait_decl\n         | print_stmt\n         | generate_stmt\n         | assign_stmt\n         | S_COLON\n    trait_decl : TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON\n               | TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON\n    trait_id : ID\n    class_args : main_arg COMMA sub_args\n               | main_arg\n    main_arg : ID\n    sub_args : necessary_args COMMA optional_args\n             | necessary_args\n             | optional_args\n    necessary_args : necessary_args COMMA necessary_arg\n                   | necessary_arg\n    necessary_arg : ID\n    optional_args : optional_args COMMA optional_arg\n                  | optional_arg\n    optional_arg : ID ASSIGN unary_pred\n    trait_decl_stmts : trait_decl_stmts trait_decl_stmt\n                     | trait_decl_stmt\n                     | PASS S_COLON\n    trait_decl_stmt : FN COLON LP2 decl_fn_stmts RP2 S_COLON\n                    | VAR COLON LP2 decl_stmts RP2 S_COLON\n                    | CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON\n                    | CLS_VAR COLON LP2 decl_stmts RP2 S_COLON\n                    | STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON\n    decl_fn_stmts : decl_fn_stmts decl_fn_stmt\n                  | decl_fn_stmt\n    decl_fn_stmt : fn_id LP1 pred_args RP1 S_COLON\n                 | fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON\n    decl_cls_fn_stmts : decl_cls_fn_stmts decl_cls_fn_stmt\n                      | decl_cls_fn_stmt\n    decl_cls_fn_stmt : fn_id LP1 pred_args RP1 S_COLON\n                     | fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON\n    fn_id : ID\n    pred_args : main_pred COMMA next_preds\n              | main_pred\n    main_pred : ID\n    next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds\n               | next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR\n               | next_anonymous_necessary_preds COMMA next_anonymous_opt_preds\n               | next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds\n               | next_anonymous_necessary_preds COMMA STAR\n               | next_anonymous_necessary_preds\n               | next_anonymous_opt_preds COMMA STAR COMMA next_named_preds\n               | next_anonymous_opt_preds COMMA STAR\n               | next_anonymous_opt_preds\n               | STAR next_named_preds\n               | STAR\n    next_anonymous_necessary_preds : next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred\n                                   | next_anonymous_necessary_pred\n    next_anonymous_necessary_pred : unary_pred\n    next_anonymous_opt_preds : next_anonymous_opt_preds COMMA next_anonymous_opt_pred\n                             | next_anonymous_opt_pred\n    next_anonymous_opt_pred : ASSIGN unary_pred\n    next_named_preds : next_named_preds COMMA next_named_pred\n                     | next_named_pred\n    next_named_pred : next_named_necessary_pred\n                    | next_named_opt_pred\n    next_named_necessary_pred : arg_name COLON unary_pred\n    next_named_opt_pred : arg_name COLON ASSIGN unary_pred\n    arg_name : ID\n    type_var_args : type_var_args COMMA type_var_arg\n                  | type_var_arg\n    type_var_arg : type_var_id\n                 | type_var_id COLON unary_pred\n    type_var_id : ID\n    unary_pred : pred_name\n               | unnamed_pred\n    unnamed_pred : pred_name LP3 args RP3\n                 | LP3 pred_expr RP3\n                 | TRAIT_OF LP1 var_expr RP1\n                 | NONE\n    pred_name : ID\n    pred_expr : pred_expr OR pred_expr_a\n              | pred_expr_a\n    pred_expr_a : pred_expr_a AND pred_expr_b\n                | pred_expr_b\n    pred_expr_b : NOT pred_expr_b\n                | pred_expr_c\n    pred_expr_c : unary_pred\n                | LP1 pred_expr RP1\n    var_expr : unary_pred DOT member_var_name\n    member_var_name : ID\n    decl_stmts : decl_stmts decl_stmt\n               | decl_stmt\n    decl_stmt : var_id S_COLON\n              | var_id COLON unary_pred S_COLON\n              | LP3 vars_id RP3 S_COLON\n              | LP3 vars_id RP3 COLON unary_pred S_COLON\n    vars_id : vars_id COMMA var_id\n            | var_id\n    var_id : ID\n    decl_static_fn_stmts : decl_static_fn_stmts decl_static_fn_stmt\n                         | decl_static_fn_stmt\n    decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 S_COLON\n                        | static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON\n                        | static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON\n                        | static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON\n                        | static_fn_id LP1 RP1 S_COLON\n                        | static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON\n                        | static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON\n                        | static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON\n    static_fn_id : ID\n    print_stmt : PRINTINFO to_print S_COLON\n    generate_stmt : GENERATE to_print S_COLON\n    to_print : ID\n             | boolean_expr\n             | unnamed_pred\n             | unary_pred DOT member_fn_name\n    boolean_expr : boolean_expr OR boolean_expr_a\n                 | boolean_expr_a\n    boolean_expr_a : boolean_expr_a XOR boolean_expr_b\n                   | boolean_expr_b\n    boolean_expr_b : boolean_expr_b AND boolean_expr_c\n                   | boolean_expr_c\n    boolean_expr_c : boolean_expr_c EQ boolean_expr_d\n                   | boolean_expr_c NEQ boolean_expr_d\n                   | boolean_expr_d\n    boolean_expr_d : NOT boolean_expr_e\n                   | boolean_expr_e\n    boolean_expr_e : atomic_boolean_expr\n                   | LP1 boolean_expr RP1\n    atomic_boolean_expr : constants\n                        | unary_pred LP1 args RP1\n                        | unary_pred IMPLIES unary_pred\n                        | LP1 unary_pred EQ unary_pred RP1\n                        | LP1 unary_pred NEQ unary_pred RP1\n    constants : TRUE\n              | FALSE\n    args : args COMMA arg\n         | arg\n    arg : ID\n    member_fn_name : ID\n    assign_stmt : names ASSIGN assign_expr S_COLON\n    names : names COMMA name\n          | name\n    name : ID\n    assign_expr : names ASSIGN assign_expr\n                | names\n\n    '
    
_lr_action_items = {'PROGRAM_BEGIN':([0,],[2,]),'WS':([0,],[3,]),'$end':([1,3,45,],[0,-2,-1,]),'S_COLON':([2,4,5,6,7,8,9,10,11,16,17,18,19,22,23,24,25,27,32,33,34,35,37,38,39,40,41,42,47,61,62,63,70,72,73,74,75,79,80,81,85,86,88,95,98,99,100,102,105,107,111,115,127,128,136,148,157,170,172,181,182,186,192,196,197,201,211,212,220,229,238,240,259,265,274,277,279,288,290,292,298,308,309,310,312,],[4,5,-9,5,-4,-5,-6,-7,-8,-147,-148,45,-3,47,-117,-118,-119,-122,-83,-124,-126,-129,-131,-132,-134,-139,-140,72,-115,-78,-79,-84,-130,-116,-150,102,-146,-121,-120,-144,-136,-123,-81,-133,-125,-127,-128,-145,-135,-80,-82,-149,-137,-138,150,157,-10,188,-103,201,202,210,214,217,218,-11,234,235,241,253,260,263,276,280,289,291,293,299,301,303,306,313,314,315,316,]),'TRAIT':([4,5,6,7,8,9,10,11,19,47,72,102,157,201,],[12,-9,12,-4,-5,-6,-7,-8,-3,-115,-116,-145,-10,-11,]),'PRINTINFO':([4,5,6,7,8,9,10,11,19,47,72,102,157,201,],[13,-9,13,-4,-5,-6,-7,-8,-3,-115,-116,-145,-10,-11,]),'GENERATE':([4,5,6,7,8,9,10,11,19,47,72,102,157,201,],[14,-9,14,-4,-5,-6,-7,-8,-3,-115,-116,-145,-10,-11,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,19,29,31,36,43,44,46,47,48,49,50,51,52,53,57,60,64,67,68,69,72,89,90,96,97,101,102,104,106,112,117,131,132,133,157,158,159,160,161,162,164,165,168,169,171,173,174,176,177,178,183,184,185,187,188,189,193,194,195,198,199,200,201,213,224,227,230,232,233,234,235,236,241,242,243,253,254,256,260,261,262,263,264,271,272,273,276,280,282,283,286,289,291,293,299,300,301,302,303,304,305,306,307,313,314,315,316,],[17,-9,17,-4,-5,-6,-7,-8,21,23,23,-3,63,63,63,17,17,78,-115,63,81,84,63,63,84,63,63,63,63,63,63,-116,63,63,63,63,17,-145,123,84,126,63,123,146,63,-10,167,172,167,172,180,167,-34,172,-96,172,167,-40,172,180,-105,-33,205,209,-95,-97,63,-39,205,209,-104,63,209,-11,172,250,63,63,209,63,-98,-99,63,-110,63,63,-35,63,205,-41,63,205,-106,63,250,63,63,-100,-111,250,250,63,-36,-42,-107,-112,63,-37,63,-43,63,250,-108,63,-113,-38,-44,-109,]),'PROGRAM_END':([5,6,7,8,9,10,11,19,47,72,102,157,201,],[-9,18,-4,-5,-6,-7,-8,-3,-115,-116,-145,-10,-11,]),'LP3':([13,14,23,28,29,31,36,48,51,52,57,60,61,63,64,67,68,69,89,90,96,97,117,133,159,161,166,167,168,169,175,176,179,180,187,188,189,199,227,230,233,234,235,236,242,243,254,261,264,272,273,276,286,300,302,304,307,],[29,29,-84,53,29,29,29,29,29,29,29,29,53,-84,29,29,29,29,29,29,29,29,29,29,171,171,185,-45,171,-96,195,171,200,-114,-95,-97,29,29,29,29,29,-98,-99,29,29,29,29,29,29,29,29,-100,29,29,29,29,29,]),'TRAIT_OF':([13,14,29,31,36,48,51,52,57,60,64,67,68,69,89,90,96,97,117,133,189,199,227,230,233,236,242,243,254,261,264,272,273,286,300,302,304,307,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'NONE':([13,14,29,31,36,48,51,52,57,60,64,67,68,69,89,90,96,97,117,133,189,199,227,230,233,236,242,243,254,261,264,272,273,286,300,302,304,307,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'NOT':([13,14,29,31,48,52,57,60,67,68,69,89,90,],[36,36,57,36,36,36,57,57,36,36,36,57,57,]),'LP1':([13,14,20,21,23,25,26,28,29,30,31,32,36,48,52,57,60,61,62,63,66,67,68,69,71,88,89,90,107,111,166,167,175,179,180,231,239,252,],[31,31,46,-12,-84,-79,50,-78,60,64,31,-83,31,31,31,60,60,-78,-79,-84,50,31,31,31,50,-81,60,60,-80,-82,184,-45,194,199,-114,256,262,273,]),'TRUE':([13,14,31,36,48,52,67,68,69,],[40,40,40,40,40,40,40,40,40,]),'FALSE':([13,14,31,36,48,52,67,68,69,],[41,41,41,41,41,41,41,41,41,]),'ASSIGN':([15,16,17,73,75,123,146,199,230,243,244,272,273,281,],[43,-147,-148,101,-146,133,133,227,227,227,227,286,227,227,]),'COMMA':([15,16,17,32,61,62,63,73,75,77,78,82,83,84,87,88,107,111,119,120,121,122,123,124,143,144,145,147,172,190,191,204,205,206,207,208,209,216,221,222,223,225,226,228,237,245,246,247,248,251,257,258,266,267,268,269,270,284,285,294,295,296,297,311,],[44,-147,-148,-83,-78,-79,-84,44,-146,104,-15,106,-142,-143,106,-81,-80,-82,131,132,-20,-23,-21,-141,132,-19,-22,-24,-103,213,-102,230,-48,232,-74,-75,-77,232,-62,243,244,-61,-64,232,-101,271,-67,-68,-69,-65,-73,-76,281,282,-60,283,-63,-66,-70,305,271,271,-71,271,]),'DOT':([23,25,26,28,32,61,62,63,88,94,107,111,],[-84,-79,49,-78,-83,-78,-79,-84,-81,112,-80,-82,]),'IMPLIES':([23,25,26,28,32,61,62,63,66,71,88,107,111,],[-84,-79,51,-78,-83,-78,-79,-84,51,51,-81,-80,-82,]),'OR':([24,27,32,33,34,35,37,38,39,40,41,54,55,56,58,59,61,62,63,65,70,79,85,86,88,91,92,95,98,99,100,105,107,108,109,110,111,127,128,],[48,-122,-83,-124,-126,-129,-131,-132,-134,-139,-140,89,-86,-88,-90,-91,-78,-79,-84,48,-130,-121,-136,-123,-81,-89,89,-133,-125,-127,-128,-135,-80,-85,-87,-92,-82,-137,-138,]),'RP1':([27,32,33,34,35,37,38,39,40,41,55,56,58,59,61,62,63,65,70,76,77,78,79,82,83,84,85,86,88,91,92,93,95,98,99,100,105,107,108,109,110,111,113,114,118,119,120,121,122,123,124,125,126,127,128,143,144,145,147,199,203,204,205,215,219,221,222,223,224,225,226,245,246,247,248,251,255,266,267,268,269,270,273,275,278,284,285,287,294,295,296,297,311,],[-122,-83,-124,-126,-129,-131,-132,-134,-139,-140,-86,-88,-90,-91,-78,-79,-84,95,-130,103,-14,-15,-121,105,-142,-143,-136,-123,-81,-89,110,111,-133,-125,-127,-128,-135,-80,-85,-87,-92,-82,127,128,-13,-17,-18,-20,-23,-21,-141,-93,-94,-137,-138,-16,-19,-22,-24,220,229,-47,-48,238,240,-62,-54,-57,-59,-61,-64,-58,-67,-68,-69,-65,-46,-51,-53,-60,-56,-63,288,290,292,-66,-70,298,-50,-52,-55,-71,-49,]),'XOR':([27,32,33,34,35,37,38,39,40,41,61,62,63,70,79,85,86,88,95,98,99,100,105,107,111,127,128,],[52,-83,-124,-126,-129,-131,-132,-134,-139,-140,-78,-79,-84,-130,52,-136,-123,-81,-133,-125,-127,-128,-135,-80,-82,-137,-138,]),'AND':([32,33,34,35,37,38,39,40,41,55,56,58,59,61,62,63,70,85,86,88,91,95,98,99,100,105,107,108,109,110,111,127,128,],[-83,67,-126,-129,-131,-132,-134,-139,-140,90,-88,-90,-91,-78,-79,-84,-130,-136,67,-81,-89,-133,-125,-127,-128,-135,-80,90,-87,-92,-82,-137,-138,]),'RP3':([32,54,55,56,58,59,61,62,63,83,84,87,88,91,107,108,109,110,111,124,172,190,191,206,207,208,209,216,228,237,257,258,],[-83,88,-86,-88,-90,-91,-78,-79,-84,-142,-143,107,-81,-89,-80,-85,-87,-92,-82,-141,-103,212,-102,231,-74,-75,-77,239,252,-101,-73,-76,]),'EQ':([32,34,35,37,38,39,40,41,61,62,63,66,70,85,88,95,98,99,100,105,107,111,127,128,],[-83,68,-129,-131,-132,-134,-139,-140,-78,-79,-84,96,-130,-136,-81,-133,68,-127,-128,-135,-80,-82,-137,-138,]),'NEQ':([32,34,35,37,38,39,40,41,61,62,63,66,70,85,88,95,98,99,100,105,107,111,127,128,],[-83,69,-129,-131,-132,-134,-139,-140,-78,-79,-84,97,-130,-136,-81,-133,69,-127,-128,-135,-80,-82,-137,-138,]),'COLON':([32,61,62,63,88,103,107,111,130,137,138,139,140,141,170,172,208,209,212,249,250,],[-83,-78,-79,-84,-81,116,-80,-82,142,151,152,153,154,155,189,-103,233,-77,236,272,-72,]),'EXTENDS':([103,],[117,]),'LP2':([116,142,151,152,153,154,155,],[129,156,158,159,160,161,162,]),'PASS':([129,156,],[136,136,]),'FN':([129,134,135,149,150,156,163,202,210,214,217,218,],[137,137,-26,-25,-27,137,137,-28,-29,-30,-31,-32,]),'VAR':([129,134,135,149,150,156,163,202,210,214,217,218,],[138,138,-26,-25,-27,138,138,-28,-29,-30,-31,-32,]),'CLS_FN':([129,134,135,149,150,156,163,202,210,214,217,218,],[139,139,-26,-25,-27,139,139,-28,-29,-30,-31,-32,]),'CLS_VAR':([129,134,135,149,150,156,163,202,210,214,217,218,],[140,140,-26,-25,-27,140,140,-28,-29,-30,-31,-32,]),'STATIC_FN':([129,134,135,149,150,156,163,202,210,214,217,218,],[141,141,-26,-25,-27,141,141,-28,-29,-30,-31,-32,]),'RP2':([134,135,149,150,163,164,165,168,169,173,174,176,177,178,183,187,188,193,198,202,210,214,217,218,234,235,241,253,260,263,276,280,289,291,293,299,301,303,306,313,314,315,316,],[148,-26,-25,-27,181,182,-34,186,-96,192,-40,196,197,-105,-33,-95,-97,-39,-104,-28,-29,-30,-31,-32,-98,-99,-110,-35,-41,-106,-100,-111,-36,-42,-107,-112,-37,-43,-108,-113,-38,-44,-109,]),'STAR':([199,230,243,244,273,281,],[224,224,267,269,224,294,]),'R_ARROW':([220,229,238,240,288,290,292,298,],[242,254,261,264,300,302,304,307,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Program':([0,],[1,]),'stmts':([4,],[6,]),'stmt':([4,6,],[7,19,]),'trait_decl':([4,6,],[8,8,]),'print_stmt':([4,6,],[9,9,]),'generate_stmt':([4,6,],[10,10,]),'assign_stmt':([4,6,],[11,11,]),'names':([4,6,43,101,],[15,15,73,73,]),'name':([4,6,43,44,101,],[16,16,16,75,16,]),'trait_id':([12,],[20,]),'to_print':([13,14,],[22,42,]),'boolean_expr':([13,14,31,],[24,24,65,]),'unnamed_pred':([13,14,29,31,36,48,51,52,57,60,64,67,68,69,89,90,96,97,117,133,189,199,227,230,233,236,242,243,254,261,264,272,273,286,300,302,304,307,],[25,25,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'unary_pred':([13,14,29,31,36,48,51,52,57,60,64,67,68,69,89,90,96,97,117,133,189,199,227,230,233,236,242,243,254,261,264,272,273,286,300,302,304,307,],[26,26,59,66,71,71,85,71,59,59,94,71,71,71,59,59,113,114,130,147,211,221,251,221,258,259,265,221,274,277,279,285,221,297,308,309,310,312,]),'boolean_expr_a':([13,14,31,48,],[27,27,27,79,]),'pred_name':([13,14,29,31,36,48,51,52,57,60,64,67,68,69,89,90,96,97,117,133,189,199,227,230,233,236,242,243,254,261,264,272,273,286,300,302,304,307,],[28,28,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'boolean_expr_b':([13,14,31,48,52,],[33,33,33,33,86,]),'boolean_expr_c':([13,14,31,48,52,67,],[34,34,34,34,34,98,]),'boolean_expr_d':([13,14,31,48,52,67,68,69,],[35,35,35,35,35,35,99,100,]),'boolean_expr_e':([13,14,31,36,48,52,67,68,69,],[37,37,37,70,37,37,37,37,37,]),'atomic_boolean_expr':([13,14,31,36,48,52,67,68,69,],[38,38,38,38,38,38,38,38,38,]),'constants':([13,14,31,36,48,52,67,68,69,],[39,39,39,39,39,39,39,39,39,]),'pred_expr':([29,60,],[54,92,]),'pred_expr_a':([29,60,89,],[55,55,108,]),'pred_expr_b':([29,57,60,89,90,],[56,91,56,56,109,]),'pred_expr_c':([29,57,60,89,90,],[58,58,58,58,58,]),'assign_expr':([43,101,],[74,115,]),'class_args':([46,],[76,]),'main_arg':([46,],[77,]),'member_fn_name':([49,],[80,]),'args':([50,53,],[82,87,]),'arg':([50,53,106,],[83,83,124,]),'var_expr':([64,],[93,]),'sub_args':([104,],[118,]),'necessary_args':([104,],[119,]),'optional_args':([104,131,],[120,143,]),'necessary_arg':([104,131,],[121,144,]),'optional_arg':([104,131,132,],[122,122,145,]),'member_var_name':([112,],[125,]),'trait_decl_stmts':([129,156,],[134,163,]),'trait_decl_stmt':([129,134,156,163,],[135,149,135,149,]),'decl_fn_stmts':([158,],[164,]),'decl_fn_stmt':([158,164,],[165,183,]),'fn_id':([158,160,164,173,],[166,175,166,175,]),'decl_stmts':([159,161,],[168,176,]),'decl_stmt':([159,161,168,176,],[169,169,187,187,]),'var_id':([159,161,168,171,176,213,],[170,170,170,191,170,237,]),'decl_cls_fn_stmts':([160,],[173,]),'decl_cls_fn_stmt':([160,173,],[174,193,]),'decl_static_fn_stmts':([162,],[177,]),'decl_static_fn_stmt':([162,177,],[178,198,]),'static_fn_id':([162,177,],[179,179,]),'vars_id':([171,],[190,]),'pred_args':([184,194,256,262,],[203,215,275,278,]),'main_pred':([184,194,256,262,],[204,204,204,204,]),'type_var_args':([185,195,200,],[206,216,228,]),'type_var_arg':([185,195,200,232,],[207,207,207,257,]),'type_var_id':([185,195,200,232,],[208,208,208,208,]),'next_preds':([199,230,273,],[219,255,287,]),'next_anonymous_necessary_preds':([199,230,273,],[222,222,222,]),'next_anonymous_opt_preds':([199,230,243,273,],[223,223,266,223,]),'next_anonymous_necessary_pred':([199,230,243,273,],[225,225,268,225,]),'next_anonymous_opt_pred':([199,230,243,244,273,281,],[226,226,226,270,226,270,]),'next_named_preds':([224,282,283,305,],[245,295,296,311,]),'next_named_pred':([224,271,282,283,305,],[246,284,246,246,246,]),'next_named_necessary_pred':([224,271,282,283,305,],[247,247,247,247,247,]),'next_named_opt_pred':([224,271,282,283,305,],[248,248,248,248,248,]),'arg_name':([224,271,282,283,305,],[249,249,249,249,249,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Program","S'",1,None,None,None),
  ('Program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON','Program',5,'p_t','debug.py',11),
  ('Program -> WS','Program',1,'p_t','debug.py',12),
  ('stmts -> stmts stmt','stmts',2,'p_t','debug.py',13),
  ('stmts -> stmt','stmts',1,'p_t','debug.py',14),
  ('stmt -> trait_decl','stmt',1,'p_t','debug.py',15),
  ('stmt -> print_stmt','stmt',1,'p_t','debug.py',16),
  ('stmt -> generate_stmt','stmt',1,'p_t','debug.py',17),
  ('stmt -> assign_stmt','stmt',1,'p_t','debug.py',18),
  ('stmt -> S_COLON','stmt',1,'p_t','debug.py',19),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_t','debug.py',20),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_t','debug.py',21),
  ('trait_id -> ID','trait_id',1,'p_t','debug.py',22),
  ('class_args -> main_arg COMMA sub_args','class_args',3,'p_t','debug.py',23),
  ('class_args -> main_arg','class_args',1,'p_t','debug.py',24),
  ('main_arg -> ID','main_arg',1,'p_t','debug.py',25),
  ('sub_args -> necessary_args COMMA optional_args','sub_args',3,'p_t','debug.py',26),
  ('sub_args -> necessary_args','sub_args',1,'p_t','debug.py',27),
  ('sub_args -> optional_args','sub_args',1,'p_t','debug.py',28),
  ('necessary_args -> necessary_args COMMA necessary_arg','necessary_args',3,'p_t','debug.py',29),
  ('necessary_args -> necessary_arg','necessary_args',1,'p_t','debug.py',30),
  ('necessary_arg -> ID','necessary_arg',1,'p_t','debug.py',31),
  ('optional_args -> optional_args COMMA optional_arg','optional_args',3,'p_t','debug.py',32),
  ('optional_args -> optional_arg','optional_args',1,'p_t','debug.py',33),
  ('optional_arg -> ID ASSIGN unary_pred','optional_arg',3,'p_t','debug.py',34),
  ('trait_decl_stmts -> trait_decl_stmts trait_decl_stmt','trait_decl_stmts',2,'p_t','debug.py',35),
  ('trait_decl_stmts -> trait_decl_stmt','trait_decl_stmts',1,'p_t','debug.py',36),
  ('trait_decl_stmts -> PASS S_COLON','trait_decl_stmts',2,'p_t','debug.py',37),
  ('trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_t','debug.py',38),
  ('trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_t','debug.py',39),
  ('trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_t','debug.py',40),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_t','debug.py',41),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_t','debug.py',42),
  ('decl_fn_stmts -> decl_fn_stmts decl_fn_stmt','decl_fn_stmts',2,'p_t','debug.py',43),
  ('decl_fn_stmts -> decl_fn_stmt','decl_fn_stmts',1,'p_t','debug.py',44),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_fn_stmt',5,'p_t','debug.py',45),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_t','debug.py',46),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',8,'p_t','debug.py',47),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_t','debug.py',48),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt','decl_cls_fn_stmts',2,'p_t','debug.py',49),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmt','decl_cls_fn_stmts',1,'p_t','debug.py',50),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',5,'p_t','debug.py',51),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_t','debug.py',52),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',8,'p_t','debug.py',53),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_t','debug.py',54),
  ('fn_id -> ID','fn_id',1,'p_t','debug.py',55),
  ('pred_args -> main_pred COMMA next_preds','pred_args',3,'p_t','debug.py',56),
  ('pred_args -> main_pred','pred_args',1,'p_t','debug.py',57),
  ('main_pred -> ID','main_pred',1,'p_t','debug.py',58),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',7,'p_t','debug.py',59),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR','next_preds',5,'p_t','debug.py',60),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds','next_preds',3,'p_t','debug.py',61),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_t','debug.py',62),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR','next_preds',3,'p_t','debug.py',63),
  ('next_preds -> next_anonymous_necessary_preds','next_preds',1,'p_t','debug.py',64),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_t','debug.py',65),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR','next_preds',3,'p_t','debug.py',66),
  ('next_preds -> next_anonymous_opt_preds','next_preds',1,'p_t','debug.py',67),
  ('next_preds -> STAR next_named_preds','next_preds',2,'p_t','debug.py',68),
  ('next_preds -> STAR','next_preds',1,'p_t','debug.py',69),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_t','debug.py',70),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_pred','next_anonymous_necessary_preds',1,'p_t','debug.py',71),
  ('next_anonymous_necessary_pred -> unary_pred','next_anonymous_necessary_pred',1,'p_t','debug.py',72),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_t','debug.py',73),
  ('next_anonymous_opt_preds -> next_anonymous_opt_pred','next_anonymous_opt_preds',1,'p_t','debug.py',74),
  ('next_anonymous_opt_pred -> ASSIGN unary_pred','next_anonymous_opt_pred',2,'p_t','debug.py',75),
  ('next_named_preds -> next_named_preds COMMA next_named_pred','next_named_preds',3,'p_t','debug.py',76),
  ('next_named_preds -> next_named_pred','next_named_preds',1,'p_t','debug.py',77),
  ('next_named_pred -> next_named_necessary_pred','next_named_pred',1,'p_t','debug.py',78),
  ('next_named_pred -> next_named_opt_pred','next_named_pred',1,'p_t','debug.py',79),
  ('next_named_necessary_pred -> arg_name COLON unary_pred','next_named_necessary_pred',3,'p_t','debug.py',80),
  ('next_named_opt_pred -> arg_name COLON ASSIGN unary_pred','next_named_opt_pred',4,'p_t','debug.py',81),
  ('arg_name -> ID','arg_name',1,'p_t','debug.py',82),
  ('type_var_args -> type_var_args COMMA type_var_arg','type_var_args',3,'p_t','debug.py',83),
  ('type_var_args -> type_var_arg','type_var_args',1,'p_t','debug.py',84),
  ('type_var_arg -> type_var_id','type_var_arg',1,'p_t','debug.py',85),
  ('type_var_arg -> type_var_id COLON unary_pred','type_var_arg',3,'p_t','debug.py',86),
  ('type_var_id -> ID','type_var_id',1,'p_t','debug.py',87),
  ('unary_pred -> pred_name','unary_pred',1,'p_t','debug.py',88),
  ('unary_pred -> unnamed_pred','unary_pred',1,'p_t','debug.py',89),
  ('unnamed_pred -> pred_name LP3 args RP3','unnamed_pred',4,'p_t','debug.py',90),
  ('unnamed_pred -> LP3 pred_expr RP3','unnamed_pred',3,'p_t','debug.py',91),
  ('unnamed_pred -> TRAIT_OF LP1 var_expr RP1','unnamed_pred',4,'p_t','debug.py',92),
  ('unnamed_pred -> NONE','unnamed_pred',1,'p_t','debug.py',93),
  ('pred_name -> ID','pred_name',1,'p_t','debug.py',94),
  ('pred_expr -> pred_expr OR pred_expr_a','pred_expr',3,'p_t','debug.py',95),
  ('pred_expr -> pred_expr_a','pred_expr',1,'p_t','debug.py',96),
  ('pred_expr_a -> pred_expr_a AND pred_expr_b','pred_expr_a',3,'p_t','debug.py',97),
  ('pred_expr_a -> pred_expr_b','pred_expr_a',1,'p_t','debug.py',98),
  ('pred_expr_b -> NOT pred_expr_b','pred_expr_b',2,'p_t','debug.py',99),
  ('pred_expr_b -> pred_expr_c','pred_expr_b',1,'p_t','debug.py',100),
  ('pred_expr_c -> unary_pred','pred_expr_c',1,'p_t','debug.py',101),
  ('pred_expr_c -> LP1 pred_expr RP1','pred_expr_c',3,'p_t','debug.py',102),
  ('var_expr -> unary_pred DOT member_var_name','var_expr',3,'p_t','debug.py',103),
  ('member_var_name -> ID','member_var_name',1,'p_t','debug.py',104),
  ('decl_stmts -> decl_stmts decl_stmt','decl_stmts',2,'p_t','debug.py',105),
  ('decl_stmts -> decl_stmt','decl_stmts',1,'p_t','debug.py',106),
  ('decl_stmt -> var_id S_COLON','decl_stmt',2,'p_t','debug.py',107),
  ('decl_stmt -> var_id COLON unary_pred S_COLON','decl_stmt',4,'p_t','debug.py',108),
  ('decl_stmt -> LP3 vars_id RP3 S_COLON','decl_stmt',4,'p_t','debug.py',109),
  ('decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON','decl_stmt',6,'p_t','debug.py',110),
  ('vars_id -> vars_id COMMA var_id','vars_id',3,'p_t','debug.py',111),
  ('vars_id -> var_id','vars_id',1,'p_t','debug.py',112),
  ('var_id -> ID','var_id',1,'p_t','debug.py',113),
  ('decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt','decl_static_fn_stmts',2,'p_t','debug.py',114),
  ('decl_static_fn_stmts -> decl_static_fn_stmt','decl_static_fn_stmts',1,'p_t','debug.py',115),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',5,'p_t','debug.py',116),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',7,'p_t','debug.py',117),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',8,'p_t','debug.py',118),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',10,'p_t','debug.py',119),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON','decl_static_fn_stmt',4,'p_t','debug.py',120),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',6,'p_t','debug.py',121),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON','decl_static_fn_stmt',7,'p_t','debug.py',122),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',9,'p_t','debug.py',123),
  ('static_fn_id -> ID','static_fn_id',1,'p_t','debug.py',124),
  ('print_stmt -> PRINTINFO to_print S_COLON','print_stmt',3,'p_t','debug.py',125),
  ('generate_stmt -> GENERATE to_print S_COLON','generate_stmt',3,'p_t','debug.py',126),
  ('to_print -> ID','to_print',1,'p_t','debug.py',127),
  ('to_print -> boolean_expr','to_print',1,'p_t','debug.py',128),
  ('to_print -> unnamed_pred','to_print',1,'p_t','debug.py',129),
  ('to_print -> unary_pred DOT member_fn_name','to_print',3,'p_t','debug.py',130),
  ('boolean_expr -> boolean_expr OR boolean_expr_a','boolean_expr',3,'p_t','debug.py',131),
  ('boolean_expr -> boolean_expr_a','boolean_expr',1,'p_t','debug.py',132),
  ('boolean_expr_a -> boolean_expr_a XOR boolean_expr_b','boolean_expr_a',3,'p_t','debug.py',133),
  ('boolean_expr_a -> boolean_expr_b','boolean_expr_a',1,'p_t','debug.py',134),
  ('boolean_expr_b -> boolean_expr_b AND boolean_expr_c','boolean_expr_b',3,'p_t','debug.py',135),
  ('boolean_expr_b -> boolean_expr_c','boolean_expr_b',1,'p_t','debug.py',136),
  ('boolean_expr_c -> boolean_expr_c EQ boolean_expr_d','boolean_expr_c',3,'p_t','debug.py',137),
  ('boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d','boolean_expr_c',3,'p_t','debug.py',138),
  ('boolean_expr_c -> boolean_expr_d','boolean_expr_c',1,'p_t','debug.py',139),
  ('boolean_expr_d -> NOT boolean_expr_e','boolean_expr_d',2,'p_t','debug.py',140),
  ('boolean_expr_d -> boolean_expr_e','boolean_expr_d',1,'p_t','debug.py',141),
  ('boolean_expr_e -> atomic_boolean_expr','boolean_expr_e',1,'p_t','debug.py',142),
  ('boolean_expr_e -> LP1 boolean_expr RP1','boolean_expr_e',3,'p_t','debug.py',143),
  ('atomic_boolean_expr -> constants','atomic_boolean_expr',1,'p_t','debug.py',144),
  ('atomic_boolean_expr -> unary_pred LP1 args RP1','atomic_boolean_expr',4,'p_t','debug.py',145),
  ('atomic_boolean_expr -> unary_pred IMPLIES unary_pred','atomic_boolean_expr',3,'p_t','debug.py',146),
  ('atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1','atomic_boolean_expr',5,'p_t','debug.py',147),
  ('atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1','atomic_boolean_expr',5,'p_t','debug.py',148),
  ('constants -> TRUE','constants',1,'p_t','debug.py',149),
  ('constants -> FALSE','constants',1,'p_t','debug.py',150),
  ('args -> args COMMA arg','args',3,'p_t','debug.py',151),
  ('args -> arg','args',1,'p_t','debug.py',152),
  ('arg -> ID','arg',1,'p_t','debug.py',153),
  ('member_fn_name -> ID','member_fn_name',1,'p_t','debug.py',154),
  ('assign_stmt -> names ASSIGN assign_expr S_COLON','assign_stmt',4,'p_t','debug.py',155),
  ('names -> names COMMA name','names',3,'p_t','debug.py',156),
  ('names -> name','names',1,'p_t','debug.py',157),
  ('name -> ID','name',1,'p_t','debug.py',158),
  ('assign_expr -> names ASSIGN assign_expr','assign_expr',3,'p_t','debug.py',159),
  ('assign_expr -> names','assign_expr',1,'p_t','debug.py',160),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CLS_FN CLS_VAR COLON COMMA DOT EQ EXTENDS FALSE FN GENERATE ID IMPLIES LP1 LP2 LP3 NEQ NONE NOT OR PASS PRINTINFO PROGRAM_BEGIN PROGRAM_END RP1 RP2 RP3 R_ARROW STAR STATIC_FN S_COLON TRAIT TRAIT_OF TRUE VAR WS XOR program : PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON  program : WS  stmts : stmts stmt  stmts : stmt  stmt : trait_decl  stmt : print_stmt  stmt : generate_stmt  stmt : assign_stmt  stmt : S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_id : ID  class_args : main_arg COMMA sub_args  class_args : main_arg  main_arg : ID  sub_args : necessary_args COMMA optional_args sub_args : necessary_args  sub_args : optional_args  necessary_args : necessary_args COMMA necessary_arg  necessary_args : necessary_arg  necessary_arg : ID  optional_args : optional_args COMMA optional_arg  optional_args : optional_arg  optional_arg : ID ASSIGN unary_pred trait_decl_stmts : trait_decl_stmts trait_decl_stmt  trait_decl_stmts : trait_decl_stmt  trait_decl_stmts : PASS S_COLON  trait_decl_stmt : FN COLON LP2 decl_fn_stmts RP2 S_COLON  trait_decl_stmt : VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON  trait_decl_stmt : CLS_VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON  decl_fn_stmts : decl_fn_stmts decl_fn_stmt  decl_fn_stmts : decl_fn_stmt  decl_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmts : decl_cls_fn_stmts decl_cls_fn_stmt  decl_cls_fn_stmts : decl_cls_fn_stmt  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  fn_id : ID  pred_args : main_pred COMMA next_preds  pred_args : main_pred  main_pred : ID  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds next_preds : next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA STAR  next_preds : next_anonymous_necessary_preds  next_preds : next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_opt_preds  next_preds : STAR COMMA next_named_preds  next_preds : STAR  next_anonymous_necessary_preds : next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred  next_anonymous_necessary_preds : next_anonymous_necessary_pred  next_anonymous_necessary_pred : unary_pred  next_anonymous_opt_preds : next_anonymous_opt_preds COMMA next_anonymous_opt_pred  next_anonymous_opt_preds : next_anonymous_opt_pred  next_anonymous_opt_pred : ASSIGN unary_pred  next_named_preds : next_named_preds COMMA next_named_pred  next_named_preds : next_named_pred  next_named_pred : next_named_necessary_pred  next_named_pred : next_named_opt_pred  next_named_necessary_pred : arg_name COLON unary_pred  next_named_opt_pred : arg_name COLON ASSIGN unary_pred  arg_name : ID  type_var_args : type_var_args COMMA type_var_arg  type_var_args : type_var_arg  type_var_arg : type_var_id  type_var_arg : type_var_id COLON unary_pred  type_var_id : ID  unary_pred : pred_name  unary_pred : unnamed_pred  unnamed_pred : pred_name LP3 args RP3  unnamed_pred : LP3 pred_expr RP3  unnamed_pred : TRAIT_OF LP1 var_expr RP1  unnamed_pred : NONE  pred_name : ID  pred_expr : pred_expr OR pred_expr_a  pred_expr : pred_expr_a  pred_expr_a : pred_expr_a AND pred_expr_b  pred_expr_a : pred_expr_b  pred_expr_b : NOT pred_expr_c  pred_expr_b : pred_expr_c  pred_expr_c : unary_pred  pred_expr_c : LP1 pred_expr RP1  var_expr : unary_pred DOT member_var_name  member_var_name : ID  decl_stmts : decl_stmts decl_stmt  decl_stmts : decl_stmt  decl_stmt : var_id S_COLON  decl_stmt : var_id COLON unary_pred S_COLON  decl_stmt : LP3 vars_id RP3 S_COLON  decl_stmt : LP3 vars_id RP3 COLON unary_pred S_COLON  vars_id : vars_id COMMA var_id  vars_id : var_id  var_id : ID  decl_static_fn_stmts : decl_static_fn_stmts decl_static_fn_stmt  decl_static_fn_stmts : decl_static_fn_stmt  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON  static_fn_id : ID  print_stmt : PRINTINFO to_print S_COLON  generate_stmt : GENERATE to_print S_COLON  to_print : ID  to_print : boolean_expr  to_print : unnamed_pred  boolean_expr : boolean_expr OR boolean_expr_a  boolean_expr : boolean_expr_a  boolean_expr_a : boolean_expr_a XOR boolean_expr_b  boolean_expr_a : boolean_expr_b  boolean_expr_b : boolean_expr_b AND boolean_expr_c  boolean_expr_b : boolean_expr_c  boolean_expr_c : boolean_expr_c EQ boolean_expr_d  boolean_expr_c : boolean_expr_c NEQ boolean_expr_d  boolean_expr_c : boolean_expr_d  boolean_expr_d : NOT boolean_expr_e  boolean_expr_d : boolean_expr_e  boolean_expr_e : atomic_boolean_expr  boolean_expr_e : LP1 boolean_expr RP1  atomic_boolean_expr : constants  atomic_boolean_expr : unary_pred LP1 args RP1  atomic_boolean_expr : unary_pred IMPLIES unary_pred  atomic_boolean_expr : LP1 unary_pred EQ unary_pred RP1  atomic_boolean_expr : LP1 unary_pred NEQ unary_pred RP1  constants : TRUE  constants : FALSE  args : args COMMA pred_expr  args : pred_expr  assign_stmt : names ASSIGN assign_expr S_COLON  names : names COMMA name  names : name  name : ID  assign_expr : names ASSIGN assign_expr  assign_expr : names  trait_decl : TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  decl_fn_stmt : fn_id error RP1 S_COLON  decl_fn_stmt : fn_id LP1 error S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_fn_stmt : fn_id error RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 error LP1 pred_args RP1 S_COLON  decl_stmt :  error RP3 S_COLON  decl_stmt :  error RP3 COLON unary_pred S_COLON  decl_stmt :  LP3 error S_COLON  decl_static_fn_stmt : static_fn_id error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 error S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_static_fn_stmt : static_fn_id error RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 error LP1 next_preds RP1 S_COLON \n    boolean_expr : error boolean_expr_e\n                 | boolean_expr OR error\n    boolean_expr_a : boolean_expr_a XOR error\n    boolean_expr_b : boolean_expr_b AND error\n    boolean_expr_c : boolean_expr_c EQ error\n                   | boolean_expr_c NEQ error\n    boolean_expr_d : NOT error\n    boolean_expr_e : LP1 error RP1\n    \n    atomic_boolean_expr : error LP1 args RP1\n                        | error IMPLIES unary_pred\n    \n    atomic_boolean_expr : unary_pred error unary_pred\n    \n    print_stmt : PRINTINFO error S_COLON\n    generate_stmt : GENERATE error S_COLON\n    \n    vars_id : error COMMA var_id\n            | vars_id COMMA error\n    type_var_args : error COMMA type_var_arg\n                  | type_var_args COMMA error\n    next_anonymous_necessary_preds : error COMMA next_anonymous_necessary_pred\n    next_anonymous_opt_preds : error COMMA next_anonymous_opt_pred\n                             | next_anonymous_opt_preds COMMA error\n    next_named_preds : error COMMA next_named_pred\n                     | next_named_preds COMMA error\n\n    pred_args : error COMMA next_preds\n    necessary_args : error COMMA necessary_arg\n    optional_args : error COMMA optional_arg\n                  | optional_args COMMA error\n    \n    next_named_necessary_pred : name ASSIGN error unary_pred\n    \n    next_named_opt_pred : name ASSIGN COLON error unary_pred\n    \n    pred_expr : error AND pred_expr_c\n              | pred_expr OR error\n    \n    assign_stmt : names ASSIGN error S_COLON\n    \n    decl_fn_stmt : fn_id LP1 RP1 error S_COLON\n                 | fn_id LP1 RP1 error R_ARROW unary_pred S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON\n    \n    decl_cls_fn_stmt : fn_id LP1 RP1 error S_COLON\n                     | fn_id LP1 RP1 error R_ARROW unary_pred S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON\n    \n    decl_static_fn_stmt : static_fn_id LP3 RP3 error S_COLON\n    decl_fn_stmt : fn_id LP3 RP3 error S_COLON\n    decl_cls_fn_stmt : fn_id LP3 RP3 error S_COLON\n    \n    decl_fn_stmt : error S_COLON\n    decl_cls_fn_stmt : error S_COLON\n    decl_static_fn_stmt : error S_COLON\n    decl_stmt : error S_COLON\n    \n    decl_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW error S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON\n    decl_cls_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW error S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON\n    decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 R_ARROW error S_COLON\n                        | static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW error S_COLON\n    \n    decl_stmt : var_id COLON error S_COLON\n              | LP3 vars_id RP3 COLON error S_COLON\n    \n    trait_decl_stmt : FN COLON LP2 RP2 error S_COLON\n                    | CLS_FN COLON LP2 RP2 error S_COLON\n                    | STATIC_FN COLON LP2 RP2 error S_COLON\n                    | VAR COLON LP2 RP2 error S_COLON\n                    | CLS_VAR COLON LP2 RP2 error S_COLON\n    '
    
_lr_action_items = {'PROGRAM_BEGIN':([0,],[2,]),'WS':([0,],[3,]),'$end':([1,3,47,],[0,-2,-1,]),'S_COLON':([2,4,5,6,7,8,9,10,11,16,17,18,19,22,23,24,25,26,27,28,33,34,35,36,38,39,41,42,43,44,50,52,53,56,57,58,77,78,82,83,84,85,86,87,100,101,102,103,104,106,114,115,118,119,120,121,122,123,125,126,128,129,136,139,145,149,150,164,174,175,184,195,206,213,215,220,226,228,230,233,240,244,245,248,250,255,257,258,263,265,267,271,272,273,275,280,281,282,287,296,302,303,304,321,323,333,335,336,337,338,344,350,358,359,361,362,372,393,394,403,426,427,428,431,432,433,434,437,438,439,442,443,454,455,456,457,458,462,463,471,472,485,506,507,508,509,510,511,512,515,516,],[4,5,-9,5,-4,-5,-6,-7,-8,-144,-145,47,-3,50,52,-117,-118,-119,-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,82,83,-115,-178,-167,-78,-79,-84,-129,-173,-116,-179,-147,128,129,-143,-176,-120,-168,-122,-169,-81,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,-142,-197,-175,-80,-82,-134,-146,186,-136,-137,206,215,-148,245,-149,251,259,260,-103,268,276,280,-10,283,284,298,299,300,306,308,309,316,317,318,319,-150,335,336,339,348,351,352,353,363,365,374,-11,-151,376,378,387,392,395,397,400,401,423,435,436,444,459,460,461,464,465,466,467,468,469,470,473,474,486,488,489,490,491,492,494,496,498,504,517,518,519,520,521,522,523,524,525,]),'TRAIT':([4,5,6,7,8,9,10,11,19,50,52,82,83,128,129,206,215,245,280,335,336,],[12,-9,12,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-197,-148,-149,-10,-150,-11,-151,]),'PRINTINFO':([4,5,6,7,8,9,10,11,19,50,52,82,83,128,129,206,215,245,280,335,336,],[13,-9,13,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-197,-148,-149,-10,-150,-11,-151,]),'GENERATE':([4,5,6,7,8,9,10,11,19,50,52,82,83,128,129,206,215,245,280,335,336,],[14,-9,14,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-197,-148,-149,-10,-150,-11,-151,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,19,23,30,32,37,44,45,46,48,50,52,54,55,59,60,61,67,69,70,72,74,75,76,79,80,81,82,83,92,93,94,95,99,107,108,109,116,117,127,128,129,132,135,137,146,152,154,180,181,182,183,206,207,208,209,210,211,215,217,218,221,224,227,229,231,234,236,238,241,245,249,251,252,253,256,259,260,261,266,268,269,270,274,276,277,278,280,300,301,305,306,307,329,335,336,339,340,341,343,345,346,347,348,349,351,352,353,354,363,364,365,366,367,369,373,374,375,376,377,378,379,383,387,392,395,396,397,398,399,400,401,402,421,423,435,436,444,446,448,449,450,451,459,460,461,464,465,466,467,468,469,470,473,474,482,483,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,503,504,505,517,518,519,520,521,522,523,524,525,],[17,-9,17,-4,-5,-6,-7,-8,21,24,24,-3,58,58,58,58,58,17,17,90,-115,-178,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-116,-179,58,58,58,58,58,58,58,58,58,58,17,-142,-197,161,58,58,173,58,58,161,202,161,58,-148,223,230,223,230,243,-149,202,223,-34,230,-96,230,223,-40,230,243,-105,-10,-33,-209,289,295,-95,-212,-97,58,-39,-210,289,295,-104,-211,58,295,-150,-158,58,230,-160,230,58,-11,-151,-153,58,58,295,289,295,58,-152,289,-98,-219,-99,58,-110,58,-162,58,58,420,58,-161,58,-35,58,-198,58,289,-207,-159,-41,58,-202,58,289,-208,-106,58,58,-206,-100,-220,-111,420,420,420,420,58,-36,-213,-199,-155,-154,-157,-156,-42,-215,-203,-107,-217,58,58,-112,58,-164,-163,-166,-165,-37,58,-200,58,-43,58,-204,58,420,58,-108,58,-113,-38,-214,-201,-44,-216,-205,-109,-218,]),'PROGRAM_END':([5,6,7,8,9,10,11,19,50,52,82,83,128,129,206,215,245,280,335,336,],[-9,18,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-197,-148,-149,-10,-150,-11,-151,]),'error':([13,14,20,21,23,24,26,29,30,32,33,37,40,44,45,54,56,57,58,59,60,61,69,72,73,74,75,76,79,88,89,90,93,94,95,97,99,106,107,132,135,137,138,139,145,155,156,157,158,160,161,180,181,197,198,200,201,203,204,205,207,208,209,210,211,218,219,221,222,223,224,225,227,229,231,232,234,236,237,238,239,241,242,243,249,251,252,253,256,259,260,261,266,268,269,270,274,276,277,278,286,291,300,305,306,311,314,331,339,340,341,342,343,345,348,349,351,352,353,354,363,365,367,368,369,371,373,374,375,376,377,378,383,387,392,395,396,397,399,400,401,402,421,423,430,435,436,441,444,445,446,448,449,452,459,460,461,464,465,466,467,468,469,470,473,474,484,486,488,489,490,491,492,493,494,496,497,498,500,504,505,517,518,519,520,521,522,523,524,525,],[23,44,49,-12,51,-84,-79,-78,64,72,-83,78,81,51,86,94,-78,-79,-84,102,104,64,64,51,81,119,121,123,64,131,-14,-15,64,51,135,81,78,-81,141,159,51,64,81,-80,-82,-13,-17,-18,-20,-23,-21,199,201,-16,-19,-22,-192,-190,-191,-24,220,226,233,226,240,220,250,-34,254,-45,226,257,-96,263,233,267,-40,226,272,240,275,-105,279,-114,-33,-209,287,292,-95,-212,-97,303,-39,-210,312,315,-104,-211,323,332,338,344,-158,356,-160,359,361,372,-153,380,380,384,386,312,-152,312,-98,-219,-99,394,-110,-162,409,412,415,422,380,-161,380,-35,427,-198,431,-207,-159,-41,438,-202,312,-208,-106,443,455,-206,463,-100,-220,472,-111,412,415,415,479,483,-36,-213,-199,-155,-154,-157,-156,-42,-215,-203,-107,-217,503,-112,-164,-163,-166,-165,-37,508,-200,-43,511,-204,415,-108,516,-113,-38,-214,-201,-44,-216,-205,-109,-218,]),'LP3':([13,14,23,24,29,30,32,37,44,54,55,56,58,59,60,61,67,69,70,72,74,75,76,79,80,81,92,93,94,95,99,107,108,109,116,117,135,137,152,154,183,208,210,222,223,224,227,235,236,242,243,256,259,260,261,277,300,301,306,329,340,341,347,351,352,353,354,364,366,367,373,375,377,379,392,396,398,402,421,435,436,451,482,483,487,493,495,497,499,503,505,],[30,30,30,-84,61,30,30,30,30,30,30,61,-84,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,229,229,253,-45,229,-96,270,229,278,-114,-95,-212,-97,30,30,-158,30,-160,30,30,30,30,-98,-219,-99,30,30,30,30,30,30,30,30,-159,30,30,30,30,-100,-220,30,30,30,30,30,30,30,30,30,30,]),'TRAIT_OF':([13,14,23,30,32,37,44,54,55,59,60,61,67,69,70,72,74,75,76,79,80,81,92,93,94,95,99,107,108,109,116,117,135,137,152,154,183,261,277,301,329,340,341,347,354,364,366,367,373,375,377,379,396,398,402,421,451,482,483,487,493,495,497,499,503,505,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NONE':([13,14,23,30,32,37,44,54,55,59,60,61,67,69,70,72,74,75,76,79,80,81,92,93,94,95,99,107,108,109,116,117,135,137,152,154,183,261,277,301,329,340,341,347,354,364,366,367,373,375,377,379,396,398,402,421,451,482,483,487,493,495,497,499,503,505,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'NOT':([13,14,30,32,54,59,60,61,69,74,75,76,79,93,95,107,108,137,],[37,37,67,37,99,37,37,67,67,37,37,37,67,67,99,67,67,67,]),'LP1':([13,14,20,21,23,24,26,29,30,31,32,33,37,40,44,51,54,56,57,58,59,60,61,67,69,72,73,74,75,76,78,79,93,94,95,97,99,102,104,106,107,108,109,119,121,123,135,137,138,139,145,222,223,235,242,243,292,297,332,334,342,360,371,],[32,32,48,-12,54,-84,-79,-78,69,70,32,-83,32,79,54,93,95,-78,-79,-84,32,32,69,69,69,54,79,32,32,32,93,69,69,54,95,79,95,93,93,-81,69,69,69,93,93,93,54,69,79,-80,-82,252,-45,269,277,-114,345,349,373,375,383,399,421,]),'TRUE':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,95,99,135,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FALSE':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,95,99,135,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ASSIGN':([15,16,17,84,87,161,202,277,340,341,366,367,368,373,375,419,420,421,445,447,451,],[45,-144,-145,127,-143,183,183,329,329,329,329,329,329,329,329,452,-145,329,329,329,482,]),'COMMA':([15,16,17,33,56,57,58,63,65,66,68,84,87,89,90,96,97,98,105,106,110,124,138,139,140,141,142,143,144,145,156,157,158,159,160,161,171,197,198,199,200,201,203,204,205,230,262,263,264,287,288,289,290,292,293,294,295,312,313,315,322,323,324,325,326,327,328,330,332,355,356,357,370,380,385,386,389,390,404,405,406,407,408,409,410,411,412,413,414,415,416,417,431,455,475,476,477,478,479,480,481,501,502,513,514,],[46,-144,-145,-83,-78,-79,-84,-86,-90,-88,-91,46,-143,132,-15,137,-91,-141,137,-81,-89,137,-91,-80,-85,-196,-87,-195,-92,-82,180,181,-20,182,-23,-21,-140,181,-19,217,-22,-192,-190,-191,-24,-103,305,307,-102,340,341,-48,343,346,-74,-75,-77,340,343,346,-62,366,367,368,369,-61,-64,343,346,-101,-181,-180,-65,366,-73,-183,-182,-76,-184,-185,445,446,-60,447,448,-63,-186,449,-67,450,-68,-69,340,366,500,449,449,-66,-188,-187,-70,-71,-193,449,-194,]),'IMPLIES':([23,24,26,29,33,40,44,51,56,57,58,72,73,78,94,97,102,104,106,119,121,123,135,138,139,145,],[55,-84,-79,-78,-83,80,55,55,-78,-79,-84,55,80,55,55,80,55,55,-81,55,55,55,55,80,-80,-82,]),'OR':([25,27,28,33,34,35,36,38,39,41,42,53,56,57,58,62,63,65,66,68,71,77,78,97,98,100,101,102,103,104,106,110,111,114,115,118,119,120,121,122,123,125,126,136,138,139,140,141,142,143,144,145,149,171,174,175,],[59,-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,-167,-78,-79,-84,107,-86,-90,-88,-91,59,-129,-173,-91,107,-176,-120,-168,-122,-169,-81,-89,107,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,-175,-91,-80,-85,-196,-87,-195,-92,-82,-134,107,-136,-137,]),'RP1':([27,28,33,34,35,36,38,39,41,42,53,56,57,58,63,65,66,68,71,72,77,78,88,89,90,94,96,97,98,100,101,102,103,104,106,110,111,112,114,115,118,119,120,121,122,123,124,125,126,135,136,138,139,140,141,142,143,144,145,147,148,149,155,156,157,158,160,161,171,172,173,174,175,197,198,200,201,203,204,205,252,254,269,277,279,285,288,289,310,320,322,324,325,326,327,328,370,381,382,383,384,388,391,399,404,405,406,407,408,410,411,412,413,414,416,417,421,422,424,425,429,440,453,475,476,477,478,479,480,481,501,502,513,514,],[-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,-167,-78,-79,-84,-86,-90,-88,-91,114,115,-129,-173,130,-14,-15,115,136,-91,-141,-176,-120,-168,-122,-169,-81,-89,144,145,-132,-174,-124,-170,-126,-171,-127,-172,149,-135,-177,115,-175,-91,-80,-85,-196,-87,-195,-92,-82,174,175,-134,-13,-17,-18,-20,-23,-21,-140,-93,-94,-136,-137,-16,-19,-22,-192,-190,-191,-24,286,296,311,321,333,337,-47,-48,358,362,-62,-54,-57,-59,-61,-64,-65,-189,-46,430,432,433,434,441,-184,-185,-51,-53,-60,-56,-63,-186,-58,-67,-68,-69,454,456,457,458,462,471,485,-50,-52,-55,-66,-188,-187,-70,-71,-193,-49,-194,]),'XOR':([27,28,33,34,35,36,38,39,41,42,56,57,58,77,78,100,101,103,104,106,114,115,118,119,120,121,122,123,125,126,136,139,145,149,174,175,],[60,-130,-83,-123,-125,-128,-131,-133,-138,-139,-78,-79,-84,-129,-173,-176,60,-122,-169,-81,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,-175,-80,-82,-134,-136,-137,]),'EQ':([28,33,35,36,38,39,41,42,56,57,58,73,77,78,97,100,106,114,115,118,120,121,122,123,125,126,136,139,145,149,174,175,],[-130,-83,75,-128,-131,-133,-138,-139,-78,-79,-84,116,-129,-173,116,-176,-81,-132,-174,75,-126,-171,-127,-172,-135,-177,-175,-80,-82,-134,-136,-137,]),'NEQ':([28,33,35,36,38,39,41,42,56,57,58,73,77,78,97,100,106,114,115,118,120,121,122,123,125,126,136,139,145,149,174,175,],[-130,-83,76,-128,-131,-133,-138,-139,-78,-79,-84,117,-129,-173,117,-176,-81,-132,-174,76,-126,-171,-127,-172,-135,-177,-175,-80,-82,-134,-136,-137,]),'AND':([28,33,34,35,36,38,39,41,42,56,57,58,63,64,65,66,68,77,78,94,97,100,103,106,110,114,115,118,119,120,121,122,123,125,126,135,136,138,139,140,142,144,145,149,174,175,],[-130,-83,74,-125,-128,-131,-133,-138,-139,-78,-79,-84,108,109,-90,-88,-91,-129,-173,109,-91,-176,74,-81,-89,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,109,-175,-91,-80,108,-87,-92,-82,-134,-136,-137,]),'RP3':([33,56,57,58,62,63,65,66,68,98,105,106,110,139,140,141,142,143,144,145,171,226,230,253,254,262,264,270,278,279,290,293,294,295,313,330,355,356,357,385,386,389,390,],[-83,-78,-79,-84,106,-86,-90,-88,-91,-141,139,-81,-89,-80,-85,-196,-87,-195,-92,-82,-140,258,-103,291,297,304,-102,314,331,334,342,-74,-75,-77,360,371,-101,-181,-180,-73,-183,-182,-76,]),'DOT':([33,56,57,58,106,113,139,145,],[-83,-78,-79,-84,-81,146,-80,-82,]),'COLON':([33,49,56,57,58,106,130,134,139,145,165,166,167,168,169,177,179,228,230,258,294,295,304,418,420,452,],[-83,91,-78,-79,-84,-81,151,170,-80,-82,187,188,189,190,191,194,196,261,-103,301,347,-77,354,451,-72,484,]),'EXTENDS':([49,130,131,],[92,152,154,]),'LP2':([91,131,151,170,187,188,189,190,191,194,196,],[133,153,176,192,207,208,209,210,211,214,216,]),'PASS':([133,153,176,192,214,216,],[164,164,164,164,164,164,]),'FN':([133,153,162,163,176,178,185,186,192,193,212,214,216,246,247,283,284,298,299,308,309,316,317,318,319,],[165,165,165,-26,165,165,-25,-27,165,165,165,165,165,165,165,-28,-221,-29,-224,-30,-222,-31,-225,-32,-223,]),'VAR':([133,153,162,163,176,178,185,186,192,193,212,214,216,246,247,283,284,298,299,308,309,316,317,318,319,],[166,166,166,-26,166,166,-25,-27,166,166,166,166,166,166,166,-28,-221,-29,-224,-30,-222,-31,-225,-32,-223,]),'CLS_FN':([133,153,162,163,176,178,185,186,192,193,212,214,216,246,247,283,284,298,299,308,309,316,317,318,319,],[167,167,167,-26,167,167,-25,-27,167,167,167,167,167,167,167,-28,-221,-29,-224,-30,-222,-31,-225,-32,-223,]),'CLS_VAR':([133,153,162,163,176,178,185,186,192,193,212,214,216,246,247,283,284,298,299,308,309,316,317,318,319,],[168,168,168,-26,168,168,-25,-27,168,168,168,168,168,168,168,-28,-221,-29,-224,-30,-222,-31,-225,-32,-223,]),'STATIC_FN':([133,153,162,163,176,178,185,186,192,193,212,214,216,246,247,283,284,298,299,308,309,316,317,318,319,],[169,169,169,-26,169,169,-25,-27,169,169,169,169,169,169,169,-28,-221,-29,-224,-30,-222,-31,-225,-32,-223,]),'RP2':([162,163,178,185,186,193,207,208,209,210,211,212,218,221,224,227,231,234,236,238,241,246,247,249,251,256,259,260,266,268,274,276,283,284,298,299,300,306,308,309,316,317,318,319,339,348,351,352,353,363,365,374,376,378,387,392,395,397,400,401,423,435,436,444,459,460,461,464,465,466,467,468,469,470,473,474,486,488,489,490,491,492,494,496,498,504,517,518,519,520,521,522,523,524,525,],[184,-26,195,-25,-27,213,219,225,232,237,239,244,248,-34,255,-96,265,-40,271,273,-105,281,282,-33,-209,-95,-212,-97,-39,-210,-104,-211,-28,-221,-29,-224,-158,-160,-30,-222,-31,-225,-32,-223,-153,-152,-98,-219,-99,-110,-162,-161,-35,-198,-207,-159,-41,-202,-208,-106,-206,-100,-220,-111,-36,-213,-199,-155,-154,-157,-156,-42,-215,-203,-107,-217,-112,-164,-163,-166,-165,-37,-200,-43,-204,-108,-113,-38,-214,-201,-44,-216,-205,-109,-218,]),'STAR':([277,340,341,367,368,373,375,421,445,],[326,326,326,407,410,326,326,326,475,]),'R_ARROW':([321,337,338,358,359,362,454,462,463,471,472,485,],[364,377,379,396,398,402,487,493,495,497,499,505,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([4,],[6,]),'stmt':([4,6,],[7,19,]),'trait_decl':([4,6,],[8,8,]),'print_stmt':([4,6,],[9,9,]),'generate_stmt':([4,6,],[10,10,]),'assign_stmt':([4,6,],[11,11,]),'names':([4,6,45,127,],[15,15,84,84,]),'name':([4,6,45,46,127,369,446,448,449,450,500,],[16,16,16,87,16,419,419,419,419,419,419,]),'trait_id':([12,],[20,]),'to_print':([13,14,],[22,43,]),'boolean_expr':([13,14,32,54,95,],[25,25,71,71,71,]),'unnamed_pred':([13,14,23,30,32,37,44,54,55,59,60,61,67,69,70,72,74,75,76,79,80,81,92,93,94,95,99,107,108,109,116,117,135,137,152,154,183,261,277,301,329,340,341,347,354,364,366,367,373,375,377,379,396,398,402,421,451,482,483,487,493,495,497,499,503,505,],[26,26,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'boolean_expr_a':([13,14,32,54,59,95,],[27,27,27,27,101,27,]),'boolean_expr_e':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,95,99,135,],[28,28,53,28,77,53,28,28,28,53,28,28,28,53,28,77,53,]),'pred_name':([13,14,23,30,32,37,44,54,55,59,60,61,67,69,70,72,74,75,76,79,80,81,92,93,94,95,99,107,108,109,116,117,135,137,152,154,183,261,277,301,329,340,341,347,354,364,366,367,373,375,377,379,396,398,402,421,451,482,483,487,493,495,497,499,503,505,],[29,29,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'boolean_expr_b':([13,14,32,54,59,60,95,],[34,34,34,34,34,103,34,]),'boolean_expr_c':([13,14,32,54,59,60,74,95,],[35,35,35,35,35,35,118,35,]),'boolean_expr_d':([13,14,32,54,59,60,74,75,76,95,],[36,36,36,36,36,36,36,120,122,36,]),'atomic_boolean_expr':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,95,99,135,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'constants':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,95,99,135,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'unary_pred':([13,14,23,30,32,37,44,54,55,59,60,61,67,69,70,72,74,75,76,79,80,81,92,93,94,95,99,107,108,109,116,117,135,137,152,154,183,261,277,301,329,340,341,347,354,364,366,367,373,375,377,379,396,398,402,421,451,482,483,487,493,495,497,499,503,505,],[40,40,40,68,73,40,40,97,100,40,40,68,68,68,113,40,40,40,40,68,125,126,134,68,40,97,138,68,68,68,147,148,40,68,177,179,205,302,322,350,370,322,322,390,393,403,322,322,322,322,426,428,437,439,442,322,481,501,502,506,507,509,510,512,514,515,]),'pred_expr':([30,54,61,69,79,93,95,137,],[62,98,98,111,98,98,111,171,]),'pred_expr_a':([30,54,61,69,79,93,95,107,137,],[63,63,63,63,63,63,63,140,63,]),'pred_expr_c':([30,54,61,67,69,79,93,95,99,107,108,109,137,],[65,65,65,110,65,65,65,65,110,65,65,143,65,]),'pred_expr_b':([30,54,61,69,79,93,95,107,108,137,],[66,66,66,66,66,66,66,66,142,66,]),'assign_expr':([45,127,],[85,150,]),'class_args':([48,],[88,]),'main_arg':([48,],[89,]),'args':([54,61,79,93,],[96,105,124,96,]),'var_expr':([70,],[112,]),'sub_args':([132,],[155,]),'necessary_args':([132,],[156,]),'optional_args':([132,180,],[157,197,]),'necessary_arg':([132,180,182,],[158,198,203,]),'optional_arg':([132,180,181,182,217,],[160,160,200,204,204,]),'trait_decl_stmts':([133,153,176,192,214,216,],[162,178,193,212,246,247,]),'trait_decl_stmt':([133,153,162,176,178,192,193,212,214,216,246,247,],[163,163,185,163,185,163,185,185,163,163,185,185,]),'member_var_name':([146,],[172,]),'decl_fn_stmts':([207,],[218,]),'decl_fn_stmt':([207,218,],[221,249,]),'fn_id':([207,209,218,231,],[222,235,222,235,]),'decl_stmts':([208,210,],[224,236,]),'decl_stmt':([208,210,224,236,],[227,227,256,256,]),'var_id':([208,210,224,229,236,305,307,],[228,228,228,264,228,355,357,]),'decl_cls_fn_stmts':([209,],[231,]),'decl_cls_fn_stmt':([209,231,],[234,266,]),'decl_static_fn_stmts':([211,],[238,]),'decl_static_fn_stmt':([211,238,],[241,274,]),'static_fn_id':([211,238,],[242,242,]),'vars_id':([229,],[262,]),'pred_args':([252,269,345,349,383,399,],[285,310,388,391,429,440,]),'main_pred':([252,269,345,349,383,399,],[288,288,288,288,288,288,]),'type_var_args':([253,270,278,],[290,313,330,]),'type_var_arg':([253,270,278,343,346,],[293,293,293,385,389,]),'type_var_id':([253,270,278,343,346,],[294,294,294,294,294,]),'next_preds':([277,340,341,373,375,421,],[320,381,382,424,425,453,]),'next_anonymous_necessary_preds':([277,340,341,373,375,421,],[324,324,324,324,324,324,]),'next_anonymous_opt_preds':([277,340,341,367,373,375,421,],[325,325,325,406,325,325,325,]),'next_anonymous_necessary_pred':([277,340,341,366,367,373,375,421,],[327,327,327,404,408,327,327,327,]),'next_anonymous_opt_pred':([277,340,341,366,367,368,373,375,421,445,447,],[328,328,328,405,328,411,328,328,328,411,405,]),'next_named_preds':([369,446,448,500,],[413,476,477,513,]),'next_named_pred':([369,446,448,449,450,500,],[414,414,414,478,480,414,]),'next_named_necessary_pred':([369,446,448,449,450,500,],[416,416,416,416,416,416,]),'next_named_opt_pred':([369,446,448,449,450,500,],[417,417,417,417,417,417,]),'arg_name':([369,446,448,449,450,500,],[418,418,418,418,418,418,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON','program',5,'p_program_r0','parser.py',164),
  ('program -> WS','program',1,'p_program_r1','parser.py',169),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_r0','parser.py',174),
  ('stmts -> stmt','stmts',1,'p_stmts_r1','parser.py',179),
  ('stmt -> trait_decl','stmt',1,'p_stmt_r0','parser.py',184),
  ('stmt -> print_stmt','stmt',1,'p_stmt_r1','parser.py',189),
  ('stmt -> generate_stmt','stmt',1,'p_stmt_r2','parser.py',194),
  ('stmt -> assign_stmt','stmt',1,'p_stmt_r3','parser.py',199),
  ('stmt -> S_COLON','stmt',1,'p_stmt_r4','parser.py',204),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_r0','parser.py',209),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_r1','parser.py',214),
  ('trait_id -> ID','trait_id',1,'p_trait_id_r0','parser.py',219),
  ('class_args -> main_arg COMMA sub_args','class_args',3,'p_class_args_r0','parser.py',224),
  ('class_args -> main_arg','class_args',1,'p_class_args_r1','parser.py',229),
  ('main_arg -> ID','main_arg',1,'p_main_arg_r0','parser.py',234),
  ('sub_args -> necessary_args COMMA optional_args','sub_args',3,'p_sub_args_r0','parser.py',239),
  ('sub_args -> necessary_args','sub_args',1,'p_sub_args_r1','parser.py',244),
  ('sub_args -> optional_args','sub_args',1,'p_sub_args_r2','parser.py',249),
  ('necessary_args -> necessary_args COMMA necessary_arg','necessary_args',3,'p_necessary_args_r0','parser.py',254),
  ('necessary_args -> necessary_arg','necessary_args',1,'p_necessary_args_r1','parser.py',259),
  ('necessary_arg -> ID','necessary_arg',1,'p_necessary_arg_r0','parser.py',264),
  ('optional_args -> optional_args COMMA optional_arg','optional_args',3,'p_optional_args_r0','parser.py',269),
  ('optional_args -> optional_arg','optional_args',1,'p_optional_args_r1','parser.py',274),
  ('optional_arg -> ID ASSIGN unary_pred','optional_arg',3,'p_optional_arg_r0','parser.py',279),
  ('trait_decl_stmts -> trait_decl_stmts trait_decl_stmt','trait_decl_stmts',2,'p_trait_decl_stmts_r0','parser.py',284),
  ('trait_decl_stmts -> trait_decl_stmt','trait_decl_stmts',1,'p_trait_decl_stmts_r1','parser.py',289),
  ('trait_decl_stmts -> PASS S_COLON','trait_decl_stmts',2,'p_trait_decl_stmts_r2','parser.py',294),
  ('trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r0','parser.py',299),
  ('trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r1','parser.py',304),
  ('trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r2','parser.py',309),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r3','parser.py',314),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r4','parser.py',319),
  ('decl_fn_stmts -> decl_fn_stmts decl_fn_stmt','decl_fn_stmts',2,'p_decl_fn_stmts_r0','parser.py',324),
  ('decl_fn_stmts -> decl_fn_stmt','decl_fn_stmts',1,'p_decl_fn_stmts_r1','parser.py',329),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_fn_stmt',5,'p_decl_fn_stmt_r0','parser.py',334),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_r1','parser.py',339),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',8,'p_decl_fn_stmt_r2','parser.py',344),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_decl_fn_stmt_r3','parser.py',349),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt','decl_cls_fn_stmts',2,'p_decl_cls_fn_stmts_r0','parser.py',354),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmt','decl_cls_fn_stmts',1,'p_decl_cls_fn_stmts_r1','parser.py',359),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',5,'p_decl_cls_fn_stmt_r0','parser.py',364),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_decl_cls_fn_stmt_r1','parser.py',369),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',8,'p_decl_cls_fn_stmt_r2','parser.py',374),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_decl_cls_fn_stmt_r3','parser.py',379),
  ('fn_id -> ID','fn_id',1,'p_fn_id_r0','parser.py',384),
  ('pred_args -> main_pred COMMA next_preds','pred_args',3,'p_pred_args_r0','parser.py',389),
  ('pred_args -> main_pred','pred_args',1,'p_pred_args_r1','parser.py',394),
  ('main_pred -> ID','main_pred',1,'p_main_pred_r0','parser.py',399),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',7,'p_next_preds_r0','parser.py',404),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR','next_preds',5,'p_next_preds_r1','parser.py',409),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds','next_preds',3,'p_next_preds_r2','parser.py',414),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r3','parser.py',419),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR','next_preds',3,'p_next_preds_r4','parser.py',424),
  ('next_preds -> next_anonymous_necessary_preds','next_preds',1,'p_next_preds_r5','parser.py',429),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r6','parser.py',434),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR','next_preds',3,'p_next_preds_r7','parser.py',439),
  ('next_preds -> next_anonymous_opt_preds','next_preds',1,'p_next_preds_r8','parser.py',444),
  ('next_preds -> STAR COMMA next_named_preds','next_preds',3,'p_next_preds_r9','parser.py',449),
  ('next_preds -> STAR','next_preds',1,'p_next_preds_r10','parser.py',454),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_next_anonymous_necessary_preds_r0','parser.py',459),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_pred','next_anonymous_necessary_preds',1,'p_next_anonymous_necessary_preds_r1','parser.py',464),
  ('next_anonymous_necessary_pred -> unary_pred','next_anonymous_necessary_pred',1,'p_next_anonymous_necessary_pred_r0','parser.py',469),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_next_anonymous_opt_preds_r0','parser.py',474),
  ('next_anonymous_opt_preds -> next_anonymous_opt_pred','next_anonymous_opt_preds',1,'p_next_anonymous_opt_preds_r1','parser.py',479),
  ('next_anonymous_opt_pred -> ASSIGN unary_pred','next_anonymous_opt_pred',2,'p_next_anonymous_opt_pred_r0','parser.py',484),
  ('next_named_preds -> next_named_preds COMMA next_named_pred','next_named_preds',3,'p_next_named_preds_r0','parser.py',489),
  ('next_named_preds -> next_named_pred','next_named_preds',1,'p_next_named_preds_r1','parser.py',494),
  ('next_named_pred -> next_named_necessary_pred','next_named_pred',1,'p_next_named_pred_r0','parser.py',499),
  ('next_named_pred -> next_named_opt_pred','next_named_pred',1,'p_next_named_pred_r1','parser.py',504),
  ('next_named_necessary_pred -> arg_name COLON unary_pred','next_named_necessary_pred',3,'p_next_named_necessary_pred_r0','parser.py',509),
  ('next_named_opt_pred -> arg_name COLON ASSIGN unary_pred','next_named_opt_pred',4,'p_next_named_opt_pred_r0','parser.py',514),
  ('arg_name -> ID','arg_name',1,'p_arg_name_r0','parser.py',519),
  ('type_var_args -> type_var_args COMMA type_var_arg','type_var_args',3,'p_type_var_args_r0','parser.py',524),
  ('type_var_args -> type_var_arg','type_var_args',1,'p_type_var_args_r1','parser.py',529),
  ('type_var_arg -> type_var_id','type_var_arg',1,'p_type_var_arg_r0','parser.py',534),
  ('type_var_arg -> type_var_id COLON unary_pred','type_var_arg',3,'p_type_var_arg_r1','parser.py',539),
  ('type_var_id -> ID','type_var_id',1,'p_type_var_id_r0','parser.py',544),
  ('unary_pred -> pred_name','unary_pred',1,'p_unary_pred_r0','parser.py',549),
  ('unary_pred -> unnamed_pred','unary_pred',1,'p_unary_pred_r1','parser.py',554),
  ('unnamed_pred -> pred_name LP3 args RP3','unnamed_pred',4,'p_unnamed_pred_r0','parser.py',559),
  ('unnamed_pred -> LP3 pred_expr RP3','unnamed_pred',3,'p_unnamed_pred_r1','parser.py',564),
  ('unnamed_pred -> TRAIT_OF LP1 var_expr RP1','unnamed_pred',4,'p_unnamed_pred_r2','parser.py',569),
  ('unnamed_pred -> NONE','unnamed_pred',1,'p_unnamed_pred_r3','parser.py',574),
  ('pred_name -> ID','pred_name',1,'p_pred_name_r0','parser.py',579),
  ('pred_expr -> pred_expr OR pred_expr_a','pred_expr',3,'p_pred_expr_r0','parser.py',584),
  ('pred_expr -> pred_expr_a','pred_expr',1,'p_pred_expr_r1','parser.py',589),
  ('pred_expr_a -> pred_expr_a AND pred_expr_b','pred_expr_a',3,'p_pred_expr_a_r0','parser.py',594),
  ('pred_expr_a -> pred_expr_b','pred_expr_a',1,'p_pred_expr_a_r1','parser.py',599),
  ('pred_expr_b -> NOT pred_expr_c','pred_expr_b',2,'p_pred_expr_b_r0','parser.py',604),
  ('pred_expr_b -> pred_expr_c','pred_expr_b',1,'p_pred_expr_b_r1','parser.py',609),
  ('pred_expr_c -> unary_pred','pred_expr_c',1,'p_pred_expr_c_r0','parser.py',614),
  ('pred_expr_c -> LP1 pred_expr RP1','pred_expr_c',3,'p_pred_expr_c_r1','parser.py',619),
  ('var_expr -> unary_pred DOT member_var_name','var_expr',3,'p_var_expr_r0','parser.py',624),
  ('member_var_name -> ID','member_var_name',1,'p_member_var_name_r0','parser.py',629),
  ('decl_stmts -> decl_stmts decl_stmt','decl_stmts',2,'p_decl_stmts_r0','parser.py',634),
  ('decl_stmts -> decl_stmt','decl_stmts',1,'p_decl_stmts_r1','parser.py',639),
  ('decl_stmt -> var_id S_COLON','decl_stmt',2,'p_decl_stmt_r0','parser.py',644),
  ('decl_stmt -> var_id COLON unary_pred S_COLON','decl_stmt',4,'p_decl_stmt_r1','parser.py',649),
  ('decl_stmt -> LP3 vars_id RP3 S_COLON','decl_stmt',4,'p_decl_stmt_r2','parser.py',654),
  ('decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON','decl_stmt',6,'p_decl_stmt_r3','parser.py',659),
  ('vars_id -> vars_id COMMA var_id','vars_id',3,'p_vars_id_r0','parser.py',664),
  ('vars_id -> var_id','vars_id',1,'p_vars_id_r1','parser.py',669),
  ('var_id -> ID','var_id',1,'p_var_id_r0','parser.py',674),
  ('decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt','decl_static_fn_stmts',2,'p_decl_static_fn_stmts_r0','parser.py',679),
  ('decl_static_fn_stmts -> decl_static_fn_stmt','decl_static_fn_stmts',1,'p_decl_static_fn_stmts_r1','parser.py',684),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',5,'p_decl_static_fn_stmt_r0','parser.py',689),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r1','parser.py',694),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',8,'p_decl_static_fn_stmt_r2','parser.py',699),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',10,'p_decl_static_fn_stmt_r3','parser.py',704),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_r4','parser.py',709),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',6,'p_decl_static_fn_stmt_r5','parser.py',714),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r6','parser.py',719),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',9,'p_decl_static_fn_stmt_r7','parser.py',724),
  ('static_fn_id -> ID','static_fn_id',1,'p_static_fn_id_r0','parser.py',729),
  ('print_stmt -> PRINTINFO to_print S_COLON','print_stmt',3,'p_print_stmt_r0','parser.py',734),
  ('generate_stmt -> GENERATE to_print S_COLON','generate_stmt',3,'p_generate_stmt_r0','parser.py',739),
  ('to_print -> ID','to_print',1,'p_to_print_r0','parser.py',744),
  ('to_print -> boolean_expr','to_print',1,'p_to_print_r1','parser.py',749),
  ('to_print -> unnamed_pred','to_print',1,'p_to_print_r2','parser.py',754),
  ('boolean_expr -> boolean_expr OR boolean_expr_a','boolean_expr',3,'p_boolean_expr_r0','parser.py',759),
  ('boolean_expr -> boolean_expr_a','boolean_expr',1,'p_boolean_expr_r1','parser.py',764),
  ('boolean_expr_a -> boolean_expr_a XOR boolean_expr_b','boolean_expr_a',3,'p_boolean_expr_a_r0','parser.py',769),
  ('boolean_expr_a -> boolean_expr_b','boolean_expr_a',1,'p_boolean_expr_a_r1','parser.py',774),
  ('boolean_expr_b -> boolean_expr_b AND boolean_expr_c','boolean_expr_b',3,'p_boolean_expr_b_r0','parser.py',779),
  ('boolean_expr_b -> boolean_expr_c','boolean_expr_b',1,'p_boolean_expr_b_r1','parser.py',784),
  ('boolean_expr_c -> boolean_expr_c EQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r0','parser.py',789),
  ('boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r1','parser.py',794),
  ('boolean_expr_c -> boolean_expr_d','boolean_expr_c',1,'p_boolean_expr_c_r2','parser.py',799),
  ('boolean_expr_d -> NOT boolean_expr_e','boolean_expr_d',2,'p_boolean_expr_d_r0','parser.py',804),
  ('boolean_expr_d -> boolean_expr_e','boolean_expr_d',1,'p_boolean_expr_d_r1','parser.py',809),
  ('boolean_expr_e -> atomic_boolean_expr','boolean_expr_e',1,'p_boolean_expr_e_r0','parser.py',814),
  ('boolean_expr_e -> LP1 boolean_expr RP1','boolean_expr_e',3,'p_boolean_expr_e_r1','parser.py',819),
  ('atomic_boolean_expr -> constants','atomic_boolean_expr',1,'p_atomic_boolean_expr_r0','parser.py',824),
  ('atomic_boolean_expr -> unary_pred LP1 args RP1','atomic_boolean_expr',4,'p_atomic_boolean_expr_r1','parser.py',829),
  ('atomic_boolean_expr -> unary_pred IMPLIES unary_pred','atomic_boolean_expr',3,'p_atomic_boolean_expr_r2','parser.py',834),
  ('atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r3','parser.py',839),
  ('atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r4','parser.py',844),
  ('constants -> TRUE','constants',1,'p_constants_r0','parser.py',849),
  ('constants -> FALSE','constants',1,'p_constants_r1','parser.py',854),
  ('args -> args COMMA pred_expr','args',3,'p_args_r0','parser.py',859),
  ('args -> pred_expr','args',1,'p_args_r1','parser.py',864),
  ('assign_stmt -> names ASSIGN assign_expr S_COLON','assign_stmt',4,'p_assign_stmt_r0','parser.py',869),
  ('names -> names COMMA name','names',3,'p_names_r0','parser.py',874),
  ('names -> name','names',1,'p_names_r1','parser.py',879),
  ('name -> ID','name',1,'p_name_r0','parser.py',884),
  ('assign_expr -> names ASSIGN assign_expr','assign_expr',3,'p_assign_expr_r0','parser.py',889),
  ('assign_expr -> names','assign_expr',1,'p_assign_expr_r1','parser.py',894),
  ('trait_decl -> TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',8,'p_trait_decl_err0','parser.py',902),
  ('trait_decl -> TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON','trait_decl',9,'p_trait_decl_err1','parser.py',907),
  ('trait_decl -> TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_err4','parser.py',912),
  ('trait_decl -> TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_err5','parser.py',917),
  ('decl_fn_stmt -> fn_id error RP1 S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err0','parser.py',923),
  ('decl_fn_stmt -> fn_id LP1 error S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err1','parser.py',928),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err2','parser.py',933),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err3','parser.py',938),
  ('decl_fn_stmt -> fn_id error RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err4','parser.py',943),
  ('decl_fn_stmt -> fn_id LP3 error LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err5','parser.py',948),
  ('decl_stmt -> error RP3 S_COLON','decl_stmt',3,'p_decl_stmt_err0','parser.py',985),
  ('decl_stmt -> error RP3 COLON unary_pred S_COLON','decl_stmt',5,'p_decl_stmt_err1','parser.py',990),
  ('decl_stmt -> LP3 error S_COLON','decl_stmt',3,'p_decl_stmt_err2','parser.py',995),
  ('decl_static_fn_stmt -> static_fn_id error RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err0','parser.py',1001),
  ('decl_static_fn_stmt -> static_fn_id LP1 error S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err1','parser.py',1006),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err2','parser.py',1011),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err3','parser.py',1016),
  ('decl_static_fn_stmt -> static_fn_id error RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err4','parser.py',1021),
  ('decl_static_fn_stmt -> static_fn_id LP3 error LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err5','parser.py',1026),
  ('boolean_expr -> error boolean_expr_e','boolean_expr',2,'p_error_boolean_0','parser.py',1032),
  ('boolean_expr -> boolean_expr OR error','boolean_expr',3,'p_error_boolean_0','parser.py',1033),
  ('boolean_expr_a -> boolean_expr_a XOR error','boolean_expr_a',3,'p_error_boolean_0','parser.py',1034),
  ('boolean_expr_b -> boolean_expr_b AND error','boolean_expr_b',3,'p_error_boolean_0','parser.py',1035),
  ('boolean_expr_c -> boolean_expr_c EQ error','boolean_expr_c',3,'p_error_boolean_0','parser.py',1036),
  ('boolean_expr_c -> boolean_expr_c NEQ error','boolean_expr_c',3,'p_error_boolean_0','parser.py',1037),
  ('boolean_expr_d -> NOT error','boolean_expr_d',2,'p_error_boolean_0','parser.py',1038),
  ('boolean_expr_e -> LP1 error RP1','boolean_expr_e',3,'p_error_boolean_0','parser.py',1039),
  ('atomic_boolean_expr -> error LP1 args RP1','atomic_boolean_expr',4,'p_error_atomic_boolean_0','parser.py',1046),
  ('atomic_boolean_expr -> error IMPLIES unary_pred','atomic_boolean_expr',3,'p_error_atomic_boolean_0','parser.py',1047),
  ('atomic_boolean_expr -> unary_pred error unary_pred','atomic_boolean_expr',3,'p_error_atomic_boolean_1','parser.py',1054),
  ('print_stmt -> PRINTINFO error S_COLON','print_stmt',3,'p_error_print_stmt_0','parser.py',1061),
  ('generate_stmt -> GENERATE error S_COLON','generate_stmt',3,'p_error_print_stmt_0','parser.py',1062),
  ('vars_id -> error COMMA var_id','vars_id',3,'p_error_args_0','parser.py',1069),
  ('vars_id -> vars_id COMMA error','vars_id',3,'p_error_args_0','parser.py',1070),
  ('type_var_args -> error COMMA type_var_arg','type_var_args',3,'p_error_args_0','parser.py',1071),
  ('type_var_args -> type_var_args COMMA error','type_var_args',3,'p_error_args_0','parser.py',1072),
  ('next_anonymous_necessary_preds -> error COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_error_args_0','parser.py',1073),
  ('next_anonymous_opt_preds -> error COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_error_args_0','parser.py',1074),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA error','next_anonymous_opt_preds',3,'p_error_args_0','parser.py',1075),
  ('next_named_preds -> error COMMA next_named_pred','next_named_preds',3,'p_error_args_0','parser.py',1076),
  ('next_named_preds -> next_named_preds COMMA error','next_named_preds',3,'p_error_args_0','parser.py',1077),
  ('pred_args -> error COMMA next_preds','pred_args',3,'p_error_args_0','parser.py',1079),
  ('necessary_args -> error COMMA necessary_arg','necessary_args',3,'p_error_args_0','parser.py',1080),
  ('optional_args -> error COMMA optional_arg','optional_args',3,'p_error_args_0','parser.py',1081),
  ('optional_args -> optional_args COMMA error','optional_args',3,'p_error_args_0','parser.py',1082),
  ('next_named_necessary_pred -> name ASSIGN error unary_pred','next_named_necessary_pred',4,'p_error_args_1','parser.py',1089),
  ('next_named_opt_pred -> name ASSIGN COLON error unary_pred','next_named_opt_pred',5,'p_error_args_2','parser.py',1096),
  ('pred_expr -> error AND pred_expr_c','pred_expr',3,'p_error_pred_expr_0','parser.py',1103),
  ('pred_expr -> pred_expr OR error','pred_expr',3,'p_error_pred_expr_0','parser.py',1104),
  ('assign_stmt -> names ASSIGN error S_COLON','assign_stmt',4,'p_assign_expr_err0','parser.py',1111),
  ('decl_fn_stmt -> fn_id LP1 RP1 error S_COLON','decl_fn_stmt',5,'p_error_no_args_in_p1_0','parser.py',1118),
  ('decl_fn_stmt -> fn_id LP1 RP1 error R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_error_no_args_in_p1_0','parser.py',1119),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON','decl_fn_stmt',8,'p_error_no_args_in_p1_0','parser.py',1120),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_error_no_args_in_p1_0','parser.py',1121),
  ('decl_cls_fn_stmt -> fn_id LP1 RP1 error S_COLON','decl_cls_fn_stmt',5,'p_error_no_args_in_p1_1','parser.py',1128),
  ('decl_cls_fn_stmt -> fn_id LP1 RP1 error R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_error_no_args_in_p1_1','parser.py',1129),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON','decl_cls_fn_stmt',8,'p_error_no_args_in_p1_1','parser.py',1130),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_error_no_args_in_p1_1','parser.py',1131),
  ('decl_static_fn_stmt -> static_fn_id LP3 RP3 error S_COLON','decl_static_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1138),
  ('decl_fn_stmt -> fn_id LP3 RP3 error S_COLON','decl_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1139),
  ('decl_cls_fn_stmt -> fn_id LP3 RP3 error S_COLON','decl_cls_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1140),
  ('decl_fn_stmt -> error S_COLON','decl_fn_stmt',2,'p_error_no_name_0','parser.py',1147),
  ('decl_cls_fn_stmt -> error S_COLON','decl_cls_fn_stmt',2,'p_error_no_name_0','parser.py',1148),
  ('decl_static_fn_stmt -> error S_COLON','decl_static_fn_stmt',2,'p_error_no_name_0','parser.py',1149),
  ('decl_stmt -> error S_COLON','decl_stmt',2,'p_error_no_name_0','parser.py',1150),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW error S_COLON','decl_fn_stmt',7,'p_error_decl_stmt_0','parser.py',1157),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON','decl_fn_stmt',10,'p_error_decl_stmt_0','parser.py',1158),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW error S_COLON','decl_cls_fn_stmt',7,'p_error_decl_stmt_0','parser.py',1159),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON','decl_cls_fn_stmt',10,'p_error_decl_stmt_0','parser.py',1160),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW error S_COLON','decl_static_fn_stmt',7,'p_error_decl_stmt_0','parser.py',1161),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW error S_COLON','decl_static_fn_stmt',10,'p_error_decl_stmt_0','parser.py',1162),
  ('decl_stmt -> var_id COLON error S_COLON','decl_stmt',4,'p_error_decl_stmt_1','parser.py',1169),
  ('decl_stmt -> LP3 vars_id RP3 COLON error S_COLON','decl_stmt',6,'p_error_decl_stmt_1','parser.py',1170),
  ('trait_decl_stmt -> FN COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1177),
  ('trait_decl_stmt -> CLS_FN COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1178),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1179),
  ('trait_decl_stmt -> VAR COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1180),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1181),
]

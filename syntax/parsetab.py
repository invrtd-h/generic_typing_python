
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CLS_FN CLS_VAR COLON COMMA DOT EQ EXTENDS FALSE FN GENERATE ID IMPLIES LP1 LP2 LP3 NEQ NONE NOT OR PASS PRINTINFO PROGRAM_BEGIN PROGRAM_END RP1 RP2 RP3 R_ARROW STAR STATIC_FN S_COLON TRAIT TRAIT_OF TRUE VAR WS XOR program : PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON  program : WS  stmts : stmts stmt  stmts : stmt  stmt : trait_decl  stmt : print_stmt  stmt : generate_stmt  stmt : assign_stmt  stmt : S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_id : ID  class_args : main_arg COMMA sub_args  class_args : main_arg  main_arg : ID  sub_args : necessary_args COMMA optional_args sub_args : necessary_args  sub_args : optional_args  necessary_args : necessary_args COMMA necessary_arg  necessary_args : necessary_arg  necessary_arg : ID  optional_args : optional_args COMMA optional_arg  optional_args : optional_arg  optional_arg : ID ASSIGN unary_pred trait_decl_stmts : trait_decl_stmts trait_decl_stmt  trait_decl_stmts : trait_decl_stmt  trait_decl_stmts : PASS S_COLON  trait_decl_stmt : FN COLON LP2 decl_fn_stmts RP2 S_COLON  trait_decl_stmt : VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON  trait_decl_stmt : CLS_VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON  decl_fn_stmts : decl_fn_stmts decl_fn_stmt  decl_fn_stmts : decl_fn_stmt  decl_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmts : decl_cls_fn_stmts decl_cls_fn_stmt  decl_cls_fn_stmts : decl_cls_fn_stmt  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  fn_id : ID  pred_args : main_pred COMMA next_preds  pred_args : main_pred  main_pred : ID  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds next_preds : next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA STAR  next_preds : next_anonymous_necessary_preds  next_preds : next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_opt_preds  next_preds : STAR COMMA next_named_preds  next_preds : STAR  next_anonymous_necessary_preds : next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred  next_anonymous_necessary_preds : next_anonymous_necessary_pred  next_anonymous_necessary_pred : unary_pred  next_anonymous_opt_preds : next_anonymous_opt_preds COMMA next_anonymous_opt_pred  next_anonymous_opt_preds : next_anonymous_opt_pred  next_anonymous_opt_pred : ASSIGN unary_pred  next_named_preds : next_named_preds COMMA next_named_pred  next_named_preds : next_named_pred  next_named_pred : next_named_necessary_pred  next_named_pred : next_named_opt_pred  next_named_necessary_pred : arg_name COLON unary_pred  next_named_opt_pred : arg_name COLON ASSIGN unary_pred  arg_name : ID  type_var_args : type_var_args COMMA type_var_arg  type_var_args : type_var_arg  type_var_arg : type_var_id  type_var_arg : type_var_id COLON unary_pred  type_var_id : ID  unary_pred : pred_name  unary_pred : unnamed_pred  unnamed_pred : pred_name LP3 args RP3  unnamed_pred : LP3 pred_expr RP3  unnamed_pred : TRAIT_OF LP1 var_expr RP1  unnamed_pred : NONE  pred_name : ID  pred_expr : pred_expr OR pred_expr_a  pred_expr : pred_expr_a  pred_expr_a : pred_expr_a AND pred_expr_b  pred_expr_a : pred_expr_b  pred_expr_b : NOT pred_expr_c  pred_expr_b : pred_expr_c  pred_expr_c : unary_pred  pred_expr_c : LP1 pred_expr RP1  var_expr : unary_pred DOT member_var_name  member_var_name : ID  decl_stmts : decl_stmts decl_stmt  decl_stmts : decl_stmt  decl_stmt : var_id S_COLON  decl_stmt : var_id COLON unary_pred S_COLON  decl_stmt : LP3 vars_id RP3 S_COLON  decl_stmt : LP3 vars_id RP3 COLON unary_pred S_COLON  vars_id : vars_id COMMA var_id  vars_id : var_id  var_id : ID  decl_static_fn_stmts : decl_static_fn_stmts decl_static_fn_stmt  decl_static_fn_stmts : decl_static_fn_stmt  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON  static_fn_id : ID  print_stmt : PRINTINFO to_print S_COLON  generate_stmt : GENERATE to_print S_COLON  to_print : ID  to_print : boolean_expr  to_print : unnamed_pred  boolean_expr : boolean_expr OR boolean_expr_a  boolean_expr : boolean_expr_a  boolean_expr_a : boolean_expr_a XOR boolean_expr_b  boolean_expr_a : boolean_expr_b  boolean_expr_b : boolean_expr_b AND boolean_expr_c  boolean_expr_b : boolean_expr_c  boolean_expr_c : boolean_expr_c EQ boolean_expr_d  boolean_expr_c : boolean_expr_c NEQ boolean_expr_d  boolean_expr_c : boolean_expr_d  boolean_expr_d : NOT boolean_expr_e  boolean_expr_d : boolean_expr_e  boolean_expr_e : atomic_boolean_expr  boolean_expr_e : LP1 boolean_expr RP1  atomic_boolean_expr : constants  atomic_boolean_expr : unary_pred LP1 args RP1  atomic_boolean_expr : unary_pred IMPLIES unary_pred  atomic_boolean_expr : LP1 unary_pred EQ unary_pred RP1  atomic_boolean_expr : LP1 unary_pred NEQ unary_pred RP1  constants : TRUE  constants : FALSE  args : args COMMA arg  args : arg  arg : ID  assign_stmt : names ASSIGN assign_expr S_COLON  names : names COMMA name  names : name  name : ID  assign_expr : names ASSIGN assign_expr  assign_expr : names  trait_decl_stmt : error S_COLON  trait_decl_stmt : error LP2 error RP2 S_COLON assign_stmt : names assign_expr S_COLON  trait_decl : TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 error S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 LP2 trait_decl_stmts error S_COLON  trait_decl : TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON error S_COLON  trait_decl_stmt : FN COLON error RP2 S_COLON  trait_decl_stmt : FN COLON LP2 error S_COLON  trait_decl_stmt : VAR COLON error RP2 S_COLON  trait_decl_stmt : VAR COLON LP2 error S_COLON  trait_decl_stmt : CLS_FN COLON error RP2 S_COLON  trait_decl_stmt : CLS_FN COLON LP2 error S_COLON  trait_decl_stmt : CLS_VAR COLON error RP2 S_COLON  trait_decl_stmt : CLS_VAR COLON LP2 error S_COLON  trait_decl_stmt : STATIC_FN COLON error RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON LP2 error S_COLON  decl_fn_stmt : fn_id error RP1 S_COLON  decl_fn_stmt : fn_id LP1 error S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_fn_stmt : fn_id error RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 error LP1 pred_args RP1 S_COLON  unnamed_pred : pred_name error RP3  decl_stmt :  error RP3 S_COLON  decl_stmt :  error RP3 COLON unary_pred S_COLON  decl_stmt :  LP3 error S_COLON  decl_static_fn_stmt : static_fn_id error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 error S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_static_fn_stmt : static_fn_id error RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 error LP1 next_preds RP1 S_COLON '
    
_lr_action_items = {'PROGRAM_BEGIN':([0,],[2,]),'WS':([0,],[3,]),'$end':([1,3,47,],[0,-2,-1,]),'S_COLON':([2,4,5,6,7,8,9,10,11,16,17,18,19,22,23,24,25,26,31,32,33,34,36,37,38,40,41,42,43,45,50,62,63,64,71,74,76,77,78,84,85,89,90,97,100,101,102,104,105,106,112,117,121,125,134,137,147,148,150,153,161,171,172,174,182,194,195,197,199,201,205,207,209,211,212,214,217,219,220,222,226,227,228,232,239,243,247,250,256,259,266,267,268,271,279,284,285,294,296,305,307,308,309,318,323,325,347,353,369,371,372,373,374,376,378,386,387,388,389,390,392,398,406,421,422,423,425,],[4,5,-9,5,-4,-5,-6,-7,-8,-145,-146,47,-3,50,-117,-118,-119,-121,-83,-123,-125,-128,-130,-131,-133,-138,-139,74,-148,77,-115,-78,-79,-84,-129,-116,106,-151,-144,-120,-122,-175,-81,-132,-124,-126,-127,-135,-147,-143,-80,-82,-134,153,159,163,-136,-137,171,-154,182,-158,195,197,-152,228,-155,-153,231,234,238,242,244,-103,249,252,255,257,258,261,265,266,-10,269,281,282,287,288,291,292,-156,307,308,310,316,319,320,326,328,335,-11,-157,337,346,348,351,375,379,391,393,394,395,396,397,399,407,409,410,411,412,413,415,419,426,427,428,429,]),'TRAIT':([4,5,6,7,8,9,10,11,19,50,74,77,106,153,171,182,195,197,228,266,307,308,],[12,-9,12,-4,-5,-6,-7,-8,-3,-115,-116,-151,-143,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'PRINTINFO':([4,5,6,7,8,9,10,11,19,50,74,77,106,153,171,182,195,197,228,266,307,308,],[13,-9,13,-4,-5,-6,-7,-8,-3,-115,-116,-151,-143,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'GENERATE':([4,5,6,7,8,9,10,11,19,50,74,77,106,153,171,182,195,197,228,266,307,308,],[14,-9,14,-4,-5,-6,-7,-8,-3,-115,-116,-151,-143,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,28,30,35,44,46,48,50,51,52,53,58,61,65,68,69,70,72,73,74,75,77,78,83,91,92,98,99,106,109,113,118,124,127,153,156,157,158,171,182,183,185,187,189,191,195,197,200,202,206,208,210,213,215,218,221,223,228,233,235,236,240,244,245,251,253,254,260,262,263,266,282,283,286,287,302,307,308,310,311,313,314,315,316,317,319,320,321,326,327,328,329,331,334,335,336,337,338,340,346,348,349,350,351,352,365,375,379,381,382,383,384,391,393,394,395,396,397,399,405,407,408,409,410,411,412,413,414,415,416,417,419,420,426,427,428,429,],[17,-9,17,-4,-5,-6,-7,-8,21,23,23,17,-145,-146,-3,64,64,64,17,17,81,-115,64,64,88,64,64,64,64,64,64,88,64,-116,17,-151,-144,64,64,64,64,64,-143,133,88,146,64,64,-154,133,179,64,-158,-152,204,211,204,211,225,-155,-153,204,-34,211,-96,211,204,-40,211,225,-105,-10,-33,273,278,-95,-97,64,-39,273,278,-104,64,278,-156,-176,64,211,-178,64,-11,-157,-170,64,278,273,64,-169,273,-98,-99,64,-110,64,-180,64,364,64,-179,64,-35,64,273,-177,-41,64,273,-106,64,64,-100,-111,364,364,364,64,-36,-172,-171,-174,-173,-42,-107,64,-112,64,-182,-181,-184,-183,-37,64,-43,64,364,-108,64,-113,-38,-44,-109,]),'PROGRAM_END':([5,6,7,8,9,10,11,19,50,74,77,106,153,171,182,195,197,228,266,307,308,],[-9,18,-4,-5,-6,-7,-8,-3,-115,-116,-151,-143,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'LP3':([13,14,23,27,28,30,35,51,52,58,61,62,64,65,68,69,70,73,83,91,92,98,99,124,127,158,185,189,203,204,206,208,216,218,224,225,240,244,245,262,282,283,287,302,311,315,319,320,321,327,329,334,336,338,346,349,352,365,375,384,405,408,414,416,420,],[28,28,-84,53,28,28,28,28,28,28,28,53,-84,28,28,28,28,28,28,28,28,28,28,28,28,28,210,210,236,-45,210,-96,254,210,263,-114,-95,-97,28,28,-176,28,-178,28,28,28,-98,-99,28,28,28,28,28,28,-177,28,28,28,-100,28,28,28,28,28,28,]),'TRAIT_OF':([13,14,28,30,35,51,52,58,61,65,68,69,70,73,83,91,92,98,99,124,127,158,245,262,283,302,311,315,321,327,329,334,336,338,349,352,365,384,405,408,414,416,420,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'NONE':([13,14,28,30,35,51,52,58,61,65,68,69,70,73,83,91,92,98,99,124,127,158,245,262,283,302,311,315,321,327,329,334,336,338,349,352,365,384,405,408,414,416,420,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NOT':([13,14,28,30,51,52,61,68,69,70,91,92,],[35,35,58,35,35,35,58,35,35,35,58,58,]),'LP1':([13,14,20,21,23,25,27,28,29,30,31,35,39,51,52,58,61,62,63,64,67,68,69,70,89,90,91,92,112,117,203,204,216,224,225,275,280,304,306,312,324,333,],[30,30,48,-12,-84,-79,-78,61,65,30,-83,30,72,30,30,61,61,-78,-79,-84,72,30,30,30,-175,-81,61,61,-80,-82,235,-45,253,262,-114,314,317,334,336,340,350,365,]),'TRUE':([13,14,30,35,51,52,68,69,70,],[40,40,40,40,40,40,40,40,40,]),'FALSE':([13,14,30,35,51,52,68,69,70,],[41,41,41,41,41,41,41,41,41,]),'ASSIGN':([15,16,17,43,78,133,179,262,311,329,330,334,336,365,380,384,],[44,-145,-146,75,-144,158,158,302,302,302,302,302,302,302,302,405,]),'COMMA':([15,16,17,31,43,62,63,64,78,80,81,86,87,88,89,90,103,112,117,129,130,131,132,133,144,176,177,178,180,211,246,248,272,273,274,276,277,278,290,295,297,298,299,300,301,303,322,332,342,344,354,355,356,357,358,359,360,361,362,400,401,402,403,404,418,424,],[46,-145,-146,-83,46,-78,-79,-84,-144,109,-15,113,-141,-142,-175,-81,113,-80,-82,156,157,-20,-23,-21,-140,157,-19,-22,-24,-103,286,-102,311,-48,313,-74,-75,-77,313,-62,329,330,331,-61,-64,313,-101,-65,-73,-76,380,381,-60,382,-63,383,-67,-68,-69,417,383,383,-66,-70,-71,383,]),'error':([20,21,23,27,31,62,63,64,79,80,81,89,90,107,110,112,117,122,123,126,128,129,130,131,132,133,135,136,149,151,154,159,160,162,163,164,165,166,167,168,169,170,176,177,178,180,183,185,187,189,191,193,195,196,198,203,204,206,208,210,218,224,225,229,230,231,234,235,236,238,240,242,244,249,252,255,257,258,261,262,263,265,269,281,282,287,288,291,292,312,319,320,333,340,346,365,375,],[49,-12,-84,54,-83,54,-79,-84,108,-14,-15,-175,-81,125,134,-80,-82,150,134,134,-13,-17,-18,-20,-23,-21,134,-26,134,172,134,-149,181,-25,-27,184,186,188,190,192,134,134,-16,-19,-22,-24,201,207,214,219,222,134,-149,134,134,237,-45,241,-96,247,241,264,-114,134,134,-150,-160,271,275,-159,-95,-162,-97,-161,-164,-163,-166,-165,-168,296,304,-167,-28,-29,-176,-178,-30,-31,-32,341,-98,-99,366,371,-177,387,-100,]),'IMPLIES':([23,25,27,31,39,62,63,64,67,89,90,112,117,],[-84,-79,-78,-83,73,-78,-79,-84,73,-175,-81,-80,-82,]),'OR':([24,26,31,32,33,34,36,37,38,40,41,55,56,57,59,60,62,63,64,66,71,84,85,89,90,93,94,97,100,101,102,104,112,114,115,116,117,121,147,148,],[51,-121,-83,-123,-125,-128,-130,-131,-133,-138,-139,91,-86,-88,-90,-91,-78,-79,-84,51,-129,-120,-122,-175,-81,-89,91,-132,-124,-126,-127,-135,-80,-85,-87,-92,-82,-134,-136,-137,]),'RP1':([26,31,32,33,34,36,37,38,40,41,56,57,59,60,62,63,64,66,71,79,80,81,84,85,87,88,89,90,93,94,95,97,100,101,102,103,104,112,114,115,116,117,119,120,121,128,129,130,131,132,133,144,145,146,147,148,176,177,178,180,237,262,264,270,272,273,289,293,295,297,298,299,300,301,332,339,341,343,345,354,355,356,357,358,359,360,361,362,365,366,367,368,370,377,385,400,401,402,403,404,418,424,],[-121,-83,-123,-125,-128,-130,-131,-133,-138,-139,-86,-88,-90,-91,-78,-79,-84,97,-129,107,-14,-15,-120,-122,-141,-142,-175,-81,-89,116,117,-132,-124,-126,-127,121,-135,-80,-85,-87,-92,-82,147,148,-134,-13,-17,-18,-20,-23,-21,-140,-93,-94,-136,-137,-16,-19,-22,-24,279,294,305,309,-47,-48,323,325,-62,-54,-57,-59,-61,-64,-65,-46,372,373,374,-51,-53,-60,-56,-63,-58,-67,-68,-69,386,388,389,390,392,398,406,-50,-52,-55,-66,-70,-71,-49,]),'XOR':([26,31,32,33,34,36,37,38,40,41,62,63,64,71,84,85,89,90,97,100,101,102,104,112,117,121,147,148,],[52,-83,-123,-125,-128,-130,-131,-133,-138,-139,-78,-79,-84,-129,52,-122,-175,-81,-132,-124,-126,-127,-135,-80,-82,-134,-136,-137,]),'AND':([31,32,33,34,36,37,38,40,41,56,57,59,60,62,63,64,71,85,89,90,93,97,100,101,102,104,112,114,115,116,117,121,147,148,],[-83,68,-125,-128,-130,-131,-133,-138,-139,92,-88,-90,-91,-78,-79,-84,-129,68,-175,-81,-89,-132,-124,-126,-127,-135,-80,92,-87,-92,-82,-134,-136,-137,]),'RP3':([31,54,55,56,57,59,60,62,63,64,86,87,88,89,90,93,112,114,115,116,117,144,207,211,219,237,241,246,248,264,274,276,277,278,290,303,322,342,344,],[-83,89,90,-86,-88,-90,-91,-78,-79,-84,112,-141,-142,-175,-81,-89,-80,-85,-87,-92,-82,-140,243,-103,243,280,243,285,-102,306,312,-74,-75,-77,324,333,-101,-73,-76,]),'EQ':([31,33,34,36,37,38,40,41,62,63,64,67,71,89,90,97,100,101,102,104,112,117,121,147,148,],[-83,69,-128,-130,-131,-133,-138,-139,-78,-79,-84,98,-129,-175,-81,-132,69,-126,-127,-135,-80,-82,-134,-136,-137,]),'NEQ':([31,33,34,36,37,38,40,41,62,63,64,67,71,89,90,97,100,101,102,104,112,117,121,147,148,],[-83,70,-128,-130,-131,-133,-138,-139,-78,-79,-84,99,-129,-175,-81,-132,70,-126,-127,-135,-80,-82,-134,-136,-137,]),'DOT':([31,62,63,64,89,90,96,112,117,],[-83,-78,-79,-84,-175,-81,118,-80,-82,]),'COLON':([31,49,62,63,64,89,90,107,111,112,117,138,139,140,141,142,152,155,209,211,243,277,278,285,363,364,],[-83,82,-78,-79,-84,-175,-81,122,143,-80,-82,164,165,166,167,168,173,175,245,-103,283,315,-77,321,384,-72,]),'EXTENDS':([49,107,108,],[83,124,127,]),'LP2':([82,107,108,122,134,143,164,165,166,167,168,172,173,175,],[110,123,126,149,160,169,183,185,187,189,191,160,196,198,]),'PASS':([110,123,126,149,169,196,198,],[137,137,137,137,137,137,137,]),'FN':([110,123,126,135,136,149,151,154,159,162,163,169,170,193,195,196,198,229,230,231,234,238,242,249,252,255,257,258,261,265,269,281,288,291,292,],[138,138,138,138,-26,138,138,138,-149,-25,-27,138,138,138,-149,138,138,138,138,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'VAR':([110,123,126,135,136,149,151,154,159,162,163,169,170,193,195,196,198,229,230,231,234,238,242,249,252,255,257,258,261,265,269,281,288,291,292,],[139,139,139,139,-26,139,139,139,-149,-25,-27,139,139,139,-149,139,139,139,139,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'CLS_FN':([110,123,126,135,136,149,151,154,159,162,163,169,170,193,195,196,198,229,230,231,234,238,242,249,252,255,257,258,261,265,269,281,288,291,292,],[140,140,140,140,-26,140,140,140,-149,-25,-27,140,140,140,-149,140,140,140,140,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'CLS_VAR':([110,123,126,135,136,149,151,154,159,162,163,169,170,193,195,196,198,229,230,231,234,238,242,249,252,255,257,258,261,265,269,281,288,291,292,],[141,141,141,141,-26,141,141,141,-149,-25,-27,141,141,141,-149,141,141,141,141,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'STATIC_FN':([110,123,126,135,136,149,151,154,159,162,163,169,170,193,195,196,198,229,230,231,234,238,242,249,252,255,257,258,261,265,269,281,288,291,292,],[142,142,142,142,-26,142,142,142,-149,-25,-27,142,142,142,-149,142,142,142,142,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'RP2':([135,136,154,159,162,163,170,181,184,186,188,190,192,193,200,202,206,208,213,215,218,221,223,229,230,231,233,234,238,240,242,244,249,251,252,255,257,258,260,261,265,269,281,282,287,288,291,292,310,316,319,320,326,328,335,337,346,348,351,375,379,391,393,394,395,396,397,399,407,409,410,411,412,413,415,419,426,427,428,429,],[161,-26,174,-149,-25,-27,194,199,205,212,217,220,226,227,232,-34,239,-96,250,-40,256,259,-105,267,268,-150,-33,-160,-159,-95,-162,-97,-161,-39,-164,-163,-166,-165,-104,-168,-167,-28,-29,-176,-178,-30,-31,-32,-170,-169,-98,-99,-110,-180,-179,-35,-177,-41,-106,-100,-111,-36,-172,-171,-174,-173,-42,-107,-112,-182,-181,-184,-183,-37,-43,-108,-113,-38,-44,-109,]),'STAR':([262,311,329,330,334,336,365,380,],[299,299,355,357,299,299,299,400,]),'R_ARROW':([294,309,323,325,386,392,398,406,],[327,338,349,352,408,414,416,420,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([4,],[6,]),'stmt':([4,6,],[7,19,]),'trait_decl':([4,6,],[8,8,]),'print_stmt':([4,6,],[9,9,]),'generate_stmt':([4,6,],[10,10,]),'assign_stmt':([4,6,],[11,11,]),'names':([4,6,15,44,75,],[15,15,43,43,43,]),'name':([4,6,15,44,46,75,],[16,16,16,16,78,16,]),'trait_id':([12,],[20,]),'to_print':([13,14,],[22,42,]),'boolean_expr':([13,14,30,],[24,24,66,]),'unnamed_pred':([13,14,28,30,35,51,52,58,61,65,68,69,70,73,83,91,92,98,99,124,127,158,245,262,283,302,311,315,321,327,329,334,336,338,349,352,365,384,405,408,414,416,420,],[25,25,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'boolean_expr_a':([13,14,30,51,],[26,26,26,84,]),'pred_name':([13,14,28,30,35,51,52,58,61,65,68,69,70,73,83,91,92,98,99,124,127,158,245,262,283,302,311,315,321,327,329,334,336,338,349,352,365,384,405,408,414,416,420,],[27,27,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'boolean_expr_b':([13,14,30,51,52,],[32,32,32,32,85,]),'boolean_expr_c':([13,14,30,51,52,68,],[33,33,33,33,33,100,]),'boolean_expr_d':([13,14,30,51,52,68,69,70,],[34,34,34,34,34,34,101,102,]),'boolean_expr_e':([13,14,30,35,51,52,68,69,70,],[36,36,36,71,36,36,36,36,36,]),'atomic_boolean_expr':([13,14,30,35,51,52,68,69,70,],[37,37,37,37,37,37,37,37,37,]),'constants':([13,14,30,35,51,52,68,69,70,],[38,38,38,38,38,38,38,38,38,]),'unary_pred':([13,14,28,30,35,51,52,58,61,65,68,69,70,73,83,91,92,98,99,124,127,158,245,262,283,302,311,315,321,327,329,334,336,338,349,352,365,384,405,408,414,416,420,],[39,39,60,67,39,39,39,60,60,96,39,39,39,104,111,60,60,119,120,152,155,180,284,295,318,332,295,344,347,353,295,295,295,369,376,378,295,404,418,421,422,423,425,]),'assign_expr':([15,44,75,],[45,76,105,]),'pred_expr':([28,61,],[55,94,]),'pred_expr_a':([28,61,91,],[56,56,114,]),'pred_expr_b':([28,61,91,92,],[57,57,57,115,]),'pred_expr_c':([28,58,61,91,92,],[59,93,59,59,59,]),'class_args':([48,],[79,]),'main_arg':([48,],[80,]),'args':([53,72,],[86,103,]),'arg':([53,72,113,],[87,87,144,]),'var_expr':([65,],[95,]),'sub_args':([109,],[128,]),'necessary_args':([109,],[129,]),'optional_args':([109,156,],[130,176,]),'necessary_arg':([109,156,],[131,177,]),'optional_arg':([109,156,157,],[132,132,178,]),'trait_decl_stmts':([110,123,126,149,169,196,198,],[135,151,154,170,193,229,230,]),'trait_decl_stmt':([110,123,126,135,149,151,154,169,170,193,196,198,229,230,],[136,136,136,162,136,162,162,136,162,162,136,136,162,162,]),'member_var_name':([118,],[145,]),'decl_fn_stmts':([183,],[200,]),'decl_fn_stmt':([183,200,],[202,233,]),'fn_id':([183,187,200,213,],[203,216,203,216,]),'decl_stmts':([185,189,],[206,218,]),'decl_stmt':([185,189,206,218,],[208,208,240,240,]),'var_id':([185,189,206,210,218,286,],[209,209,209,248,209,322,]),'decl_cls_fn_stmts':([187,],[213,]),'decl_cls_fn_stmt':([187,213,],[215,251,]),'decl_static_fn_stmts':([191,],[221,]),'decl_static_fn_stmt':([191,221,],[223,260,]),'static_fn_id':([191,221,],[224,224,]),'vars_id':([210,],[246,]),'pred_args':([235,253,314,317,340,350,],[270,289,343,345,370,377,]),'main_pred':([235,253,314,317,340,350,],[272,272,272,272,272,272,]),'type_var_args':([236,254,263,],[274,290,303,]),'type_var_arg':([236,254,263,313,],[276,276,276,342,]),'type_var_id':([236,254,263,313,],[277,277,277,277,]),'next_preds':([262,311,334,336,365,],[293,339,367,368,385,]),'next_anonymous_necessary_preds':([262,311,334,336,365,],[297,297,297,297,297,]),'next_anonymous_opt_preds':([262,311,329,334,336,365,],[298,298,354,298,298,298,]),'next_anonymous_necessary_pred':([262,311,329,334,336,365,],[300,300,356,300,300,300,]),'next_anonymous_opt_pred':([262,311,329,330,334,336,365,380,],[301,301,301,358,301,301,301,358,]),'next_named_preds':([331,381,382,417,],[359,401,402,424,]),'next_named_pred':([331,381,382,383,417,],[360,360,360,403,360,]),'next_named_necessary_pred':([331,381,382,383,417,],[361,361,361,361,361,]),'next_named_opt_pred':([331,381,382,383,417,],[362,362,362,362,362,]),'arg_name':([331,381,382,383,417,],[363,363,363,363,363,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON','program',5,'p_program_r0','parser.py',164),
  ('program -> WS','program',1,'p_program_r1','parser.py',169),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_r0','parser.py',174),
  ('stmts -> stmt','stmts',1,'p_stmts_r1','parser.py',179),
  ('stmt -> trait_decl','stmt',1,'p_stmt_r0','parser.py',184),
  ('stmt -> print_stmt','stmt',1,'p_stmt_r1','parser.py',189),
  ('stmt -> generate_stmt','stmt',1,'p_stmt_r2','parser.py',194),
  ('stmt -> assign_stmt','stmt',1,'p_stmt_r3','parser.py',199),
  ('stmt -> S_COLON','stmt',1,'p_stmt_r4','parser.py',204),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_r0','parser.py',209),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_r1','parser.py',214),
  ('trait_id -> ID','trait_id',1,'p_trait_id_r0','parser.py',219),
  ('class_args -> main_arg COMMA sub_args','class_args',3,'p_class_args_r0','parser.py',224),
  ('class_args -> main_arg','class_args',1,'p_class_args_r1','parser.py',229),
  ('main_arg -> ID','main_arg',1,'p_main_arg_r0','parser.py',234),
  ('sub_args -> necessary_args COMMA optional_args','sub_args',3,'p_sub_args_r0','parser.py',239),
  ('sub_args -> necessary_args','sub_args',1,'p_sub_args_r1','parser.py',244),
  ('sub_args -> optional_args','sub_args',1,'p_sub_args_r2','parser.py',249),
  ('necessary_args -> necessary_args COMMA necessary_arg','necessary_args',3,'p_necessary_args_r0','parser.py',254),
  ('necessary_args -> necessary_arg','necessary_args',1,'p_necessary_args_r1','parser.py',259),
  ('necessary_arg -> ID','necessary_arg',1,'p_necessary_arg_r0','parser.py',264),
  ('optional_args -> optional_args COMMA optional_arg','optional_args',3,'p_optional_args_r0','parser.py',269),
  ('optional_args -> optional_arg','optional_args',1,'p_optional_args_r1','parser.py',274),
  ('optional_arg -> ID ASSIGN unary_pred','optional_arg',3,'p_optional_arg_r0','parser.py',279),
  ('trait_decl_stmts -> trait_decl_stmts trait_decl_stmt','trait_decl_stmts',2,'p_trait_decl_stmts_r0','parser.py',284),
  ('trait_decl_stmts -> trait_decl_stmt','trait_decl_stmts',1,'p_trait_decl_stmts_r1','parser.py',289),
  ('trait_decl_stmts -> PASS S_COLON','trait_decl_stmts',2,'p_trait_decl_stmts_r2','parser.py',294),
  ('trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r0','parser.py',299),
  ('trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r1','parser.py',304),
  ('trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r2','parser.py',309),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r3','parser.py',314),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r4','parser.py',319),
  ('decl_fn_stmts -> decl_fn_stmts decl_fn_stmt','decl_fn_stmts',2,'p_decl_fn_stmts_r0','parser.py',324),
  ('decl_fn_stmts -> decl_fn_stmt','decl_fn_stmts',1,'p_decl_fn_stmts_r1','parser.py',329),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_fn_stmt',5,'p_decl_fn_stmt_r0','parser.py',334),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_r1','parser.py',339),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',8,'p_decl_fn_stmt_r2','parser.py',344),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_decl_fn_stmt_r3','parser.py',349),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt','decl_cls_fn_stmts',2,'p_decl_cls_fn_stmts_r0','parser.py',354),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmt','decl_cls_fn_stmts',1,'p_decl_cls_fn_stmts_r1','parser.py',359),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',5,'p_decl_cls_fn_stmt_r0','parser.py',364),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_decl_cls_fn_stmt_r1','parser.py',369),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',8,'p_decl_cls_fn_stmt_r2','parser.py',374),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_decl_cls_fn_stmt_r3','parser.py',379),
  ('fn_id -> ID','fn_id',1,'p_fn_id_r0','parser.py',384),
  ('pred_args -> main_pred COMMA next_preds','pred_args',3,'p_pred_args_r0','parser.py',389),
  ('pred_args -> main_pred','pred_args',1,'p_pred_args_r1','parser.py',394),
  ('main_pred -> ID','main_pred',1,'p_main_pred_r0','parser.py',399),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',7,'p_next_preds_r0','parser.py',404),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR','next_preds',5,'p_next_preds_r1','parser.py',409),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds','next_preds',3,'p_next_preds_r2','parser.py',414),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r3','parser.py',419),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR','next_preds',3,'p_next_preds_r4','parser.py',424),
  ('next_preds -> next_anonymous_necessary_preds','next_preds',1,'p_next_preds_r5','parser.py',429),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r6','parser.py',434),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR','next_preds',3,'p_next_preds_r7','parser.py',439),
  ('next_preds -> next_anonymous_opt_preds','next_preds',1,'p_next_preds_r8','parser.py',444),
  ('next_preds -> STAR COMMA next_named_preds','next_preds',3,'p_next_preds_r9','parser.py',449),
  ('next_preds -> STAR','next_preds',1,'p_next_preds_r10','parser.py',454),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_next_anonymous_necessary_preds_r0','parser.py',459),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_pred','next_anonymous_necessary_preds',1,'p_next_anonymous_necessary_preds_r1','parser.py',464),
  ('next_anonymous_necessary_pred -> unary_pred','next_anonymous_necessary_pred',1,'p_next_anonymous_necessary_pred_r0','parser.py',469),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_next_anonymous_opt_preds_r0','parser.py',474),
  ('next_anonymous_opt_preds -> next_anonymous_opt_pred','next_anonymous_opt_preds',1,'p_next_anonymous_opt_preds_r1','parser.py',479),
  ('next_anonymous_opt_pred -> ASSIGN unary_pred','next_anonymous_opt_pred',2,'p_next_anonymous_opt_pred_r0','parser.py',484),
  ('next_named_preds -> next_named_preds COMMA next_named_pred','next_named_preds',3,'p_next_named_preds_r0','parser.py',489),
  ('next_named_preds -> next_named_pred','next_named_preds',1,'p_next_named_preds_r1','parser.py',494),
  ('next_named_pred -> next_named_necessary_pred','next_named_pred',1,'p_next_named_pred_r0','parser.py',499),
  ('next_named_pred -> next_named_opt_pred','next_named_pred',1,'p_next_named_pred_r1','parser.py',504),
  ('next_named_necessary_pred -> arg_name COLON unary_pred','next_named_necessary_pred',3,'p_next_named_necessary_pred_r0','parser.py',509),
  ('next_named_opt_pred -> arg_name COLON ASSIGN unary_pred','next_named_opt_pred',4,'p_next_named_opt_pred_r0','parser.py',514),
  ('arg_name -> ID','arg_name',1,'p_arg_name_r0','parser.py',519),
  ('type_var_args -> type_var_args COMMA type_var_arg','type_var_args',3,'p_type_var_args_r0','parser.py',524),
  ('type_var_args -> type_var_arg','type_var_args',1,'p_type_var_args_r1','parser.py',529),
  ('type_var_arg -> type_var_id','type_var_arg',1,'p_type_var_arg_r0','parser.py',534),
  ('type_var_arg -> type_var_id COLON unary_pred','type_var_arg',3,'p_type_var_arg_r1','parser.py',539),
  ('type_var_id -> ID','type_var_id',1,'p_type_var_id_r0','parser.py',544),
  ('unary_pred -> pred_name','unary_pred',1,'p_unary_pred_r0','parser.py',549),
  ('unary_pred -> unnamed_pred','unary_pred',1,'p_unary_pred_r1','parser.py',554),
  ('unnamed_pred -> pred_name LP3 args RP3','unnamed_pred',4,'p_unnamed_pred_r0','parser.py',559),
  ('unnamed_pred -> LP3 pred_expr RP3','unnamed_pred',3,'p_unnamed_pred_r1','parser.py',564),
  ('unnamed_pred -> TRAIT_OF LP1 var_expr RP1','unnamed_pred',4,'p_unnamed_pred_r2','parser.py',569),
  ('unnamed_pred -> NONE','unnamed_pred',1,'p_unnamed_pred_r3','parser.py',574),
  ('pred_name -> ID','pred_name',1,'p_pred_name_r0','parser.py',579),
  ('pred_expr -> pred_expr OR pred_expr_a','pred_expr',3,'p_pred_expr_r0','parser.py',584),
  ('pred_expr -> pred_expr_a','pred_expr',1,'p_pred_expr_r1','parser.py',589),
  ('pred_expr_a -> pred_expr_a AND pred_expr_b','pred_expr_a',3,'p_pred_expr_a_r0','parser.py',594),
  ('pred_expr_a -> pred_expr_b','pred_expr_a',1,'p_pred_expr_a_r1','parser.py',599),
  ('pred_expr_b -> NOT pred_expr_c','pred_expr_b',2,'p_pred_expr_b_r0','parser.py',604),
  ('pred_expr_b -> pred_expr_c','pred_expr_b',1,'p_pred_expr_b_r1','parser.py',609),
  ('pred_expr_c -> unary_pred','pred_expr_c',1,'p_pred_expr_c_r0','parser.py',614),
  ('pred_expr_c -> LP1 pred_expr RP1','pred_expr_c',3,'p_pred_expr_c_r1','parser.py',619),
  ('var_expr -> unary_pred DOT member_var_name','var_expr',3,'p_var_expr_r0','parser.py',624),
  ('member_var_name -> ID','member_var_name',1,'p_member_var_name_r0','parser.py',629),
  ('decl_stmts -> decl_stmts decl_stmt','decl_stmts',2,'p_decl_stmts_r0','parser.py',634),
  ('decl_stmts -> decl_stmt','decl_stmts',1,'p_decl_stmts_r1','parser.py',639),
  ('decl_stmt -> var_id S_COLON','decl_stmt',2,'p_decl_stmt_r0','parser.py',644),
  ('decl_stmt -> var_id COLON unary_pred S_COLON','decl_stmt',4,'p_decl_stmt_r1','parser.py',649),
  ('decl_stmt -> LP3 vars_id RP3 S_COLON','decl_stmt',4,'p_decl_stmt_r2','parser.py',654),
  ('decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON','decl_stmt',6,'p_decl_stmt_r3','parser.py',659),
  ('vars_id -> vars_id COMMA var_id','vars_id',3,'p_vars_id_r0','parser.py',664),
  ('vars_id -> var_id','vars_id',1,'p_vars_id_r1','parser.py',669),
  ('var_id -> ID','var_id',1,'p_var_id_r0','parser.py',674),
  ('decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt','decl_static_fn_stmts',2,'p_decl_static_fn_stmts_r0','parser.py',679),
  ('decl_static_fn_stmts -> decl_static_fn_stmt','decl_static_fn_stmts',1,'p_decl_static_fn_stmts_r1','parser.py',684),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',5,'p_decl_static_fn_stmt_r0','parser.py',689),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r1','parser.py',694),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',8,'p_decl_static_fn_stmt_r2','parser.py',699),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',10,'p_decl_static_fn_stmt_r3','parser.py',704),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_r4','parser.py',709),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',6,'p_decl_static_fn_stmt_r5','parser.py',714),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r6','parser.py',719),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',9,'p_decl_static_fn_stmt_r7','parser.py',724),
  ('static_fn_id -> ID','static_fn_id',1,'p_static_fn_id_r0','parser.py',729),
  ('print_stmt -> PRINTINFO to_print S_COLON','print_stmt',3,'p_print_stmt_r0','parser.py',734),
  ('generate_stmt -> GENERATE to_print S_COLON','generate_stmt',3,'p_generate_stmt_r0','parser.py',739),
  ('to_print -> ID','to_print',1,'p_to_print_r0','parser.py',744),
  ('to_print -> boolean_expr','to_print',1,'p_to_print_r1','parser.py',749),
  ('to_print -> unnamed_pred','to_print',1,'p_to_print_r2','parser.py',754),
  ('boolean_expr -> boolean_expr OR boolean_expr_a','boolean_expr',3,'p_boolean_expr_r0','parser.py',759),
  ('boolean_expr -> boolean_expr_a','boolean_expr',1,'p_boolean_expr_r1','parser.py',764),
  ('boolean_expr_a -> boolean_expr_a XOR boolean_expr_b','boolean_expr_a',3,'p_boolean_expr_a_r0','parser.py',769),
  ('boolean_expr_a -> boolean_expr_b','boolean_expr_a',1,'p_boolean_expr_a_r1','parser.py',774),
  ('boolean_expr_b -> boolean_expr_b AND boolean_expr_c','boolean_expr_b',3,'p_boolean_expr_b_r0','parser.py',779),
  ('boolean_expr_b -> boolean_expr_c','boolean_expr_b',1,'p_boolean_expr_b_r1','parser.py',784),
  ('boolean_expr_c -> boolean_expr_c EQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r0','parser.py',789),
  ('boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r1','parser.py',794),
  ('boolean_expr_c -> boolean_expr_d','boolean_expr_c',1,'p_boolean_expr_c_r2','parser.py',799),
  ('boolean_expr_d -> NOT boolean_expr_e','boolean_expr_d',2,'p_boolean_expr_d_r0','parser.py',804),
  ('boolean_expr_d -> boolean_expr_e','boolean_expr_d',1,'p_boolean_expr_d_r1','parser.py',809),
  ('boolean_expr_e -> atomic_boolean_expr','boolean_expr_e',1,'p_boolean_expr_e_r0','parser.py',814),
  ('boolean_expr_e -> LP1 boolean_expr RP1','boolean_expr_e',3,'p_boolean_expr_e_r1','parser.py',819),
  ('atomic_boolean_expr -> constants','atomic_boolean_expr',1,'p_atomic_boolean_expr_r0','parser.py',824),
  ('atomic_boolean_expr -> unary_pred LP1 args RP1','atomic_boolean_expr',4,'p_atomic_boolean_expr_r1','parser.py',829),
  ('atomic_boolean_expr -> unary_pred IMPLIES unary_pred','atomic_boolean_expr',3,'p_atomic_boolean_expr_r2','parser.py',834),
  ('atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r3','parser.py',839),
  ('atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r4','parser.py',844),
  ('constants -> TRUE','constants',1,'p_constants_r0','parser.py',849),
  ('constants -> FALSE','constants',1,'p_constants_r1','parser.py',854),
  ('args -> args COMMA arg','args',3,'p_args_r0','parser.py',859),
  ('args -> arg','args',1,'p_args_r1','parser.py',864),
  ('arg -> ID','arg',1,'p_arg_r0','parser.py',869),
  ('assign_stmt -> names ASSIGN assign_expr S_COLON','assign_stmt',4,'p_assign_stmt_r0','parser.py',874),
  ('names -> names COMMA name','names',3,'p_names_r0','parser.py',879),
  ('names -> name','names',1,'p_names_r1','parser.py',884),
  ('name -> ID','name',1,'p_name_r0','parser.py',889),
  ('assign_expr -> names ASSIGN assign_expr','assign_expr',3,'p_assign_expr_r0','parser.py',894),
  ('assign_expr -> names','assign_expr',1,'p_assign_expr_r1','parser.py',899),
  ('trait_decl_stmt -> error S_COLON','trait_decl_stmt',2,'p_trait_decl_stmt_err0','parser.py',907),
  ('trait_decl_stmt -> error LP2 error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err1','parser.py',912),
  ('assign_stmt -> names assign_expr S_COLON','assign_stmt',3,'p_assign_stmt_err0','parser.py',917),
  ('trait_decl -> TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',8,'p_trait_decl_err0','parser.py',923),
  ('trait_decl -> TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON','trait_decl',9,'p_trait_decl_err1','parser.py',928),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 error S_COLON','trait_decl',7,'p_trait_decl_err2','parser.py',933),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 LP2 trait_decl_stmts error S_COLON','trait_decl',9,'p_trait_decl_err3','parser.py',938),
  ('trait_decl -> TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_err4','parser.py',943),
  ('trait_decl -> TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_err5','parser.py',948),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON error S_COLON','trait_decl',8,'p_trait_decl_err6','parser.py',953),
  ('trait_decl_stmt -> FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err2','parser.py',959),
  ('trait_decl_stmt -> FN COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err3','parser.py',964),
  ('trait_decl_stmt -> VAR COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err4','parser.py',969),
  ('trait_decl_stmt -> VAR COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err5','parser.py',974),
  ('trait_decl_stmt -> CLS_FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err6','parser.py',979),
  ('trait_decl_stmt -> CLS_FN COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err7','parser.py',984),
  ('trait_decl_stmt -> CLS_VAR COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err8','parser.py',989),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err9','parser.py',994),
  ('trait_decl_stmt -> STATIC_FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err10','parser.py',999),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err11','parser.py',1004),
  ('decl_fn_stmt -> fn_id error RP1 S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err0','parser.py',1010),
  ('decl_fn_stmt -> fn_id LP1 error S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err1','parser.py',1015),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err2','parser.py',1020),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err3','parser.py',1025),
  ('decl_fn_stmt -> fn_id error RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err4','parser.py',1030),
  ('decl_fn_stmt -> fn_id LP3 error LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err5','parser.py',1035),
  ('unnamed_pred -> pred_name error RP3','unnamed_pred',3,'p_unnamed_pred_err0','parser.py',1072),
  ('decl_stmt -> error RP3 S_COLON','decl_stmt',3,'p_decl_stmt_err0','parser.py',1078),
  ('decl_stmt -> error RP3 COLON unary_pred S_COLON','decl_stmt',5,'p_decl_stmt_err1','parser.py',1083),
  ('decl_stmt -> LP3 error S_COLON','decl_stmt',3,'p_decl_stmt_err2','parser.py',1088),
  ('decl_static_fn_stmt -> static_fn_id error RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err0','parser.py',1094),
  ('decl_static_fn_stmt -> static_fn_id LP1 error S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err1','parser.py',1099),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err2','parser.py',1104),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err3','parser.py',1109),
  ('decl_static_fn_stmt -> static_fn_id error RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err4','parser.py',1114),
  ('decl_static_fn_stmt -> static_fn_id LP3 error LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err5','parser.py',1119),
]

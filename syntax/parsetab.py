
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CLS_FN CLS_VAR COLON COMMA DOT EQ EXTENDS FALSE FN GENERATE ID IMPLIES LP1 LP2 LP3 NEQ NONE NOT OR PASS PRINTINFO PROGRAM_BEGIN PROGRAM_END RP1 RP2 RP3 R_ARROW STAR STATIC_FN S_COLON TRAIT TRAIT_OF TRUE VAR WS XOR program : PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON  program : WS  stmts : stmts stmt  stmts : stmt  stmt : trait_decl  stmt : print_stmt  stmt : generate_stmt  stmt : assign_stmt  stmt : S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_id : ID  class_args : main_arg COMMA sub_args  class_args : main_arg  main_arg : ID  sub_args : necessary_args COMMA optional_args sub_args : necessary_args  sub_args : optional_args  necessary_args : necessary_args COMMA necessary_arg  necessary_args : necessary_arg  necessary_arg : ID  optional_args : optional_args COMMA optional_arg  optional_args : optional_arg  optional_arg : ID ASSIGN unary_pred trait_decl_stmts : trait_decl_stmts trait_decl_stmt  trait_decl_stmts : trait_decl_stmt  trait_decl_stmts : PASS S_COLON  trait_decl_stmt : FN COLON LP2 decl_fn_stmts RP2 S_COLON  trait_decl_stmt : VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON  trait_decl_stmt : CLS_VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON  decl_fn_stmts : decl_fn_stmts decl_fn_stmt  decl_fn_stmts : decl_fn_stmt  decl_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmts : decl_cls_fn_stmts decl_cls_fn_stmt  decl_cls_fn_stmts : decl_cls_fn_stmt  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  fn_id : ID  pred_args : main_pred COMMA next_preds  pred_args : main_pred  main_pred : ID  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds next_preds : next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA STAR  next_preds : next_anonymous_necessary_preds  next_preds : next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_opt_preds  next_preds : STAR COMMA next_named_preds  next_preds : STAR  next_anonymous_necessary_preds : next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred  next_anonymous_necessary_preds : next_anonymous_necessary_pred  next_anonymous_necessary_pred : unary_pred  next_anonymous_opt_preds : next_anonymous_opt_preds COMMA next_anonymous_opt_pred  next_anonymous_opt_preds : next_anonymous_opt_pred  next_anonymous_opt_pred : ASSIGN unary_pred  next_named_preds : next_named_preds COMMA next_named_pred  next_named_preds : next_named_pred  next_named_pred : next_named_necessary_pred  next_named_pred : next_named_opt_pred  next_named_necessary_pred : arg_name COLON unary_pred  next_named_opt_pred : arg_name COLON ASSIGN unary_pred  arg_name : ID  type_var_args : type_var_args COMMA type_var_arg  type_var_args : type_var_arg  type_var_arg : type_var_id  type_var_arg : type_var_id COLON unary_pred  type_var_id : ID  unary_pred : pred_name  unary_pred : unnamed_pred  unnamed_pred : pred_name LP3 args RP3  unnamed_pred : LP3 pred_expr RP3  unnamed_pred : TRAIT_OF LP1 var_expr RP1  unnamed_pred : NONE  pred_name : ID  pred_expr : pred_expr OR pred_expr_a  pred_expr : pred_expr_a  pred_expr_a : pred_expr_a AND pred_expr_b  pred_expr_a : pred_expr_b  pred_expr_b : NOT pred_expr_c  pred_expr_b : pred_expr_c  pred_expr_c : unary_pred  pred_expr_c : LP1 pred_expr RP1  var_expr : unary_pred DOT member_var_name  member_var_name : ID  decl_stmts : decl_stmts decl_stmt  decl_stmts : decl_stmt  decl_stmt : var_id S_COLON  decl_stmt : var_id COLON unary_pred S_COLON  decl_stmt : LP3 vars_id RP3 S_COLON  decl_stmt : LP3 vars_id RP3 COLON unary_pred S_COLON  vars_id : vars_id COMMA var_id  vars_id : var_id  var_id : ID  decl_static_fn_stmts : decl_static_fn_stmts decl_static_fn_stmt  decl_static_fn_stmts : decl_static_fn_stmt  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON  static_fn_id : ID  print_stmt : PRINTINFO to_print S_COLON  generate_stmt : GENERATE to_print S_COLON  to_print : ID  to_print : boolean_expr  to_print : unnamed_pred  boolean_expr : boolean_expr OR boolean_expr_a  boolean_expr : boolean_expr_a  boolean_expr_a : boolean_expr_a XOR boolean_expr_b  boolean_expr_a : boolean_expr_b  boolean_expr_b : boolean_expr_b AND boolean_expr_c  boolean_expr_b : boolean_expr_c  boolean_expr_c : boolean_expr_c EQ boolean_expr_d  boolean_expr_c : boolean_expr_c NEQ boolean_expr_d  boolean_expr_c : boolean_expr_d  boolean_expr_d : NOT boolean_expr_e  boolean_expr_d : boolean_expr_e  boolean_expr_e : atomic_boolean_expr  boolean_expr_e : LP1 boolean_expr RP1  atomic_boolean_expr : constants  atomic_boolean_expr : unary_pred LP1 args RP1  atomic_boolean_expr : unary_pred IMPLIES unary_pred  atomic_boolean_expr : LP1 unary_pred EQ unary_pred RP1  atomic_boolean_expr : LP1 unary_pred NEQ unary_pred RP1  constants : TRUE  constants : FALSE  args : args COMMA arg  args : arg  arg : ID  assign_stmt : names ASSIGN assign_expr S_COLON  names : names COMMA name  names : name  name : ID  assign_expr : names ASSIGN assign_expr  assign_expr : names  trait_decl_stmt : error S_COLON  trait_decl_stmt : error LP2 error RP2 S_COLON\n    assign_stmt : names ASSIGN error S_COLON\n     trait_decl : TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 error S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 LP2 trait_decl_stmts error S_COLON  trait_decl : TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON error S_COLON  trait_decl_stmt : FN COLON error RP2 S_COLON  trait_decl_stmt : FN COLON LP2 error S_COLON  trait_decl_stmt : VAR COLON error RP2 S_COLON  trait_decl_stmt : VAR COLON LP2 error S_COLON  trait_decl_stmt : CLS_FN COLON error RP2 S_COLON  trait_decl_stmt : CLS_FN COLON LP2 error S_COLON  trait_decl_stmt : CLS_VAR COLON error RP2 S_COLON  trait_decl_stmt : CLS_VAR COLON LP2 error S_COLON  trait_decl_stmt : STATIC_FN COLON error RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON LP2 error S_COLON  decl_fn_stmt : fn_id error RP1 S_COLON  decl_fn_stmt : fn_id LP1 error S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_fn_stmt : fn_id error RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 error LP1 pred_args RP1 S_COLON  decl_stmt :  error RP3 S_COLON  decl_stmt :  error RP3 COLON unary_pred S_COLON  decl_stmt :  LP3 error S_COLON  decl_static_fn_stmt : static_fn_id error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 error S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_static_fn_stmt : static_fn_id error RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 error LP1 next_preds RP1 S_COLON '
    
_lr_action_items = {'PROGRAM_BEGIN':([0,],[2,]),'WS':([0,],[3,]),'$end':([1,3,45,],[0,-2,-1,]),'S_COLON':([2,4,5,6,7,8,9,10,11,16,17,18,19,22,23,24,25,26,31,32,33,34,36,37,38,40,41,42,48,59,60,61,68,71,72,73,74,75,81,82,86,93,96,97,98,100,102,103,109,114,118,119,123,132,135,145,146,148,151,159,169,170,172,180,192,193,195,197,199,203,205,207,209,210,212,215,217,218,220,224,225,226,230,237,241,245,248,254,257,264,265,266,269,277,282,283,292,294,303,305,306,307,316,321,323,345,351,367,369,370,371,372,374,376,384,385,386,387,388,390,396,404,419,420,421,423,],[4,5,-9,5,-4,-5,-6,-7,-8,-145,-146,45,-3,48,-117,-118,-119,-121,-83,-123,-125,-128,-130,-131,-133,-138,-139,71,-115,-78,-79,-84,-129,-116,-148,102,103,-144,-120,-122,-81,-132,-124,-126,-127,-135,-143,-151,-80,-82,-134,-147,151,157,161,-136,-137,169,-154,180,-158,193,195,-152,226,-155,-153,229,232,236,240,242,-103,247,250,253,255,256,259,263,264,-10,267,279,280,285,286,289,290,-156,305,306,308,314,317,318,324,326,333,-11,-157,335,344,346,349,373,377,389,391,392,393,394,395,397,405,407,408,409,410,411,413,417,424,425,426,427,]),'TRAIT':([4,5,6,7,8,9,10,11,19,48,71,102,103,151,169,180,193,195,226,264,305,306,],[12,-9,12,-4,-5,-6,-7,-8,-3,-115,-116,-143,-151,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'PRINTINFO':([4,5,6,7,8,9,10,11,19,48,71,102,103,151,169,180,193,195,226,264,305,306,],[13,-9,13,-4,-5,-6,-7,-8,-3,-115,-116,-143,-151,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'GENERATE':([4,5,6,7,8,9,10,11,19,48,71,102,103,151,169,180,193,195,226,264,305,306,],[14,-9,14,-4,-5,-6,-7,-8,-3,-115,-116,-143,-151,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,19,28,30,35,43,44,46,48,49,50,51,55,58,62,65,66,67,69,70,71,80,87,88,94,95,101,102,103,106,110,115,122,125,151,154,155,156,169,180,181,183,185,187,189,193,195,198,200,204,206,208,211,213,216,219,221,226,231,233,234,238,242,243,249,251,252,258,260,261,264,280,281,284,285,300,305,306,308,309,311,312,313,314,315,317,318,319,324,325,326,327,329,332,333,334,335,336,338,344,346,347,348,349,350,363,373,377,379,380,381,382,389,391,392,393,394,395,397,403,405,406,407,408,409,410,411,412,413,414,415,417,418,424,425,426,427,],[17,-9,17,-4,-5,-6,-7,-8,21,23,23,-3,61,61,61,17,17,78,-115,61,61,85,61,61,61,61,61,61,85,61,-116,61,61,61,61,61,17,-143,-151,131,85,144,61,61,-154,131,177,61,-158,-152,202,209,202,209,223,-155,-153,202,-34,209,-96,209,202,-40,209,223,-105,-10,-33,271,276,-95,-97,61,-39,271,276,-104,61,276,-156,-175,61,209,-177,61,-11,-157,-170,61,276,271,61,-169,271,-98,-99,61,-110,61,-179,61,362,61,-178,61,-35,61,271,-176,-41,61,271,-106,61,61,-100,-111,362,362,362,61,-36,-172,-171,-174,-173,-42,-107,61,-112,61,-181,-180,-183,-182,-37,61,-43,61,362,-108,61,-113,-38,-44,-109,]),'PROGRAM_END':([5,6,7,8,9,10,11,19,48,71,102,103,151,169,180,193,195,226,264,305,306,],[-9,18,-4,-5,-6,-7,-8,-3,-115,-116,-143,-151,-154,-158,-152,-155,-153,-10,-156,-11,-157,]),'LP3':([13,14,23,27,28,30,35,49,50,55,58,59,61,62,65,66,67,70,80,87,88,94,95,122,125,156,183,187,201,202,204,206,214,216,222,223,238,242,243,260,280,281,285,300,309,313,317,318,319,325,327,332,334,336,344,347,350,363,373,382,403,406,412,414,418,],[28,28,-84,51,28,28,28,28,28,28,28,51,-84,28,28,28,28,28,28,28,28,28,28,28,28,28,208,208,234,-45,208,-96,252,208,261,-114,-95,-97,28,28,-175,28,-177,28,28,28,-98,-99,28,28,28,28,28,28,-176,28,28,28,-100,28,28,28,28,28,28,]),'TRAIT_OF':([13,14,28,30,35,49,50,55,58,62,65,66,67,70,80,87,88,94,95,122,125,156,243,260,281,300,309,313,319,325,327,332,334,336,347,350,363,382,403,406,412,414,418,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'NONE':([13,14,28,30,35,49,50,55,58,62,65,66,67,70,80,87,88,94,95,122,125,156,243,260,281,300,309,313,319,325,327,332,334,336,347,350,363,382,403,406,412,414,418,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NOT':([13,14,28,30,49,50,58,65,66,67,87,88,],[35,35,55,35,35,35,55,35,35,35,55,55,]),'LP1':([13,14,20,21,23,25,27,28,29,30,31,35,39,49,50,55,58,59,60,61,64,65,66,67,86,87,88,109,114,201,202,214,222,223,273,278,302,304,310,322,331,],[30,30,46,-12,-84,-79,-78,58,62,30,-83,30,69,30,30,58,58,-78,-79,-84,69,30,30,30,-81,58,58,-80,-82,233,-45,251,260,-114,312,315,332,334,338,348,363,]),'TRUE':([13,14,30,35,49,50,65,66,67,],[40,40,40,40,40,40,40,40,40,]),'FALSE':([13,14,30,35,49,50,65,66,67,],[41,41,41,41,41,41,41,41,41,]),'ASSIGN':([15,16,17,72,75,131,177,260,309,327,328,332,334,363,378,382,],[43,-145,-146,101,-144,156,156,300,300,300,300,300,300,300,300,403,]),'COMMA':([15,16,17,31,59,60,61,72,75,77,78,83,84,85,86,99,109,114,127,128,129,130,131,142,174,175,176,178,209,244,246,270,271,272,274,275,276,288,293,295,296,297,298,299,301,320,330,340,342,352,353,354,355,356,357,358,359,360,398,399,400,401,402,416,422,],[44,-145,-146,-83,-78,-79,-84,44,-144,106,-15,110,-141,-142,-81,110,-80,-82,154,155,-20,-23,-21,-140,155,-19,-22,-24,-103,284,-102,309,-48,311,-74,-75,-77,311,-62,327,328,329,-61,-64,311,-101,-65,-73,-76,378,379,-60,380,-63,381,-67,-68,-69,415,381,381,-66,-70,-71,381,]),'error':([20,21,31,43,59,60,61,76,77,78,86,104,107,109,114,120,121,124,126,127,128,129,130,131,133,134,147,149,152,157,158,160,161,162,163,164,165,166,167,168,174,175,176,178,181,183,185,187,189,191,193,194,196,201,202,204,206,208,216,222,223,227,228,229,232,233,234,236,238,240,242,247,250,253,255,256,259,260,261,263,267,279,280,285,286,289,290,310,317,318,331,338,344,363,373,],[47,-12,-83,74,-78,-79,-84,105,-14,-15,-81,123,132,-80,-82,148,132,132,-13,-17,-18,-20,-23,-21,132,-26,132,170,132,-149,179,-25,-27,182,184,186,188,190,132,132,-16,-19,-22,-24,199,205,212,217,220,132,-149,132,132,235,-45,239,-96,245,239,262,-114,132,132,-150,-160,269,273,-159,-95,-162,-97,-161,-164,-163,-166,-165,-168,294,302,-167,-28,-29,-175,-177,-30,-31,-32,339,-98,-99,364,369,-176,385,-100,]),'IMPLIES':([23,25,27,31,39,59,60,61,64,86,109,114,],[-84,-79,-78,-83,70,-78,-79,-84,70,-81,-80,-82,]),'OR':([24,26,31,32,33,34,36,37,38,40,41,52,53,54,56,57,59,60,61,63,68,81,82,86,89,90,93,96,97,98,100,109,111,112,113,114,118,145,146,],[49,-121,-83,-123,-125,-128,-130,-131,-133,-138,-139,87,-86,-88,-90,-91,-78,-79,-84,49,-129,-120,-122,-81,-89,87,-132,-124,-126,-127,-135,-80,-85,-87,-92,-82,-134,-136,-137,]),'RP1':([26,31,32,33,34,36,37,38,40,41,53,54,56,57,59,60,61,63,68,76,77,78,81,82,84,85,86,89,90,91,93,96,97,98,99,100,109,111,112,113,114,116,117,118,126,127,128,129,130,131,142,143,144,145,146,174,175,176,178,235,260,262,268,270,271,287,291,293,295,296,297,298,299,330,337,339,341,343,352,353,354,355,356,357,358,359,360,363,364,365,366,368,375,383,398,399,400,401,402,416,422,],[-121,-83,-123,-125,-128,-130,-131,-133,-138,-139,-86,-88,-90,-91,-78,-79,-84,93,-129,104,-14,-15,-120,-122,-141,-142,-81,-89,113,114,-132,-124,-126,-127,118,-135,-80,-85,-87,-92,-82,145,146,-134,-13,-17,-18,-20,-23,-21,-140,-93,-94,-136,-137,-16,-19,-22,-24,277,292,303,307,-47,-48,321,323,-62,-54,-57,-59,-61,-64,-65,-46,370,371,372,-51,-53,-60,-56,-63,-58,-67,-68,-69,384,386,387,388,390,396,404,-50,-52,-55,-66,-70,-71,-49,]),'XOR':([26,31,32,33,34,36,37,38,40,41,59,60,61,68,81,82,86,93,96,97,98,100,109,114,118,145,146,],[50,-83,-123,-125,-128,-130,-131,-133,-138,-139,-78,-79,-84,-129,50,-122,-81,-132,-124,-126,-127,-135,-80,-82,-134,-136,-137,]),'AND':([31,32,33,34,36,37,38,40,41,53,54,56,57,59,60,61,68,82,86,89,93,96,97,98,100,109,111,112,113,114,118,145,146,],[-83,65,-125,-128,-130,-131,-133,-138,-139,88,-88,-90,-91,-78,-79,-84,-129,65,-81,-89,-132,-124,-126,-127,-135,-80,88,-87,-92,-82,-134,-136,-137,]),'RP3':([31,52,53,54,56,57,59,60,61,83,84,85,86,89,109,111,112,113,114,142,205,209,217,235,239,244,246,262,272,274,275,276,288,301,320,340,342,],[-83,86,-86,-88,-90,-91,-78,-79,-84,109,-141,-142,-81,-89,-80,-85,-87,-92,-82,-140,241,-103,241,278,241,283,-102,304,310,-74,-75,-77,322,331,-101,-73,-76,]),'EQ':([31,33,34,36,37,38,40,41,59,60,61,64,68,86,93,96,97,98,100,109,114,118,145,146,],[-83,66,-128,-130,-131,-133,-138,-139,-78,-79,-84,94,-129,-81,-132,66,-126,-127,-135,-80,-82,-134,-136,-137,]),'NEQ':([31,33,34,36,37,38,40,41,59,60,61,64,68,86,93,96,97,98,100,109,114,118,145,146,],[-83,67,-128,-130,-131,-133,-138,-139,-78,-79,-84,95,-129,-81,-132,67,-126,-127,-135,-80,-82,-134,-136,-137,]),'DOT':([31,59,60,61,86,92,109,114,],[-83,-78,-79,-84,-81,115,-80,-82,]),'COLON':([31,47,59,60,61,86,104,108,109,114,136,137,138,139,140,150,153,207,209,241,275,276,283,361,362,],[-83,79,-78,-79,-84,-81,120,141,-80,-82,162,163,164,165,166,171,173,243,-103,281,313,-77,319,382,-72,]),'EXTENDS':([47,104,105,],[80,122,125,]),'LP2':([79,104,105,120,132,141,162,163,164,165,166,170,171,173,],[107,121,124,147,158,167,181,183,185,187,189,158,194,196,]),'PASS':([107,121,124,147,167,194,196,],[135,135,135,135,135,135,135,]),'FN':([107,121,124,133,134,147,149,152,157,160,161,167,168,191,193,194,196,227,228,229,232,236,240,247,250,253,255,256,259,263,267,279,286,289,290,],[136,136,136,136,-26,136,136,136,-149,-25,-27,136,136,136,-149,136,136,136,136,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'VAR':([107,121,124,133,134,147,149,152,157,160,161,167,168,191,193,194,196,227,228,229,232,236,240,247,250,253,255,256,259,263,267,279,286,289,290,],[137,137,137,137,-26,137,137,137,-149,-25,-27,137,137,137,-149,137,137,137,137,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'CLS_FN':([107,121,124,133,134,147,149,152,157,160,161,167,168,191,193,194,196,227,228,229,232,236,240,247,250,253,255,256,259,263,267,279,286,289,290,],[138,138,138,138,-26,138,138,138,-149,-25,-27,138,138,138,-149,138,138,138,138,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'CLS_VAR':([107,121,124,133,134,147,149,152,157,160,161,167,168,191,193,194,196,227,228,229,232,236,240,247,250,253,255,256,259,263,267,279,286,289,290,],[139,139,139,139,-26,139,139,139,-149,-25,-27,139,139,139,-149,139,139,139,139,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'STATIC_FN':([107,121,124,133,134,147,149,152,157,160,161,167,168,191,193,194,196,227,228,229,232,236,240,247,250,253,255,256,259,263,267,279,286,289,290,],[140,140,140,140,-26,140,140,140,-149,-25,-27,140,140,140,-149,140,140,140,140,-150,-160,-159,-162,-161,-164,-163,-166,-165,-168,-167,-28,-29,-30,-31,-32,]),'RP2':([133,134,152,157,160,161,168,179,182,184,186,188,190,191,198,200,204,206,211,213,216,219,221,227,228,229,231,232,236,238,240,242,247,249,250,253,255,256,258,259,263,267,279,280,285,286,289,290,308,314,317,318,324,326,333,335,344,346,349,373,377,389,391,392,393,394,395,397,405,407,408,409,410,411,413,417,424,425,426,427,],[159,-26,172,-149,-25,-27,192,197,203,210,215,218,224,225,230,-34,237,-96,248,-40,254,257,-105,265,266,-150,-33,-160,-159,-95,-162,-97,-161,-39,-164,-163,-166,-165,-104,-168,-167,-28,-29,-175,-177,-30,-31,-32,-170,-169,-98,-99,-110,-179,-178,-35,-176,-41,-106,-100,-111,-36,-172,-171,-174,-173,-42,-107,-112,-181,-180,-183,-182,-37,-43,-108,-113,-38,-44,-109,]),'STAR':([260,309,327,328,332,334,363,378,],[297,297,353,355,297,297,297,398,]),'R_ARROW':([292,307,321,323,384,390,396,404,],[325,336,347,350,406,412,414,418,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([4,],[6,]),'stmt':([4,6,],[7,19,]),'trait_decl':([4,6,],[8,8,]),'print_stmt':([4,6,],[9,9,]),'generate_stmt':([4,6,],[10,10,]),'assign_stmt':([4,6,],[11,11,]),'names':([4,6,43,101,],[15,15,72,72,]),'name':([4,6,43,44,101,],[16,16,16,75,16,]),'trait_id':([12,],[20,]),'to_print':([13,14,],[22,42,]),'boolean_expr':([13,14,30,],[24,24,63,]),'unnamed_pred':([13,14,28,30,35,49,50,55,58,62,65,66,67,70,80,87,88,94,95,122,125,156,243,260,281,300,309,313,319,325,327,332,334,336,347,350,363,382,403,406,412,414,418,],[25,25,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'boolean_expr_a':([13,14,30,49,],[26,26,26,81,]),'pred_name':([13,14,28,30,35,49,50,55,58,62,65,66,67,70,80,87,88,94,95,122,125,156,243,260,281,300,309,313,319,325,327,332,334,336,347,350,363,382,403,406,412,414,418,],[27,27,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'boolean_expr_b':([13,14,30,49,50,],[32,32,32,32,82,]),'boolean_expr_c':([13,14,30,49,50,65,],[33,33,33,33,33,96,]),'boolean_expr_d':([13,14,30,49,50,65,66,67,],[34,34,34,34,34,34,97,98,]),'boolean_expr_e':([13,14,30,35,49,50,65,66,67,],[36,36,36,68,36,36,36,36,36,]),'atomic_boolean_expr':([13,14,30,35,49,50,65,66,67,],[37,37,37,37,37,37,37,37,37,]),'constants':([13,14,30,35,49,50,65,66,67,],[38,38,38,38,38,38,38,38,38,]),'unary_pred':([13,14,28,30,35,49,50,55,58,62,65,66,67,70,80,87,88,94,95,122,125,156,243,260,281,300,309,313,319,325,327,332,334,336,347,350,363,382,403,406,412,414,418,],[39,39,57,64,39,39,39,57,57,92,39,39,39,100,108,57,57,116,117,150,153,178,282,293,316,330,293,342,345,351,293,293,293,367,374,376,293,402,416,419,420,421,423,]),'pred_expr':([28,58,],[52,90,]),'pred_expr_a':([28,58,87,],[53,53,111,]),'pred_expr_b':([28,58,87,88,],[54,54,54,112,]),'pred_expr_c':([28,55,58,87,88,],[56,89,56,56,56,]),'assign_expr':([43,101,],[73,119,]),'class_args':([46,],[76,]),'main_arg':([46,],[77,]),'args':([51,69,],[83,99,]),'arg':([51,69,110,],[84,84,142,]),'var_expr':([62,],[91,]),'sub_args':([106,],[126,]),'necessary_args':([106,],[127,]),'optional_args':([106,154,],[128,174,]),'necessary_arg':([106,154,],[129,175,]),'optional_arg':([106,154,155,],[130,130,176,]),'trait_decl_stmts':([107,121,124,147,167,194,196,],[133,149,152,168,191,227,228,]),'trait_decl_stmt':([107,121,124,133,147,149,152,167,168,191,194,196,227,228,],[134,134,134,160,134,160,160,134,160,160,134,134,160,160,]),'member_var_name':([115,],[143,]),'decl_fn_stmts':([181,],[198,]),'decl_fn_stmt':([181,198,],[200,231,]),'fn_id':([181,185,198,211,],[201,214,201,214,]),'decl_stmts':([183,187,],[204,216,]),'decl_stmt':([183,187,204,216,],[206,206,238,238,]),'var_id':([183,187,204,208,216,284,],[207,207,207,246,207,320,]),'decl_cls_fn_stmts':([185,],[211,]),'decl_cls_fn_stmt':([185,211,],[213,249,]),'decl_static_fn_stmts':([189,],[219,]),'decl_static_fn_stmt':([189,219,],[221,258,]),'static_fn_id':([189,219,],[222,222,]),'vars_id':([208,],[244,]),'pred_args':([233,251,312,315,338,348,],[268,287,341,343,368,375,]),'main_pred':([233,251,312,315,338,348,],[270,270,270,270,270,270,]),'type_var_args':([234,252,261,],[272,288,301,]),'type_var_arg':([234,252,261,311,],[274,274,274,340,]),'type_var_id':([234,252,261,311,],[275,275,275,275,]),'next_preds':([260,309,332,334,363,],[291,337,365,366,383,]),'next_anonymous_necessary_preds':([260,309,332,334,363,],[295,295,295,295,295,]),'next_anonymous_opt_preds':([260,309,327,332,334,363,],[296,296,352,296,296,296,]),'next_anonymous_necessary_pred':([260,309,327,332,334,363,],[298,298,354,298,298,298,]),'next_anonymous_opt_pred':([260,309,327,328,332,334,363,378,],[299,299,299,356,299,299,299,356,]),'next_named_preds':([329,379,380,415,],[357,399,400,422,]),'next_named_pred':([329,379,380,381,415,],[358,358,358,401,358,]),'next_named_necessary_pred':([329,379,380,381,415,],[359,359,359,359,359,]),'next_named_opt_pred':([329,379,380,381,415,],[360,360,360,360,360,]),'arg_name':([329,379,380,381,415,],[361,361,361,361,361,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON','program',5,'p_program_r0','parser.py',166),
  ('program -> WS','program',1,'p_program_r1','parser.py',171),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_r0','parser.py',176),
  ('stmts -> stmt','stmts',1,'p_stmts_r1','parser.py',181),
  ('stmt -> trait_decl','stmt',1,'p_stmt_r0','parser.py',186),
  ('stmt -> print_stmt','stmt',1,'p_stmt_r1','parser.py',191),
  ('stmt -> generate_stmt','stmt',1,'p_stmt_r2','parser.py',196),
  ('stmt -> assign_stmt','stmt',1,'p_stmt_r3','parser.py',201),
  ('stmt -> S_COLON','stmt',1,'p_stmt_r4','parser.py',206),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_r0','parser.py',211),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_r1','parser.py',216),
  ('trait_id -> ID','trait_id',1,'p_trait_id_r0','parser.py',221),
  ('class_args -> main_arg COMMA sub_args','class_args',3,'p_class_args_r0','parser.py',226),
  ('class_args -> main_arg','class_args',1,'p_class_args_r1','parser.py',231),
  ('main_arg -> ID','main_arg',1,'p_main_arg_r0','parser.py',236),
  ('sub_args -> necessary_args COMMA optional_args','sub_args',3,'p_sub_args_r0','parser.py',241),
  ('sub_args -> necessary_args','sub_args',1,'p_sub_args_r1','parser.py',246),
  ('sub_args -> optional_args','sub_args',1,'p_sub_args_r2','parser.py',251),
  ('necessary_args -> necessary_args COMMA necessary_arg','necessary_args',3,'p_necessary_args_r0','parser.py',256),
  ('necessary_args -> necessary_arg','necessary_args',1,'p_necessary_args_r1','parser.py',261),
  ('necessary_arg -> ID','necessary_arg',1,'p_necessary_arg_r0','parser.py',266),
  ('optional_args -> optional_args COMMA optional_arg','optional_args',3,'p_optional_args_r0','parser.py',271),
  ('optional_args -> optional_arg','optional_args',1,'p_optional_args_r1','parser.py',276),
  ('optional_arg -> ID ASSIGN unary_pred','optional_arg',3,'p_optional_arg_r0','parser.py',281),
  ('trait_decl_stmts -> trait_decl_stmts trait_decl_stmt','trait_decl_stmts',2,'p_trait_decl_stmts_r0','parser.py',286),
  ('trait_decl_stmts -> trait_decl_stmt','trait_decl_stmts',1,'p_trait_decl_stmts_r1','parser.py',291),
  ('trait_decl_stmts -> PASS S_COLON','trait_decl_stmts',2,'p_trait_decl_stmts_r2','parser.py',296),
  ('trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r0','parser.py',301),
  ('trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r1','parser.py',306),
  ('trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r2','parser.py',311),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r3','parser.py',316),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r4','parser.py',321),
  ('decl_fn_stmts -> decl_fn_stmts decl_fn_stmt','decl_fn_stmts',2,'p_decl_fn_stmts_r0','parser.py',326),
  ('decl_fn_stmts -> decl_fn_stmt','decl_fn_stmts',1,'p_decl_fn_stmts_r1','parser.py',331),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_fn_stmt',5,'p_decl_fn_stmt_r0','parser.py',336),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_r1','parser.py',341),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',8,'p_decl_fn_stmt_r2','parser.py',346),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_decl_fn_stmt_r3','parser.py',351),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt','decl_cls_fn_stmts',2,'p_decl_cls_fn_stmts_r0','parser.py',356),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmt','decl_cls_fn_stmts',1,'p_decl_cls_fn_stmts_r1','parser.py',361),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',5,'p_decl_cls_fn_stmt_r0','parser.py',366),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_decl_cls_fn_stmt_r1','parser.py',371),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',8,'p_decl_cls_fn_stmt_r2','parser.py',376),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_decl_cls_fn_stmt_r3','parser.py',381),
  ('fn_id -> ID','fn_id',1,'p_fn_id_r0','parser.py',386),
  ('pred_args -> main_pred COMMA next_preds','pred_args',3,'p_pred_args_r0','parser.py',391),
  ('pred_args -> main_pred','pred_args',1,'p_pred_args_r1','parser.py',396),
  ('main_pred -> ID','main_pred',1,'p_main_pred_r0','parser.py',401),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',7,'p_next_preds_r0','parser.py',406),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR','next_preds',5,'p_next_preds_r1','parser.py',411),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds','next_preds',3,'p_next_preds_r2','parser.py',416),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r3','parser.py',421),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR','next_preds',3,'p_next_preds_r4','parser.py',426),
  ('next_preds -> next_anonymous_necessary_preds','next_preds',1,'p_next_preds_r5','parser.py',431),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r6','parser.py',436),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR','next_preds',3,'p_next_preds_r7','parser.py',441),
  ('next_preds -> next_anonymous_opt_preds','next_preds',1,'p_next_preds_r8','parser.py',446),
  ('next_preds -> STAR COMMA next_named_preds','next_preds',3,'p_next_preds_r9','parser.py',451),
  ('next_preds -> STAR','next_preds',1,'p_next_preds_r10','parser.py',456),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_next_anonymous_necessary_preds_r0','parser.py',461),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_pred','next_anonymous_necessary_preds',1,'p_next_anonymous_necessary_preds_r1','parser.py',466),
  ('next_anonymous_necessary_pred -> unary_pred','next_anonymous_necessary_pred',1,'p_next_anonymous_necessary_pred_r0','parser.py',471),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_next_anonymous_opt_preds_r0','parser.py',476),
  ('next_anonymous_opt_preds -> next_anonymous_opt_pred','next_anonymous_opt_preds',1,'p_next_anonymous_opt_preds_r1','parser.py',481),
  ('next_anonymous_opt_pred -> ASSIGN unary_pred','next_anonymous_opt_pred',2,'p_next_anonymous_opt_pred_r0','parser.py',486),
  ('next_named_preds -> next_named_preds COMMA next_named_pred','next_named_preds',3,'p_next_named_preds_r0','parser.py',491),
  ('next_named_preds -> next_named_pred','next_named_preds',1,'p_next_named_preds_r1','parser.py',496),
  ('next_named_pred -> next_named_necessary_pred','next_named_pred',1,'p_next_named_pred_r0','parser.py',501),
  ('next_named_pred -> next_named_opt_pred','next_named_pred',1,'p_next_named_pred_r1','parser.py',506),
  ('next_named_necessary_pred -> arg_name COLON unary_pred','next_named_necessary_pred',3,'p_next_named_necessary_pred_r0','parser.py',511),
  ('next_named_opt_pred -> arg_name COLON ASSIGN unary_pred','next_named_opt_pred',4,'p_next_named_opt_pred_r0','parser.py',516),
  ('arg_name -> ID','arg_name',1,'p_arg_name_r0','parser.py',521),
  ('type_var_args -> type_var_args COMMA type_var_arg','type_var_args',3,'p_type_var_args_r0','parser.py',526),
  ('type_var_args -> type_var_arg','type_var_args',1,'p_type_var_args_r1','parser.py',531),
  ('type_var_arg -> type_var_id','type_var_arg',1,'p_type_var_arg_r0','parser.py',536),
  ('type_var_arg -> type_var_id COLON unary_pred','type_var_arg',3,'p_type_var_arg_r1','parser.py',541),
  ('type_var_id -> ID','type_var_id',1,'p_type_var_id_r0','parser.py',546),
  ('unary_pred -> pred_name','unary_pred',1,'p_unary_pred_r0','parser.py',551),
  ('unary_pred -> unnamed_pred','unary_pred',1,'p_unary_pred_r1','parser.py',556),
  ('unnamed_pred -> pred_name LP3 args RP3','unnamed_pred',4,'p_unnamed_pred_r0','parser.py',561),
  ('unnamed_pred -> LP3 pred_expr RP3','unnamed_pred',3,'p_unnamed_pred_r1','parser.py',566),
  ('unnamed_pred -> TRAIT_OF LP1 var_expr RP1','unnamed_pred',4,'p_unnamed_pred_r2','parser.py',571),
  ('unnamed_pred -> NONE','unnamed_pred',1,'p_unnamed_pred_r3','parser.py',576),
  ('pred_name -> ID','pred_name',1,'p_pred_name_r0','parser.py',581),
  ('pred_expr -> pred_expr OR pred_expr_a','pred_expr',3,'p_pred_expr_r0','parser.py',586),
  ('pred_expr -> pred_expr_a','pred_expr',1,'p_pred_expr_r1','parser.py',591),
  ('pred_expr_a -> pred_expr_a AND pred_expr_b','pred_expr_a',3,'p_pred_expr_a_r0','parser.py',596),
  ('pred_expr_a -> pred_expr_b','pred_expr_a',1,'p_pred_expr_a_r1','parser.py',601),
  ('pred_expr_b -> NOT pred_expr_c','pred_expr_b',2,'p_pred_expr_b_r0','parser.py',606),
  ('pred_expr_b -> pred_expr_c','pred_expr_b',1,'p_pred_expr_b_r1','parser.py',611),
  ('pred_expr_c -> unary_pred','pred_expr_c',1,'p_pred_expr_c_r0','parser.py',616),
  ('pred_expr_c -> LP1 pred_expr RP1','pred_expr_c',3,'p_pred_expr_c_r1','parser.py',621),
  ('var_expr -> unary_pred DOT member_var_name','var_expr',3,'p_var_expr_r0','parser.py',626),
  ('member_var_name -> ID','member_var_name',1,'p_member_var_name_r0','parser.py',631),
  ('decl_stmts -> decl_stmts decl_stmt','decl_stmts',2,'p_decl_stmts_r0','parser.py',636),
  ('decl_stmts -> decl_stmt','decl_stmts',1,'p_decl_stmts_r1','parser.py',641),
  ('decl_stmt -> var_id S_COLON','decl_stmt',2,'p_decl_stmt_r0','parser.py',646),
  ('decl_stmt -> var_id COLON unary_pred S_COLON','decl_stmt',4,'p_decl_stmt_r1','parser.py',651),
  ('decl_stmt -> LP3 vars_id RP3 S_COLON','decl_stmt',4,'p_decl_stmt_r2','parser.py',656),
  ('decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON','decl_stmt',6,'p_decl_stmt_r3','parser.py',661),
  ('vars_id -> vars_id COMMA var_id','vars_id',3,'p_vars_id_r0','parser.py',666),
  ('vars_id -> var_id','vars_id',1,'p_vars_id_r1','parser.py',671),
  ('var_id -> ID','var_id',1,'p_var_id_r0','parser.py',676),
  ('decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt','decl_static_fn_stmts',2,'p_decl_static_fn_stmts_r0','parser.py',681),
  ('decl_static_fn_stmts -> decl_static_fn_stmt','decl_static_fn_stmts',1,'p_decl_static_fn_stmts_r1','parser.py',686),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',5,'p_decl_static_fn_stmt_r0','parser.py',691),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r1','parser.py',696),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',8,'p_decl_static_fn_stmt_r2','parser.py',701),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',10,'p_decl_static_fn_stmt_r3','parser.py',706),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_r4','parser.py',711),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',6,'p_decl_static_fn_stmt_r5','parser.py',716),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r6','parser.py',721),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',9,'p_decl_static_fn_stmt_r7','parser.py',726),
  ('static_fn_id -> ID','static_fn_id',1,'p_static_fn_id_r0','parser.py',731),
  ('print_stmt -> PRINTINFO to_print S_COLON','print_stmt',3,'p_print_stmt_r0','parser.py',736),
  ('generate_stmt -> GENERATE to_print S_COLON','generate_stmt',3,'p_generate_stmt_r0','parser.py',741),
  ('to_print -> ID','to_print',1,'p_to_print_r0','parser.py',746),
  ('to_print -> boolean_expr','to_print',1,'p_to_print_r1','parser.py',751),
  ('to_print -> unnamed_pred','to_print',1,'p_to_print_r2','parser.py',756),
  ('boolean_expr -> boolean_expr OR boolean_expr_a','boolean_expr',3,'p_boolean_expr_r0','parser.py',761),
  ('boolean_expr -> boolean_expr_a','boolean_expr',1,'p_boolean_expr_r1','parser.py',766),
  ('boolean_expr_a -> boolean_expr_a XOR boolean_expr_b','boolean_expr_a',3,'p_boolean_expr_a_r0','parser.py',771),
  ('boolean_expr_a -> boolean_expr_b','boolean_expr_a',1,'p_boolean_expr_a_r1','parser.py',776),
  ('boolean_expr_b -> boolean_expr_b AND boolean_expr_c','boolean_expr_b',3,'p_boolean_expr_b_r0','parser.py',781),
  ('boolean_expr_b -> boolean_expr_c','boolean_expr_b',1,'p_boolean_expr_b_r1','parser.py',786),
  ('boolean_expr_c -> boolean_expr_c EQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r0','parser.py',791),
  ('boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r1','parser.py',796),
  ('boolean_expr_c -> boolean_expr_d','boolean_expr_c',1,'p_boolean_expr_c_r2','parser.py',801),
  ('boolean_expr_d -> NOT boolean_expr_e','boolean_expr_d',2,'p_boolean_expr_d_r0','parser.py',806),
  ('boolean_expr_d -> boolean_expr_e','boolean_expr_d',1,'p_boolean_expr_d_r1','parser.py',811),
  ('boolean_expr_e -> atomic_boolean_expr','boolean_expr_e',1,'p_boolean_expr_e_r0','parser.py',816),
  ('boolean_expr_e -> LP1 boolean_expr RP1','boolean_expr_e',3,'p_boolean_expr_e_r1','parser.py',821),
  ('atomic_boolean_expr -> constants','atomic_boolean_expr',1,'p_atomic_boolean_expr_r0','parser.py',826),
  ('atomic_boolean_expr -> unary_pred LP1 args RP1','atomic_boolean_expr',4,'p_atomic_boolean_expr_r1','parser.py',831),
  ('atomic_boolean_expr -> unary_pred IMPLIES unary_pred','atomic_boolean_expr',3,'p_atomic_boolean_expr_r2','parser.py',836),
  ('atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r3','parser.py',841),
  ('atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r4','parser.py',846),
  ('constants -> TRUE','constants',1,'p_constants_r0','parser.py',851),
  ('constants -> FALSE','constants',1,'p_constants_r1','parser.py',856),
  ('args -> args COMMA arg','args',3,'p_args_r0','parser.py',861),
  ('args -> arg','args',1,'p_args_r1','parser.py',866),
  ('arg -> ID','arg',1,'p_arg_r0','parser.py',871),
  ('assign_stmt -> names ASSIGN assign_expr S_COLON','assign_stmt',4,'p_assign_stmt_r0','parser.py',876),
  ('names -> names COMMA name','names',3,'p_names_r0','parser.py',881),
  ('names -> name','names',1,'p_names_r1','parser.py',886),
  ('name -> ID','name',1,'p_name_r0','parser.py',891),
  ('assign_expr -> names ASSIGN assign_expr','assign_expr',3,'p_assign_expr_r0','parser.py',896),
  ('assign_expr -> names','assign_expr',1,'p_assign_expr_r1','parser.py',901),
  ('trait_decl_stmt -> error S_COLON','trait_decl_stmt',2,'p_trait_decl_stmt_err0','parser.py',909),
  ('trait_decl_stmt -> error LP2 error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err1','parser.py',914),
  ('assign_stmt -> names ASSIGN error S_COLON','assign_stmt',4,'p_assign_expr_err0','parser.py',920),
  ('trait_decl -> TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',8,'p_trait_decl_err0','parser.py',926),
  ('trait_decl -> TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON','trait_decl',9,'p_trait_decl_err1','parser.py',931),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 error S_COLON','trait_decl',7,'p_trait_decl_err2','parser.py',936),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 LP2 trait_decl_stmts error S_COLON','trait_decl',9,'p_trait_decl_err3','parser.py',941),
  ('trait_decl -> TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_err4','parser.py',946),
  ('trait_decl -> TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_err5','parser.py',951),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON error S_COLON','trait_decl',8,'p_trait_decl_err6','parser.py',956),
  ('trait_decl_stmt -> FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err2','parser.py',962),
  ('trait_decl_stmt -> FN COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err3','parser.py',967),
  ('trait_decl_stmt -> VAR COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err4','parser.py',972),
  ('trait_decl_stmt -> VAR COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err5','parser.py',977),
  ('trait_decl_stmt -> CLS_FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err6','parser.py',982),
  ('trait_decl_stmt -> CLS_FN COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err7','parser.py',987),
  ('trait_decl_stmt -> CLS_VAR COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err8','parser.py',992),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err9','parser.py',997),
  ('trait_decl_stmt -> STATIC_FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err10','parser.py',1002),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 error S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err11','parser.py',1007),
  ('decl_fn_stmt -> fn_id error RP1 S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err0','parser.py',1013),
  ('decl_fn_stmt -> fn_id LP1 error S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err1','parser.py',1018),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err2','parser.py',1023),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err3','parser.py',1028),
  ('decl_fn_stmt -> fn_id error RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err4','parser.py',1033),
  ('decl_fn_stmt -> fn_id LP3 error LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err5','parser.py',1038),
  ('decl_stmt -> error RP3 S_COLON','decl_stmt',3,'p_decl_stmt_err0','parser.py',1075),
  ('decl_stmt -> error RP3 COLON unary_pred S_COLON','decl_stmt',5,'p_decl_stmt_err1','parser.py',1080),
  ('decl_stmt -> LP3 error S_COLON','decl_stmt',3,'p_decl_stmt_err2','parser.py',1085),
  ('decl_static_fn_stmt -> static_fn_id error RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err0','parser.py',1091),
  ('decl_static_fn_stmt -> static_fn_id LP1 error S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err1','parser.py',1096),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err2','parser.py',1101),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err3','parser.py',1106),
  ('decl_static_fn_stmt -> static_fn_id error RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err4','parser.py',1111),
  ('decl_static_fn_stmt -> static_fn_id LP3 error LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err5','parser.py',1116),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CLS_FN CLS_VAR COLON COMMA DOT EQ EXTENDS FALSE FN GENERATE ID IMPLIES LP1 LP2 LP3 NEQ NONE NOT OR PASS PRINTINFO PROGRAM_BEGIN PROGRAM_END RP1 RP2 RP3 R_ARROW STAR STATIC_FN S_COLON TRAIT TRAIT_OF TRUE VAR WS XOR program : PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON  program : WS  stmts : stmts stmt  stmts : stmt  stmt : trait_decl  stmt : print_stmt  stmt : generate_stmt  stmt : assign_stmt  stmt : S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_id : ID  class_args : main_arg COMMA sub_args  class_args : main_arg  main_arg : ID  sub_args : necessary_args COMMA optional_args sub_args : necessary_args  sub_args : optional_args  necessary_args : necessary_args COMMA necessary_arg  necessary_args : necessary_arg  necessary_arg : ID  optional_args : optional_args COMMA optional_arg  optional_args : optional_arg  optional_arg : ID ASSIGN unary_pred trait_decl_stmts : trait_decl_stmts trait_decl_stmt  trait_decl_stmts : trait_decl_stmt  trait_decl_stmts : PASS S_COLON  trait_decl_stmt : FN COLON LP2 decl_fn_stmts RP2 S_COLON  trait_decl_stmt : VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON  trait_decl_stmt : CLS_VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON  decl_fn_stmts : decl_fn_stmts decl_fn_stmt  decl_fn_stmts : decl_fn_stmt  decl_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmts : decl_cls_fn_stmts decl_cls_fn_stmt  decl_cls_fn_stmts : decl_cls_fn_stmt  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  fn_id : ID  pred_args : main_pred COMMA next_preds  pred_args : main_pred  main_pred : ID  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds next_preds : next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA STAR  next_preds : next_anonymous_necessary_preds  next_preds : next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_opt_preds  next_preds : STAR COMMA next_named_preds  next_preds : STAR  next_anonymous_necessary_preds : next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred  next_anonymous_necessary_preds : next_anonymous_necessary_pred  next_anonymous_necessary_pred : unary_pred  next_anonymous_opt_preds : next_anonymous_opt_preds COMMA next_anonymous_opt_pred  next_anonymous_opt_preds : next_anonymous_opt_pred  next_anonymous_opt_pred : ASSIGN unary_pred  next_named_preds : next_named_preds COMMA next_named_pred  next_named_preds : next_named_pred  next_named_pred : next_named_necessary_pred  next_named_pred : next_named_opt_pred  next_named_necessary_pred : arg_name COLON unary_pred  next_named_opt_pred : arg_name COLON ASSIGN unary_pred  arg_name : ID  type_var_args : type_var_args COMMA type_var_arg  type_var_args : type_var_arg  type_var_arg : type_var_id  type_var_arg : type_var_id COLON unary_pred  type_var_id : ID  unary_pred : pred_name  unary_pred : unnamed_pred  unnamed_pred : pred_name LP3 args RP3  unnamed_pred : LP3 pred_expr RP3  unnamed_pred : TRAIT_OF LP1 var_expr RP1  unnamed_pred : NONE  pred_name : ID  pred_expr : pred_expr OR pred_expr_a  pred_expr : pred_expr_a  pred_expr_a : pred_expr_a AND pred_expr_b  pred_expr_a : pred_expr_b  pred_expr_b : NOT pred_expr_c  pred_expr_b : pred_expr_c  pred_expr_c : unary_pred  pred_expr_c : LP1 pred_expr RP1  var_expr : unary_pred DOT member_var_name  member_var_name : ID  decl_stmts : decl_stmts decl_stmt  decl_stmts : decl_stmt  decl_stmt : var_id S_COLON  decl_stmt : var_id COLON unary_pred S_COLON  decl_stmt : LP3 vars_id RP3 S_COLON  decl_stmt : LP3 vars_id RP3 COLON unary_pred S_COLON  vars_id : vars_id COMMA var_id  vars_id : var_id  var_id : ID  decl_static_fn_stmts : decl_static_fn_stmts decl_static_fn_stmt  decl_static_fn_stmts : decl_static_fn_stmt  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON  static_fn_id : ID  print_stmt : PRINTINFO to_print S_COLON  generate_stmt : GENERATE to_print S_COLON  to_print : ID  to_print : boolean_expr  to_print : unnamed_pred  boolean_expr : boolean_expr OR boolean_expr_a  boolean_expr : boolean_expr_a  boolean_expr_a : boolean_expr_a XOR boolean_expr_b  boolean_expr_a : boolean_expr_b  boolean_expr_b : boolean_expr_b AND boolean_expr_c  boolean_expr_b : boolean_expr_c  boolean_expr_c : boolean_expr_c EQ boolean_expr_d  boolean_expr_c : boolean_expr_c NEQ boolean_expr_d  boolean_expr_c : boolean_expr_d  boolean_expr_d : NOT boolean_expr_e  boolean_expr_d : boolean_expr_e  boolean_expr_e : atomic_boolean_expr  boolean_expr_e : LP1 boolean_expr RP1  atomic_boolean_expr : constants  atomic_boolean_expr : unary_pred LP1 args RP1  atomic_boolean_expr : unary_pred IMPLIES unary_pred  atomic_boolean_expr : LP1 unary_pred EQ unary_pred RP1  atomic_boolean_expr : LP1 unary_pred NEQ unary_pred RP1  constants : TRUE  constants : FALSE  args : args COMMA unary_pred  args : unary_pred  assign_stmt : names ASSIGN assign_expr S_COLON  names : names COMMA name  names : name  name : ID  assign_expr : names ASSIGN assign_expr  assign_expr : names  trait_decl : TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  decl_fn_stmt : fn_id error RP1 S_COLON  decl_fn_stmt : fn_id LP1 error S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_fn_stmt : fn_id error RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 error LP1 pred_args RP1 S_COLON  decl_stmt :  error RP3 S_COLON  decl_stmt :  error RP3 COLON unary_pred S_COLON  decl_stmt :  LP3 error S_COLON  decl_static_fn_stmt : static_fn_id error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 error S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_static_fn_stmt : static_fn_id error RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 error LP1 next_preds RP1 S_COLON \n    boolean_expr : error boolean_expr_e\n                 | boolean_expr OR error\n    boolean_expr_a : boolean_expr_a XOR error\n    boolean_expr_b : boolean_expr_b AND error\n    boolean_expr_c : boolean_expr_c EQ error\n                   | boolean_expr_c NEQ error\n    boolean_expr_d : NOT error\n    boolean_expr_e : LP1 error RP1\n    \n    atomic_boolean_expr : error LP1 args RP1\n                        | error IMPLIES unary_pred\n    \n    atomic_boolean_expr : unary_pred error unary_pred\n    \n    print_stmt : PRINTINFO error S_COLON\n    generate_stmt : GENERATE error S_COLON\n    \n    vars_id : error COMMA var_id\n            | vars_id COMMA error\n    type_var_args : error COMMA type_var_arg\n                  | type_var_args COMMA error\n    next_anonymous_necessary_preds : error COMMA next_anonymous_necessary_pred\n    next_anonymous_opt_preds : error COMMA next_anonymous_opt_pred\n                             | next_anonymous_opt_preds COMMA error\n    next_named_preds : error COMMA next_named_pred\n                     | next_named_preds COMMA error\n\n    pred_args : error COMMA next_preds\n    necessary_args : error COMMA necessary_arg\n    optional_args : error COMMA optional_arg\n                  | optional_args COMMA error\n    \n    next_named_necessary_pred : name ASSIGN error unary_pred\n    \n    next_named_opt_pred : name ASSIGN COLON error unary_pred\n    \n    pred_expr : error pred_expr_c\n              | pred_expr OR error\n    pred_expr_a : pred_expr_a AND error\n    pred_expr_b : NOT error\n    pred_expr_c : LP1 error RP1\n    \n    assign_stmt : names ASSIGN error S_COLON\n    \n    decl_fn_stmt : fn_id LP1 RP1 error S_COLON\n                 | fn_id LP1 RP1 error R_ARROW unary_pred S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON\n    \n    decl_cls_fn_stmt : fn_id LP1 RP1 error S_COLON\n                     | fn_id LP1 RP1 error R_ARROW unary_pred S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON\n    \n    decl_static_fn_stmt : static_fn_id LP3 RP3 error S_COLON\n    decl_fn_stmt : fn_id LP3 RP3 error S_COLON\n    decl_cls_fn_stmt : fn_id LP3 RP3 error S_COLON\n    \n    decl_fn_stmt : error S_COLON\n    decl_cls_fn_stmt : error S_COLON\n    decl_static_fn_stmt : error S_COLON\n    decl_stmt : error S_COLON\n    \n    decl_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW error S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON\n    decl_cls_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW error S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON\n    decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 R_ARROW error S_COLON\n                        | static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW error S_COLON\n    \n    decl_stmt : var_id COLON error S_COLON\n              | LP3 vars_id RP3 COLON error S_COLON\n    \n    trait_decl_stmt : FN COLON LP2 RP2 error S_COLON\n                    | CLS_FN COLON LP2 RP2 error S_COLON\n                    | STATIC_FN COLON LP2 RP2 error S_COLON\n                    | VAR COLON LP2 RP2 error S_COLON\n                    | CLS_VAR COLON LP2 RP2 error S_COLON\n    '
    
_lr_action_items = {'PROGRAM_BEGIN':([0,],[2,]),'WS':([0,],[3,]),'$end':([1,3,47,],[0,-2,-1,]),'S_COLON':([2,4,5,6,7,8,9,10,11,16,17,18,19,22,23,24,25,26,27,28,33,34,35,36,38,39,41,42,43,44,50,52,53,56,57,58,77,78,82,83,84,85,86,87,96,97,98,99,100,103,113,114,117,118,119,120,121,122,124,125,127,128,134,136,143,147,148,162,172,173,182,193,204,211,213,218,224,226,228,231,238,242,243,246,248,253,255,256,261,263,265,269,270,271,273,278,279,280,285,294,300,301,302,319,321,331,333,334,335,336,342,348,356,357,359,360,370,391,392,401,424,425,426,429,430,431,432,435,436,437,440,441,452,453,454,455,456,460,461,469,470,483,504,505,506,507,508,509,510,513,514,],[4,5,-9,5,-4,-5,-6,-7,-8,-144,-145,47,-3,50,52,-117,-118,-119,-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,82,83,-115,-178,-167,-78,-79,-84,-129,-173,-116,-179,-147,127,128,-143,-176,-120,-168,-122,-169,-81,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,-142,-200,-175,-80,-82,-134,-146,184,-136,-137,204,213,-148,243,-149,249,257,258,-103,266,274,278,-10,281,282,296,297,298,304,306,307,314,315,316,317,-150,333,334,337,346,349,350,351,361,363,372,-11,-151,374,376,385,390,393,395,398,399,421,433,434,442,457,458,459,462,463,464,465,466,467,468,471,472,484,486,487,488,489,490,492,494,496,502,515,516,517,518,519,520,521,522,523,]),'TRAIT':([4,5,6,7,8,9,10,11,19,50,52,82,83,127,128,204,213,243,278,333,334,],[12,-9,12,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-200,-148,-149,-10,-150,-11,-151,]),'PRINTINFO':([4,5,6,7,8,9,10,11,19,50,52,82,83,127,128,204,213,243,278,333,334,],[13,-9,13,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-200,-148,-149,-10,-150,-11,-151,]),'GENERATE':([4,5,6,7,8,9,10,11,19,50,52,82,83,127,128,204,213,243,278,333,334,],[14,-9,14,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-200,-148,-149,-10,-150,-11,-151,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,19,23,30,32,37,44,45,46,48,50,52,54,55,59,60,61,64,67,69,70,72,74,75,76,79,80,81,82,83,92,93,104,105,110,115,116,126,127,128,131,135,144,150,152,178,179,180,181,204,205,206,207,208,209,213,215,216,219,222,225,227,229,232,234,236,239,243,247,249,250,251,254,257,258,259,264,266,267,268,272,274,275,276,278,298,299,303,304,305,327,333,334,337,338,339,341,343,344,345,346,347,349,350,351,352,361,362,363,364,365,367,371,372,373,374,375,376,377,381,385,390,393,394,395,396,397,398,399,400,419,421,433,434,442,444,446,447,448,449,457,458,459,462,463,464,465,466,467,468,471,472,480,481,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,501,502,503,515,516,517,518,519,520,521,522,523,],[17,-9,17,-4,-5,-6,-7,-8,21,24,24,-3,58,58,58,58,58,17,17,90,-115,-178,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-116,-179,58,58,58,58,58,58,58,17,-142,-200,159,58,171,58,58,159,200,159,58,-148,221,228,221,228,241,-149,200,221,-34,228,-96,228,221,-40,228,241,-105,-10,-33,-212,287,293,-95,-215,-97,58,-39,-213,287,293,-104,-214,58,293,-150,-158,58,228,-160,228,58,-11,-151,-153,58,58,293,287,293,58,-152,287,-98,-222,-99,58,-110,58,-162,58,58,418,58,-161,58,-35,58,-201,58,287,-210,-159,-41,58,-205,58,287,-211,-106,58,58,-209,-100,-223,-111,418,418,418,418,58,-36,-216,-202,-155,-154,-157,-156,-42,-218,-206,-107,-220,58,58,-112,58,-164,-163,-166,-165,-37,58,-203,58,-43,58,-207,58,418,58,-108,58,-113,-38,-217,-204,-44,-219,-208,-109,-221,]),'PROGRAM_END':([5,6,7,8,9,10,11,19,50,52,82,83,127,128,204,213,243,278,333,334,],[-9,18,-4,-5,-6,-7,-8,-3,-115,-178,-116,-179,-142,-200,-148,-149,-10,-150,-11,-151,]),'error':([13,14,20,21,23,24,26,29,30,32,33,37,40,44,45,54,56,57,58,59,60,67,69,72,73,74,75,76,88,89,90,95,103,104,105,131,136,143,153,154,155,156,158,159,178,179,195,196,198,199,201,202,203,205,206,207,208,209,216,217,219,220,221,222,223,225,227,229,230,232,234,235,236,237,239,240,241,247,249,250,251,254,257,258,259,264,266,267,268,272,274,275,276,284,289,298,303,304,309,312,329,337,338,339,340,341,343,346,347,349,350,351,352,361,363,365,366,367,369,371,372,373,374,375,376,381,385,390,393,394,395,397,398,399,400,419,421,428,433,434,439,442,443,444,446,447,450,457,458,459,462,463,464,465,466,467,468,471,472,482,484,486,487,488,489,490,491,492,494,495,496,498,502,503,515,516,517,518,519,520,521,522,523,],[23,44,49,-12,51,-84,-79,-78,64,72,-83,78,81,51,86,72,-78,-79,-84,98,100,108,110,51,81,118,120,122,130,-14,-15,81,-81,138,140,157,-80,-82,-13,-17,-18,-20,-23,-21,197,199,-16,-19,-22,-192,-190,-191,-24,218,224,231,224,238,218,248,-34,252,-45,224,255,-96,261,231,265,-40,224,270,238,273,-105,277,-114,-33,-212,285,290,-95,-215,-97,301,-39,-213,310,313,-104,-214,321,330,336,342,-158,354,-160,357,359,370,-153,378,378,382,384,310,-152,310,-98,-222,-99,392,-110,-162,407,410,413,420,378,-161,378,-35,425,-201,429,-210,-159,-41,436,-205,310,-211,-106,441,453,-209,461,-100,-223,470,-111,410,413,413,477,481,-36,-216,-202,-155,-154,-157,-156,-42,-218,-206,-107,-220,501,-112,-164,-163,-166,-165,-37,506,-203,-43,509,-207,413,-108,514,-113,-38,-217,-204,-44,-219,-208,-109,-221,]),'LP3':([13,14,23,24,29,30,32,37,44,54,55,56,58,59,60,61,64,67,69,70,72,74,75,76,79,80,81,92,93,104,105,110,115,116,135,150,152,181,206,208,220,221,222,225,233,234,240,241,254,257,258,259,275,298,299,304,327,338,339,345,349,350,351,352,362,364,365,371,373,375,377,390,394,396,400,419,433,434,449,480,481,485,491,493,495,497,501,503,],[30,30,30,-84,61,30,30,30,30,30,30,61,-84,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,227,227,251,-45,227,-96,268,227,276,-114,-95,-215,-97,30,30,-158,30,-160,30,30,30,30,-98,-222,-99,30,30,30,30,30,30,30,30,-159,30,30,30,30,-100,-223,30,30,30,30,30,30,30,30,30,30,]),'TRAIT_OF':([13,14,23,30,32,37,44,54,55,59,60,61,64,67,69,70,72,74,75,76,79,80,81,92,93,104,105,110,115,116,135,150,152,181,259,275,299,327,338,339,345,352,362,364,365,371,373,375,377,394,396,400,419,449,480,481,485,491,493,495,497,501,503,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NONE':([13,14,23,30,32,37,44,54,55,59,60,61,64,67,69,70,72,74,75,76,79,80,81,92,93,104,105,110,115,116,135,150,152,181,259,275,299,327,338,339,345,352,362,364,365,371,373,375,377,394,396,400,419,449,480,481,485,491,493,495,497,501,503,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'NOT':([13,14,30,32,54,59,60,69,74,75,76,104,105,],[37,37,67,37,37,37,37,67,37,37,37,67,67,]),'LP1':([13,14,20,21,23,24,26,29,30,31,32,33,37,40,44,51,54,56,57,58,59,60,64,67,69,72,73,74,75,76,78,95,98,100,103,104,105,110,118,120,122,136,143,220,221,233,240,241,290,295,330,332,340,358,369,],[32,32,48,-12,54,-84,-79,-78,69,70,32,-83,32,79,54,93,32,-78,-79,-84,32,32,69,69,69,54,79,32,32,32,93,79,93,93,-81,69,69,69,93,93,93,-80,-82,250,-45,267,275,-114,343,347,371,373,381,397,419,]),'TRUE':([13,14,23,32,37,44,54,59,60,72,74,75,76,],[41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FALSE':([13,14,23,32,37,44,54,59,60,72,74,75,76,],[42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ASSIGN':([15,16,17,84,87,159,200,275,338,339,364,365,366,371,373,417,418,419,443,445,449,],[45,-144,-145,126,-143,181,181,327,327,327,327,327,327,327,327,450,-145,327,327,327,480,]),'COMMA':([15,16,17,33,56,57,58,84,87,89,90,94,95,101,102,103,123,136,143,154,155,156,157,158,159,169,195,196,197,198,199,201,202,203,228,260,261,262,285,286,287,288,290,291,292,293,310,311,313,320,321,322,323,324,325,326,328,330,353,354,355,368,378,383,384,387,388,402,403,404,405,406,407,408,409,410,411,412,413,414,415,429,453,473,474,475,476,477,478,479,499,500,511,512,],[46,-144,-145,-83,-78,-79,-84,46,-143,131,-15,135,-141,135,-141,-81,135,-80,-82,178,179,-20,180,-23,-21,-140,179,-19,215,-22,-192,-190,-191,-24,-103,303,305,-102,338,339,-48,341,344,-74,-75,-77,338,341,344,-62,364,365,366,367,-61,-64,341,344,-101,-181,-180,-65,364,-73,-183,-182,-76,-184,-185,443,444,-60,445,446,-63,-186,447,-67,448,-68,-69,338,364,498,447,447,-66,-188,-187,-70,-71,-193,447,-194,]),'IMPLIES':([23,24,26,29,33,40,44,51,56,57,58,72,73,78,95,98,100,103,118,120,122,136,143,],[55,-84,-79,-78,-83,80,55,55,-78,-79,-84,55,80,55,80,55,55,-81,55,55,55,-80,-82,]),'OR':([25,27,28,33,34,35,36,38,39,41,42,53,56,57,58,62,63,65,66,68,71,77,78,96,97,98,99,100,103,106,107,108,109,113,114,117,118,119,120,121,122,124,125,134,136,137,138,139,140,141,142,143,147,172,173,],[59,-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,-167,-78,-79,-84,104,-86,-90,-88,-91,59,-129,-173,-176,-120,-168,-122,-169,-81,-195,-89,-198,104,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,-175,-80,-85,-196,-87,-197,-92,-199,-82,-134,-136,-137,]),'RP1':([27,28,33,34,35,36,38,39,41,42,53,56,57,58,63,65,66,68,71,72,77,78,88,89,90,94,95,96,97,98,99,100,102,103,106,107,108,109,110,111,113,114,117,118,119,120,121,122,123,124,125,134,136,137,138,139,140,141,142,143,145,146,147,153,154,155,156,158,159,169,170,171,172,173,195,196,198,199,201,202,203,250,252,267,275,277,283,286,287,308,318,320,322,323,324,325,326,368,379,380,381,382,386,389,397,402,403,404,405,406,408,409,410,411,412,414,415,419,420,422,423,427,438,451,473,474,475,476,477,478,479,499,500,511,512,],[-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,-167,-78,-79,-84,-86,-90,-88,-91,113,114,-129,-173,129,-14,-15,134,-141,-176,-120,-168,-122,-169,-141,-81,-195,-89,-198,141,142,143,-132,-174,-124,-170,-126,-171,-127,-172,147,-135,-177,-175,-80,-85,-196,-87,-197,-92,-199,-82,172,173,-134,-13,-17,-18,-20,-23,-21,-140,-93,-94,-136,-137,-16,-19,-22,-192,-190,-191,-24,284,294,309,319,331,335,-47,-48,356,360,-62,-54,-57,-59,-61,-64,-65,-189,-46,428,430,431,432,439,-184,-185,-51,-53,-60,-56,-63,-186,-58,-67,-68,-69,452,454,455,456,460,469,483,-50,-52,-55,-66,-188,-187,-70,-71,-193,-49,-194,]),'XOR':([27,28,33,34,35,36,38,39,41,42,56,57,58,77,78,96,97,99,100,103,113,114,117,118,119,120,121,122,124,125,134,136,143,147,172,173,],[60,-130,-83,-123,-125,-128,-131,-133,-138,-139,-78,-79,-84,-129,-173,-176,60,-122,-169,-81,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,-175,-80,-82,-134,-136,-137,]),'EQ':([28,33,35,36,38,39,41,42,56,57,58,73,77,78,95,96,103,113,114,117,119,120,121,122,124,125,134,136,143,147,172,173,],[-130,-83,75,-128,-131,-133,-138,-139,-78,-79,-84,115,-129,-173,115,-176,-81,-132,-174,75,-126,-171,-127,-172,-135,-177,-175,-80,-82,-134,-136,-137,]),'NEQ':([28,33,35,36,38,39,41,42,56,57,58,73,77,78,95,96,103,113,114,117,119,120,121,122,124,125,134,136,143,147,172,173,],[-130,-83,76,-128,-131,-133,-138,-139,-78,-79,-84,116,-129,-173,116,-176,-81,-132,-174,76,-126,-171,-127,-172,-135,-177,-175,-80,-82,-134,-136,-137,]),'AND':([28,33,34,35,36,38,39,41,42,56,57,58,63,65,66,68,77,78,96,99,103,107,108,113,114,117,118,119,120,121,122,124,125,134,136,137,139,140,141,142,143,147,172,173,],[-130,-83,74,-125,-128,-131,-133,-138,-139,-78,-79,-84,105,-90,-88,-91,-129,-173,-176,74,-81,-89,-198,-132,-174,-124,-170,-126,-171,-127,-172,-135,-177,-175,-80,105,-87,-197,-92,-199,-82,-134,-136,-137,]),'RP3':([33,56,57,58,62,63,65,66,68,101,102,103,106,107,108,136,137,138,139,140,141,142,143,169,224,228,251,252,260,262,268,276,277,288,291,292,293,311,328,353,354,355,383,384,387,388,],[-83,-78,-79,-84,103,-86,-90,-88,-91,136,-141,-81,-195,-89,-198,-80,-85,-196,-87,-197,-92,-199,-82,-140,256,-103,289,295,302,-102,312,329,332,340,-74,-75,-77,358,369,-101,-181,-180,-73,-183,-182,-76,]),'DOT':([33,56,57,58,103,112,136,143,],[-83,-78,-79,-84,-81,144,-80,-82,]),'COLON':([33,49,56,57,58,103,129,133,136,143,163,164,165,166,167,175,177,226,228,256,292,293,302,416,418,450,],[-83,91,-78,-79,-84,-81,149,168,-80,-82,185,186,187,188,189,192,194,259,-103,299,345,-77,352,449,-72,482,]),'EXTENDS':([49,129,130,],[92,150,152,]),'LP2':([91,130,149,168,185,186,187,188,189,192,194,],[132,151,174,190,205,206,207,208,209,212,214,]),'PASS':([132,151,174,190,212,214,],[162,162,162,162,162,162,]),'FN':([132,151,160,161,174,176,183,184,190,191,210,212,214,244,245,281,282,296,297,306,307,314,315,316,317,],[163,163,163,-26,163,163,-25,-27,163,163,163,163,163,163,163,-28,-224,-29,-227,-30,-225,-31,-228,-32,-226,]),'VAR':([132,151,160,161,174,176,183,184,190,191,210,212,214,244,245,281,282,296,297,306,307,314,315,316,317,],[164,164,164,-26,164,164,-25,-27,164,164,164,164,164,164,164,-28,-224,-29,-227,-30,-225,-31,-228,-32,-226,]),'CLS_FN':([132,151,160,161,174,176,183,184,190,191,210,212,214,244,245,281,282,296,297,306,307,314,315,316,317,],[165,165,165,-26,165,165,-25,-27,165,165,165,165,165,165,165,-28,-224,-29,-227,-30,-225,-31,-228,-32,-226,]),'CLS_VAR':([132,151,160,161,174,176,183,184,190,191,210,212,214,244,245,281,282,296,297,306,307,314,315,316,317,],[166,166,166,-26,166,166,-25,-27,166,166,166,166,166,166,166,-28,-224,-29,-227,-30,-225,-31,-228,-32,-226,]),'STATIC_FN':([132,151,160,161,174,176,183,184,190,191,210,212,214,244,245,281,282,296,297,306,307,314,315,316,317,],[167,167,167,-26,167,167,-25,-27,167,167,167,167,167,167,167,-28,-224,-29,-227,-30,-225,-31,-228,-32,-226,]),'RP2':([160,161,176,183,184,191,205,206,207,208,209,210,216,219,222,225,229,232,234,236,239,244,245,247,249,254,257,258,264,266,272,274,281,282,296,297,298,304,306,307,314,315,316,317,337,346,349,350,351,361,363,372,374,376,385,390,393,395,398,399,421,433,434,442,457,458,459,462,463,464,465,466,467,468,471,472,484,486,487,488,489,490,492,494,496,502,515,516,517,518,519,520,521,522,523,],[182,-26,193,-25,-27,211,217,223,230,235,237,242,246,-34,253,-96,263,-40,269,271,-105,279,280,-33,-212,-95,-215,-97,-39,-213,-104,-214,-28,-224,-29,-227,-158,-160,-30,-225,-31,-228,-32,-226,-153,-152,-98,-222,-99,-110,-162,-161,-35,-201,-210,-159,-41,-205,-211,-106,-209,-100,-223,-111,-36,-216,-202,-155,-154,-157,-156,-42,-218,-206,-107,-220,-112,-164,-163,-166,-165,-37,-203,-43,-207,-108,-113,-38,-217,-204,-44,-219,-208,-109,-221,]),'STAR':([275,338,339,365,366,371,373,419,443,],[324,324,324,405,408,324,324,324,473,]),'R_ARROW':([319,335,336,356,357,360,452,460,461,469,470,483,],[362,375,377,394,396,400,485,491,493,495,497,503,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([4,],[6,]),'stmt':([4,6,],[7,19,]),'trait_decl':([4,6,],[8,8,]),'print_stmt':([4,6,],[9,9,]),'generate_stmt':([4,6,],[10,10,]),'assign_stmt':([4,6,],[11,11,]),'names':([4,6,45,126,],[15,15,84,84,]),'name':([4,6,45,46,126,367,444,446,447,448,498,],[16,16,16,87,16,417,417,417,417,417,417,]),'trait_id':([12,],[20,]),'to_print':([13,14,],[22,43,]),'boolean_expr':([13,14,32,54,],[25,25,71,71,]),'unnamed_pred':([13,14,23,30,32,37,44,54,55,59,60,61,64,67,69,70,72,74,75,76,79,80,81,92,93,104,105,110,115,116,135,150,152,181,259,275,299,327,338,339,345,352,362,364,365,371,373,375,377,394,396,400,419,449,480,481,485,491,493,495,497,501,503,],[26,26,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'boolean_expr_a':([13,14,32,54,59,],[27,27,27,27,97,]),'boolean_expr_e':([13,14,23,32,37,44,54,59,60,72,74,75,76,],[28,28,53,28,77,53,28,28,28,53,28,28,28,]),'pred_name':([13,14,23,30,32,37,44,54,55,59,60,61,64,67,69,70,72,74,75,76,79,80,81,92,93,104,105,110,115,116,135,150,152,181,259,275,299,327,338,339,345,352,362,364,365,371,373,375,377,394,396,400,419,449,480,481,485,491,493,495,497,501,503,],[29,29,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'boolean_expr_b':([13,14,32,54,59,60,],[34,34,34,34,34,99,]),'boolean_expr_c':([13,14,32,54,59,60,74,],[35,35,35,35,35,35,117,]),'boolean_expr_d':([13,14,32,54,59,60,74,75,76,],[36,36,36,36,36,36,36,119,121,]),'atomic_boolean_expr':([13,14,23,32,37,44,54,59,60,72,74,75,76,],[38,38,38,38,38,38,38,38,38,38,38,38,38,]),'constants':([13,14,23,32,37,44,54,59,60,72,74,75,76,],[39,39,39,39,39,39,39,39,39,39,39,39,39,]),'unary_pred':([13,14,23,30,32,37,44,54,55,59,60,61,64,67,69,70,72,74,75,76,79,80,81,92,93,104,105,110,115,116,135,150,152,181,259,275,299,327,338,339,345,352,362,364,365,371,373,375,377,394,396,400,419,449,480,481,485,491,493,495,497,501,503,],[40,40,40,68,73,40,40,95,96,40,40,102,68,68,68,112,40,40,40,40,102,124,125,133,102,68,68,68,145,146,169,175,177,203,300,320,348,368,320,320,388,391,401,320,320,320,320,424,426,435,437,440,320,479,499,500,504,505,507,508,510,512,513,]),'pred_expr':([30,69,],[62,109,]),'pred_expr_a':([30,69,104,],[63,63,137,]),'pred_expr_c':([30,64,67,69,104,105,110,],[65,106,107,65,65,65,106,]),'pred_expr_b':([30,69,104,105,],[66,66,66,139,]),'assign_expr':([45,126,],[85,148,]),'class_args':([48,],[88,]),'main_arg':([48,],[89,]),'args':([54,61,79,93,],[94,101,123,94,]),'var_expr':([70,],[111,]),'sub_args':([131,],[153,]),'necessary_args':([131,],[154,]),'optional_args':([131,178,],[155,195,]),'necessary_arg':([131,178,180,],[156,196,201,]),'optional_arg':([131,178,179,180,215,],[158,158,198,202,202,]),'trait_decl_stmts':([132,151,174,190,212,214,],[160,176,191,210,244,245,]),'trait_decl_stmt':([132,151,160,174,176,190,191,210,212,214,244,245,],[161,161,183,161,183,161,183,183,161,161,183,183,]),'member_var_name':([144,],[170,]),'decl_fn_stmts':([205,],[216,]),'decl_fn_stmt':([205,216,],[219,247,]),'fn_id':([205,207,216,229,],[220,233,220,233,]),'decl_stmts':([206,208,],[222,234,]),'decl_stmt':([206,208,222,234,],[225,225,254,254,]),'var_id':([206,208,222,227,234,303,305,],[226,226,226,262,226,353,355,]),'decl_cls_fn_stmts':([207,],[229,]),'decl_cls_fn_stmt':([207,229,],[232,264,]),'decl_static_fn_stmts':([209,],[236,]),'decl_static_fn_stmt':([209,236,],[239,272,]),'static_fn_id':([209,236,],[240,240,]),'vars_id':([227,],[260,]),'pred_args':([250,267,343,347,381,397,],[283,308,386,389,427,438,]),'main_pred':([250,267,343,347,381,397,],[286,286,286,286,286,286,]),'type_var_args':([251,268,276,],[288,311,328,]),'type_var_arg':([251,268,276,341,344,],[291,291,291,383,387,]),'type_var_id':([251,268,276,341,344,],[292,292,292,292,292,]),'next_preds':([275,338,339,371,373,419,],[318,379,380,422,423,451,]),'next_anonymous_necessary_preds':([275,338,339,371,373,419,],[322,322,322,322,322,322,]),'next_anonymous_opt_preds':([275,338,339,365,371,373,419,],[323,323,323,404,323,323,323,]),'next_anonymous_necessary_pred':([275,338,339,364,365,371,373,419,],[325,325,325,402,406,325,325,325,]),'next_anonymous_opt_pred':([275,338,339,364,365,366,371,373,419,443,445,],[326,326,326,403,326,409,326,326,326,409,403,]),'next_named_preds':([367,444,446,498,],[411,474,475,511,]),'next_named_pred':([367,444,446,447,448,498,],[412,412,412,476,478,412,]),'next_named_necessary_pred':([367,444,446,447,448,498,],[414,414,414,414,414,414,]),'next_named_opt_pred':([367,444,446,447,448,498,],[415,415,415,415,415,415,]),'arg_name':([367,444,446,447,448,498,],[416,416,416,416,416,416,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON','program',5,'p_program_r0','parser.py',164),
  ('program -> WS','program',1,'p_program_r1','parser.py',169),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_r0','parser.py',174),
  ('stmts -> stmt','stmts',1,'p_stmts_r1','parser.py',179),
  ('stmt -> trait_decl','stmt',1,'p_stmt_r0','parser.py',184),
  ('stmt -> print_stmt','stmt',1,'p_stmt_r1','parser.py',189),
  ('stmt -> generate_stmt','stmt',1,'p_stmt_r2','parser.py',194),
  ('stmt -> assign_stmt','stmt',1,'p_stmt_r3','parser.py',199),
  ('stmt -> S_COLON','stmt',1,'p_stmt_r4','parser.py',204),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_r0','parser.py',209),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_r1','parser.py',214),
  ('trait_id -> ID','trait_id',1,'p_trait_id_r0','parser.py',219),
  ('class_args -> main_arg COMMA sub_args','class_args',3,'p_class_args_r0','parser.py',224),
  ('class_args -> main_arg','class_args',1,'p_class_args_r1','parser.py',229),
  ('main_arg -> ID','main_arg',1,'p_main_arg_r0','parser.py',234),
  ('sub_args -> necessary_args COMMA optional_args','sub_args',3,'p_sub_args_r0','parser.py',239),
  ('sub_args -> necessary_args','sub_args',1,'p_sub_args_r1','parser.py',244),
  ('sub_args -> optional_args','sub_args',1,'p_sub_args_r2','parser.py',249),
  ('necessary_args -> necessary_args COMMA necessary_arg','necessary_args',3,'p_necessary_args_r0','parser.py',254),
  ('necessary_args -> necessary_arg','necessary_args',1,'p_necessary_args_r1','parser.py',259),
  ('necessary_arg -> ID','necessary_arg',1,'p_necessary_arg_r0','parser.py',264),
  ('optional_args -> optional_args COMMA optional_arg','optional_args',3,'p_optional_args_r0','parser.py',269),
  ('optional_args -> optional_arg','optional_args',1,'p_optional_args_r1','parser.py',274),
  ('optional_arg -> ID ASSIGN unary_pred','optional_arg',3,'p_optional_arg_r0','parser.py',279),
  ('trait_decl_stmts -> trait_decl_stmts trait_decl_stmt','trait_decl_stmts',2,'p_trait_decl_stmts_r0','parser.py',284),
  ('trait_decl_stmts -> trait_decl_stmt','trait_decl_stmts',1,'p_trait_decl_stmts_r1','parser.py',289),
  ('trait_decl_stmts -> PASS S_COLON','trait_decl_stmts',2,'p_trait_decl_stmts_r2','parser.py',294),
  ('trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r0','parser.py',299),
  ('trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r1','parser.py',304),
  ('trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r2','parser.py',309),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r3','parser.py',314),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r4','parser.py',319),
  ('decl_fn_stmts -> decl_fn_stmts decl_fn_stmt','decl_fn_stmts',2,'p_decl_fn_stmts_r0','parser.py',324),
  ('decl_fn_stmts -> decl_fn_stmt','decl_fn_stmts',1,'p_decl_fn_stmts_r1','parser.py',329),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_fn_stmt',5,'p_decl_fn_stmt_r0','parser.py',334),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_r1','parser.py',339),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',8,'p_decl_fn_stmt_r2','parser.py',344),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_decl_fn_stmt_r3','parser.py',349),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt','decl_cls_fn_stmts',2,'p_decl_cls_fn_stmts_r0','parser.py',354),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmt','decl_cls_fn_stmts',1,'p_decl_cls_fn_stmts_r1','parser.py',359),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',5,'p_decl_cls_fn_stmt_r0','parser.py',364),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_decl_cls_fn_stmt_r1','parser.py',369),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',8,'p_decl_cls_fn_stmt_r2','parser.py',374),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_decl_cls_fn_stmt_r3','parser.py',379),
  ('fn_id -> ID','fn_id',1,'p_fn_id_r0','parser.py',384),
  ('pred_args -> main_pred COMMA next_preds','pred_args',3,'p_pred_args_r0','parser.py',389),
  ('pred_args -> main_pred','pred_args',1,'p_pred_args_r1','parser.py',394),
  ('main_pred -> ID','main_pred',1,'p_main_pred_r0','parser.py',399),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',7,'p_next_preds_r0','parser.py',404),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR','next_preds',5,'p_next_preds_r1','parser.py',409),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds','next_preds',3,'p_next_preds_r2','parser.py',414),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r3','parser.py',419),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR','next_preds',3,'p_next_preds_r4','parser.py',424),
  ('next_preds -> next_anonymous_necessary_preds','next_preds',1,'p_next_preds_r5','parser.py',429),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r6','parser.py',434),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR','next_preds',3,'p_next_preds_r7','parser.py',439),
  ('next_preds -> next_anonymous_opt_preds','next_preds',1,'p_next_preds_r8','parser.py',444),
  ('next_preds -> STAR COMMA next_named_preds','next_preds',3,'p_next_preds_r9','parser.py',449),
  ('next_preds -> STAR','next_preds',1,'p_next_preds_r10','parser.py',454),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_next_anonymous_necessary_preds_r0','parser.py',459),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_pred','next_anonymous_necessary_preds',1,'p_next_anonymous_necessary_preds_r1','parser.py',464),
  ('next_anonymous_necessary_pred -> unary_pred','next_anonymous_necessary_pred',1,'p_next_anonymous_necessary_pred_r0','parser.py',469),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_next_anonymous_opt_preds_r0','parser.py',474),
  ('next_anonymous_opt_preds -> next_anonymous_opt_pred','next_anonymous_opt_preds',1,'p_next_anonymous_opt_preds_r1','parser.py',479),
  ('next_anonymous_opt_pred -> ASSIGN unary_pred','next_anonymous_opt_pred',2,'p_next_anonymous_opt_pred_r0','parser.py',484),
  ('next_named_preds -> next_named_preds COMMA next_named_pred','next_named_preds',3,'p_next_named_preds_r0','parser.py',489),
  ('next_named_preds -> next_named_pred','next_named_preds',1,'p_next_named_preds_r1','parser.py',494),
  ('next_named_pred -> next_named_necessary_pred','next_named_pred',1,'p_next_named_pred_r0','parser.py',499),
  ('next_named_pred -> next_named_opt_pred','next_named_pred',1,'p_next_named_pred_r1','parser.py',504),
  ('next_named_necessary_pred -> arg_name COLON unary_pred','next_named_necessary_pred',3,'p_next_named_necessary_pred_r0','parser.py',509),
  ('next_named_opt_pred -> arg_name COLON ASSIGN unary_pred','next_named_opt_pred',4,'p_next_named_opt_pred_r0','parser.py',514),
  ('arg_name -> ID','arg_name',1,'p_arg_name_r0','parser.py',519),
  ('type_var_args -> type_var_args COMMA type_var_arg','type_var_args',3,'p_type_var_args_r0','parser.py',524),
  ('type_var_args -> type_var_arg','type_var_args',1,'p_type_var_args_r1','parser.py',529),
  ('type_var_arg -> type_var_id','type_var_arg',1,'p_type_var_arg_r0','parser.py',534),
  ('type_var_arg -> type_var_id COLON unary_pred','type_var_arg',3,'p_type_var_arg_r1','parser.py',539),
  ('type_var_id -> ID','type_var_id',1,'p_type_var_id_r0','parser.py',544),
  ('unary_pred -> pred_name','unary_pred',1,'p_unary_pred_r0','parser.py',549),
  ('unary_pred -> unnamed_pred','unary_pred',1,'p_unary_pred_r1','parser.py',554),
  ('unnamed_pred -> pred_name LP3 args RP3','unnamed_pred',4,'p_unnamed_pred_r0','parser.py',559),
  ('unnamed_pred -> LP3 pred_expr RP3','unnamed_pred',3,'p_unnamed_pred_r1','parser.py',564),
  ('unnamed_pred -> TRAIT_OF LP1 var_expr RP1','unnamed_pred',4,'p_unnamed_pred_r2','parser.py',569),
  ('unnamed_pred -> NONE','unnamed_pred',1,'p_unnamed_pred_r3','parser.py',574),
  ('pred_name -> ID','pred_name',1,'p_pred_name_r0','parser.py',579),
  ('pred_expr -> pred_expr OR pred_expr_a','pred_expr',3,'p_pred_expr_r0','parser.py',584),
  ('pred_expr -> pred_expr_a','pred_expr',1,'p_pred_expr_r1','parser.py',589),
  ('pred_expr_a -> pred_expr_a AND pred_expr_b','pred_expr_a',3,'p_pred_expr_a_r0','parser.py',594),
  ('pred_expr_a -> pred_expr_b','pred_expr_a',1,'p_pred_expr_a_r1','parser.py',599),
  ('pred_expr_b -> NOT pred_expr_c','pred_expr_b',2,'p_pred_expr_b_r0','parser.py',604),
  ('pred_expr_b -> pred_expr_c','pred_expr_b',1,'p_pred_expr_b_r1','parser.py',609),
  ('pred_expr_c -> unary_pred','pred_expr_c',1,'p_pred_expr_c_r0','parser.py',614),
  ('pred_expr_c -> LP1 pred_expr RP1','pred_expr_c',3,'p_pred_expr_c_r1','parser.py',619),
  ('var_expr -> unary_pred DOT member_var_name','var_expr',3,'p_var_expr_r0','parser.py',624),
  ('member_var_name -> ID','member_var_name',1,'p_member_var_name_r0','parser.py',629),
  ('decl_stmts -> decl_stmts decl_stmt','decl_stmts',2,'p_decl_stmts_r0','parser.py',634),
  ('decl_stmts -> decl_stmt','decl_stmts',1,'p_decl_stmts_r1','parser.py',639),
  ('decl_stmt -> var_id S_COLON','decl_stmt',2,'p_decl_stmt_r0','parser.py',644),
  ('decl_stmt -> var_id COLON unary_pred S_COLON','decl_stmt',4,'p_decl_stmt_r1','parser.py',649),
  ('decl_stmt -> LP3 vars_id RP3 S_COLON','decl_stmt',4,'p_decl_stmt_r2','parser.py',654),
  ('decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON','decl_stmt',6,'p_decl_stmt_r3','parser.py',659),
  ('vars_id -> vars_id COMMA var_id','vars_id',3,'p_vars_id_r0','parser.py',664),
  ('vars_id -> var_id','vars_id',1,'p_vars_id_r1','parser.py',669),
  ('var_id -> ID','var_id',1,'p_var_id_r0','parser.py',674),
  ('decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt','decl_static_fn_stmts',2,'p_decl_static_fn_stmts_r0','parser.py',679),
  ('decl_static_fn_stmts -> decl_static_fn_stmt','decl_static_fn_stmts',1,'p_decl_static_fn_stmts_r1','parser.py',684),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',5,'p_decl_static_fn_stmt_r0','parser.py',689),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r1','parser.py',694),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',8,'p_decl_static_fn_stmt_r2','parser.py',699),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',10,'p_decl_static_fn_stmt_r3','parser.py',704),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_r4','parser.py',709),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',6,'p_decl_static_fn_stmt_r5','parser.py',714),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r6','parser.py',719),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',9,'p_decl_static_fn_stmt_r7','parser.py',724),
  ('static_fn_id -> ID','static_fn_id',1,'p_static_fn_id_r0','parser.py',729),
  ('print_stmt -> PRINTINFO to_print S_COLON','print_stmt',3,'p_print_stmt_r0','parser.py',734),
  ('generate_stmt -> GENERATE to_print S_COLON','generate_stmt',3,'p_generate_stmt_r0','parser.py',739),
  ('to_print -> ID','to_print',1,'p_to_print_r0','parser.py',744),
  ('to_print -> boolean_expr','to_print',1,'p_to_print_r1','parser.py',749),
  ('to_print -> unnamed_pred','to_print',1,'p_to_print_r2','parser.py',754),
  ('boolean_expr -> boolean_expr OR boolean_expr_a','boolean_expr',3,'p_boolean_expr_r0','parser.py',759),
  ('boolean_expr -> boolean_expr_a','boolean_expr',1,'p_boolean_expr_r1','parser.py',764),
  ('boolean_expr_a -> boolean_expr_a XOR boolean_expr_b','boolean_expr_a',3,'p_boolean_expr_a_r0','parser.py',769),
  ('boolean_expr_a -> boolean_expr_b','boolean_expr_a',1,'p_boolean_expr_a_r1','parser.py',774),
  ('boolean_expr_b -> boolean_expr_b AND boolean_expr_c','boolean_expr_b',3,'p_boolean_expr_b_r0','parser.py',779),
  ('boolean_expr_b -> boolean_expr_c','boolean_expr_b',1,'p_boolean_expr_b_r1','parser.py',784),
  ('boolean_expr_c -> boolean_expr_c EQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r0','parser.py',789),
  ('boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r1','parser.py',794),
  ('boolean_expr_c -> boolean_expr_d','boolean_expr_c',1,'p_boolean_expr_c_r2','parser.py',799),
  ('boolean_expr_d -> NOT boolean_expr_e','boolean_expr_d',2,'p_boolean_expr_d_r0','parser.py',804),
  ('boolean_expr_d -> boolean_expr_e','boolean_expr_d',1,'p_boolean_expr_d_r1','parser.py',809),
  ('boolean_expr_e -> atomic_boolean_expr','boolean_expr_e',1,'p_boolean_expr_e_r0','parser.py',814),
  ('boolean_expr_e -> LP1 boolean_expr RP1','boolean_expr_e',3,'p_boolean_expr_e_r1','parser.py',819),
  ('atomic_boolean_expr -> constants','atomic_boolean_expr',1,'p_atomic_boolean_expr_r0','parser.py',824),
  ('atomic_boolean_expr -> unary_pred LP1 args RP1','atomic_boolean_expr',4,'p_atomic_boolean_expr_r1','parser.py',829),
  ('atomic_boolean_expr -> unary_pred IMPLIES unary_pred','atomic_boolean_expr',3,'p_atomic_boolean_expr_r2','parser.py',834),
  ('atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r3','parser.py',839),
  ('atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r4','parser.py',844),
  ('constants -> TRUE','constants',1,'p_constants_r0','parser.py',849),
  ('constants -> FALSE','constants',1,'p_constants_r1','parser.py',854),
  ('args -> args COMMA unary_pred','args',3,'p_args_r0','parser.py',859),
  ('args -> unary_pred','args',1,'p_args_r1','parser.py',864),
  ('assign_stmt -> names ASSIGN assign_expr S_COLON','assign_stmt',4,'p_assign_stmt_r0','parser.py',869),
  ('names -> names COMMA name','names',3,'p_names_r0','parser.py',874),
  ('names -> name','names',1,'p_names_r1','parser.py',879),
  ('name -> ID','name',1,'p_name_r0','parser.py',884),
  ('assign_expr -> names ASSIGN assign_expr','assign_expr',3,'p_assign_expr_r0','parser.py',889),
  ('assign_expr -> names','assign_expr',1,'p_assign_expr_r1','parser.py',894),
  ('trait_decl -> TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',8,'p_trait_decl_err0','parser.py',902),
  ('trait_decl -> TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON','trait_decl',9,'p_trait_decl_err1','parser.py',907),
  ('trait_decl -> TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_err4','parser.py',912),
  ('trait_decl -> TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_err5','parser.py',917),
  ('decl_fn_stmt -> fn_id error RP1 S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err0','parser.py',923),
  ('decl_fn_stmt -> fn_id LP1 error S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err1','parser.py',928),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err2','parser.py',933),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err3','parser.py',938),
  ('decl_fn_stmt -> fn_id error RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err4','parser.py',943),
  ('decl_fn_stmt -> fn_id LP3 error LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err5','parser.py',948),
  ('decl_stmt -> error RP3 S_COLON','decl_stmt',3,'p_decl_stmt_err0','parser.py',985),
  ('decl_stmt -> error RP3 COLON unary_pred S_COLON','decl_stmt',5,'p_decl_stmt_err1','parser.py',990),
  ('decl_stmt -> LP3 error S_COLON','decl_stmt',3,'p_decl_stmt_err2','parser.py',995),
  ('decl_static_fn_stmt -> static_fn_id error RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err0','parser.py',1001),
  ('decl_static_fn_stmt -> static_fn_id LP1 error S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err1','parser.py',1006),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err2','parser.py',1011),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err3','parser.py',1016),
  ('decl_static_fn_stmt -> static_fn_id error RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err4','parser.py',1021),
  ('decl_static_fn_stmt -> static_fn_id LP3 error LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err5','parser.py',1026),
  ('boolean_expr -> error boolean_expr_e','boolean_expr',2,'p_error_boolean_0','parser.py',1032),
  ('boolean_expr -> boolean_expr OR error','boolean_expr',3,'p_error_boolean_0','parser.py',1033),
  ('boolean_expr_a -> boolean_expr_a XOR error','boolean_expr_a',3,'p_error_boolean_0','parser.py',1034),
  ('boolean_expr_b -> boolean_expr_b AND error','boolean_expr_b',3,'p_error_boolean_0','parser.py',1035),
  ('boolean_expr_c -> boolean_expr_c EQ error','boolean_expr_c',3,'p_error_boolean_0','parser.py',1036),
  ('boolean_expr_c -> boolean_expr_c NEQ error','boolean_expr_c',3,'p_error_boolean_0','parser.py',1037),
  ('boolean_expr_d -> NOT error','boolean_expr_d',2,'p_error_boolean_0','parser.py',1038),
  ('boolean_expr_e -> LP1 error RP1','boolean_expr_e',3,'p_error_boolean_0','parser.py',1039),
  ('atomic_boolean_expr -> error LP1 args RP1','atomic_boolean_expr',4,'p_error_atomic_boolean_0','parser.py',1046),
  ('atomic_boolean_expr -> error IMPLIES unary_pred','atomic_boolean_expr',3,'p_error_atomic_boolean_0','parser.py',1047),
  ('atomic_boolean_expr -> unary_pred error unary_pred','atomic_boolean_expr',3,'p_error_atomic_boolean_1','parser.py',1054),
  ('print_stmt -> PRINTINFO error S_COLON','print_stmt',3,'p_error_print_stmt_0','parser.py',1061),
  ('generate_stmt -> GENERATE error S_COLON','generate_stmt',3,'p_error_print_stmt_0','parser.py',1062),
  ('vars_id -> error COMMA var_id','vars_id',3,'p_error_args_0','parser.py',1069),
  ('vars_id -> vars_id COMMA error','vars_id',3,'p_error_args_0','parser.py',1070),
  ('type_var_args -> error COMMA type_var_arg','type_var_args',3,'p_error_args_0','parser.py',1071),
  ('type_var_args -> type_var_args COMMA error','type_var_args',3,'p_error_args_0','parser.py',1072),
  ('next_anonymous_necessary_preds -> error COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_error_args_0','parser.py',1073),
  ('next_anonymous_opt_preds -> error COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_error_args_0','parser.py',1074),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA error','next_anonymous_opt_preds',3,'p_error_args_0','parser.py',1075),
  ('next_named_preds -> error COMMA next_named_pred','next_named_preds',3,'p_error_args_0','parser.py',1076),
  ('next_named_preds -> next_named_preds COMMA error','next_named_preds',3,'p_error_args_0','parser.py',1077),
  ('pred_args -> error COMMA next_preds','pred_args',3,'p_error_args_0','parser.py',1079),
  ('necessary_args -> error COMMA necessary_arg','necessary_args',3,'p_error_args_0','parser.py',1080),
  ('optional_args -> error COMMA optional_arg','optional_args',3,'p_error_args_0','parser.py',1081),
  ('optional_args -> optional_args COMMA error','optional_args',3,'p_error_args_0','parser.py',1082),
  ('next_named_necessary_pred -> name ASSIGN error unary_pred','next_named_necessary_pred',4,'p_error_args_1','parser.py',1089),
  ('next_named_opt_pred -> name ASSIGN COLON error unary_pred','next_named_opt_pred',5,'p_error_args_2','parser.py',1096),
  ('pred_expr -> error pred_expr_c','pred_expr',2,'p_error_pred_expr_0','parser.py',1103),
  ('pred_expr -> pred_expr OR error','pred_expr',3,'p_error_pred_expr_0','parser.py',1104),
  ('pred_expr_a -> pred_expr_a AND error','pred_expr_a',3,'p_error_pred_expr_0','parser.py',1105),
  ('pred_expr_b -> NOT error','pred_expr_b',2,'p_error_pred_expr_0','parser.py',1106),
  ('pred_expr_c -> LP1 error RP1','pred_expr_c',3,'p_error_pred_expr_0','parser.py',1107),
  ('assign_stmt -> names ASSIGN error S_COLON','assign_stmt',4,'p_assign_expr_err0','parser.py',1114),
  ('decl_fn_stmt -> fn_id LP1 RP1 error S_COLON','decl_fn_stmt',5,'p_error_no_args_in_p1_0','parser.py',1121),
  ('decl_fn_stmt -> fn_id LP1 RP1 error R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_error_no_args_in_p1_0','parser.py',1122),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON','decl_fn_stmt',8,'p_error_no_args_in_p1_0','parser.py',1123),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_error_no_args_in_p1_0','parser.py',1124),
  ('decl_cls_fn_stmt -> fn_id LP1 RP1 error S_COLON','decl_cls_fn_stmt',5,'p_error_no_args_in_p1_1','parser.py',1131),
  ('decl_cls_fn_stmt -> fn_id LP1 RP1 error R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_error_no_args_in_p1_1','parser.py',1132),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON','decl_cls_fn_stmt',8,'p_error_no_args_in_p1_1','parser.py',1133),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_error_no_args_in_p1_1','parser.py',1134),
  ('decl_static_fn_stmt -> static_fn_id LP3 RP3 error S_COLON','decl_static_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1141),
  ('decl_fn_stmt -> fn_id LP3 RP3 error S_COLON','decl_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1142),
  ('decl_cls_fn_stmt -> fn_id LP3 RP3 error S_COLON','decl_cls_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1143),
  ('decl_fn_stmt -> error S_COLON','decl_fn_stmt',2,'p_error_no_name_0','parser.py',1150),
  ('decl_cls_fn_stmt -> error S_COLON','decl_cls_fn_stmt',2,'p_error_no_name_0','parser.py',1151),
  ('decl_static_fn_stmt -> error S_COLON','decl_static_fn_stmt',2,'p_error_no_name_0','parser.py',1152),
  ('decl_stmt -> error S_COLON','decl_stmt',2,'p_error_no_name_0','parser.py',1153),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW error S_COLON','decl_fn_stmt',7,'p_error_decl_stmt_0','parser.py',1160),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON','decl_fn_stmt',10,'p_error_decl_stmt_0','parser.py',1161),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW error S_COLON','decl_cls_fn_stmt',7,'p_error_decl_stmt_0','parser.py',1162),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW error S_COLON','decl_cls_fn_stmt',10,'p_error_decl_stmt_0','parser.py',1163),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW error S_COLON','decl_static_fn_stmt',7,'p_error_decl_stmt_0','parser.py',1164),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW error S_COLON','decl_static_fn_stmt',10,'p_error_decl_stmt_0','parser.py',1165),
  ('decl_stmt -> var_id COLON error S_COLON','decl_stmt',4,'p_error_decl_stmt_1','parser.py',1172),
  ('decl_stmt -> LP3 vars_id RP3 COLON error S_COLON','decl_stmt',6,'p_error_decl_stmt_1','parser.py',1173),
  ('trait_decl_stmt -> FN COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1180),
  ('trait_decl_stmt -> CLS_FN COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1181),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1182),
  ('trait_decl_stmt -> VAR COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1183),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 RP2 error S_COLON','trait_decl_stmt',6,'p_error_empty_decl_0','parser.py',1184),
]

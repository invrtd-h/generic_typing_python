
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN CLS_FN CLS_VAR COLON COMMA DOT EQ EXTENDS FALSE FN GENERATE ID IMPLIES LP1 LP2 LP3 NEQ NONE NOT OR PASS PRINTINFO PROGRAM_BEGIN PROGRAM_END RP1 RP2 RP3 R_ARROW STAR STATIC_FN S_COLON TRAIT TRAIT_OF TRUE VAR WS XOR program : PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON  program : WS  stmts : stmts stmt  stmts : stmt  stmt : trait_decl  stmt : print_stmt  stmt : generate_stmt  stmt : assign_stmt  stmt : S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_id : ID  class_args : main_arg COMMA sub_args  class_args : main_arg  main_arg : ID  sub_args : necessary_args COMMA optional_args sub_args : necessary_args  sub_args : optional_args  necessary_args : necessary_args COMMA necessary_arg  necessary_args : necessary_arg  necessary_arg : ID  optional_args : optional_args COMMA optional_arg  optional_args : optional_arg  optional_arg : ID ASSIGN unary_pred trait_decl_stmts : trait_decl_stmts trait_decl_stmt  trait_decl_stmts : trait_decl_stmt  trait_decl_stmts : PASS S_COLON  trait_decl_stmt : FN COLON LP2 decl_fn_stmts RP2 S_COLON  trait_decl_stmt : VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON  trait_decl_stmt : CLS_VAR COLON LP2 decl_stmts RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON  decl_fn_stmts : decl_fn_stmts decl_fn_stmt  decl_fn_stmts : decl_fn_stmt  decl_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmts : decl_cls_fn_stmts decl_cls_fn_stmt  decl_cls_fn_stmts : decl_cls_fn_stmt  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON  decl_cls_fn_stmt : fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON  fn_id : ID  pred_args : main_pred COMMA next_preds  pred_args : main_pred  main_pred : ID  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_necessary_preds COMMA next_anonymous_opt_preds next_preds : next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_necessary_preds COMMA STAR  next_preds : next_anonymous_necessary_preds  next_preds : next_anonymous_opt_preds COMMA STAR COMMA next_named_preds  next_preds : next_anonymous_opt_preds COMMA STAR  next_preds : next_anonymous_opt_preds  next_preds : STAR COMMA next_named_preds  next_preds : STAR  next_anonymous_necessary_preds : next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred  next_anonymous_necessary_preds : next_anonymous_necessary_pred  next_anonymous_necessary_pred : unary_pred  next_anonymous_opt_preds : next_anonymous_opt_preds COMMA next_anonymous_opt_pred  next_anonymous_opt_preds : next_anonymous_opt_pred  next_anonymous_opt_pred : ASSIGN unary_pred  next_named_preds : next_named_preds COMMA next_named_pred  next_named_preds : next_named_pred  next_named_pred : next_named_necessary_pred  next_named_pred : next_named_opt_pred  next_named_necessary_pred : arg_name COLON unary_pred  next_named_opt_pred : arg_name COLON ASSIGN unary_pred  arg_name : ID  type_var_args : type_var_args COMMA type_var_arg  type_var_args : type_var_arg  type_var_arg : type_var_id  type_var_arg : type_var_id COLON unary_pred  type_var_id : ID  unary_pred : pred_name  unary_pred : unnamed_pred  unnamed_pred : pred_name LP3 args RP3  unnamed_pred : LP3 pred_expr RP3  unnamed_pred : TRAIT_OF LP1 var_expr RP1  unnamed_pred : NONE  pred_name : ID  pred_expr : pred_expr OR pred_expr_a  pred_expr : pred_expr_a  pred_expr_a : pred_expr_a AND pred_expr_b  pred_expr_a : pred_expr_b  pred_expr_b : NOT pred_expr_c  pred_expr_b : pred_expr_c  pred_expr_c : unary_pred  pred_expr_c : LP1 pred_expr RP1  var_expr : unary_pred DOT member_var_name  member_var_name : ID  decl_stmts : decl_stmts decl_stmt  decl_stmts : decl_stmt  decl_stmt : var_id S_COLON  decl_stmt : var_id COLON unary_pred S_COLON  decl_stmt : LP3 vars_id RP3 S_COLON  decl_stmt : LP3 vars_id RP3 COLON unary_pred S_COLON  vars_id : vars_id COMMA var_id  vars_id : var_id  var_id : ID  decl_static_fn_stmts : decl_static_fn_stmts decl_static_fn_stmt  decl_static_fn_stmts : decl_static_fn_stmt  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON  static_fn_id : ID  print_stmt : PRINTINFO to_print S_COLON  generate_stmt : GENERATE to_print S_COLON  to_print : ID  to_print : boolean_expr  to_print : unnamed_pred  boolean_expr : boolean_expr OR boolean_expr_a  boolean_expr : boolean_expr_a  boolean_expr_a : boolean_expr_a XOR boolean_expr_b  boolean_expr_a : boolean_expr_b  boolean_expr_b : boolean_expr_b AND boolean_expr_c  boolean_expr_b : boolean_expr_c  boolean_expr_c : boolean_expr_c EQ boolean_expr_d  boolean_expr_c : boolean_expr_c NEQ boolean_expr_d  boolean_expr_c : boolean_expr_d  boolean_expr_d : NOT boolean_expr_e  boolean_expr_d : boolean_expr_e  boolean_expr_e : atomic_boolean_expr  boolean_expr_e : LP1 boolean_expr RP1  atomic_boolean_expr : constants  atomic_boolean_expr : unary_pred LP1 args RP1  atomic_boolean_expr : unary_pred IMPLIES unary_pred  atomic_boolean_expr : LP1 unary_pred EQ unary_pred RP1  atomic_boolean_expr : LP1 unary_pred NEQ unary_pred RP1  constants : TRUE  constants : FALSE  args : args COMMA arg  args : arg  arg : ID  assign_stmt : names ASSIGN assign_expr S_COLON  names : names COMMA name  names : name  name : ID  assign_expr : names ASSIGN assign_expr  assign_expr : names  trait_decl : TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 error S_COLON  trait_decl : TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON  trait_decl : TRAIT trait_id LP1 class_args RP1 COLON error S_COLON  trait_decl_stmt : FN COLON error RP2 S_COLON  trait_decl_stmt : VAR COLON error RP2 S_COLON  trait_decl_stmt : CLS_FN COLON error RP2 S_COLON  trait_decl_stmt : STATIC_FN COLON error RP2 S_COLON  decl_fn_stmt : fn_id error RP1 S_COLON  decl_fn_stmt : fn_id LP1 error S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_fn_stmt : fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_fn_stmt : fn_id error RP3 LP1 pred_args RP1 S_COLON  decl_fn_stmt : fn_id LP3 error LP1 pred_args RP1 S_COLON  decl_stmt :  error RP3 S_COLON  decl_stmt :  error RP3 COLON unary_pred S_COLON  decl_stmt :  LP3 error S_COLON  decl_static_fn_stmt : static_fn_id error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP1 error S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 error RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 type_var_args RP3 LP1 error S_COLON  decl_static_fn_stmt : static_fn_id error RP3 LP1 next_preds RP1 S_COLON  decl_static_fn_stmt : static_fn_id LP3 error LP1 next_preds RP1 S_COLON \n    boolean_expr : error boolean_expr_e\n                 | boolean_expr OR error\n    boolean_expr_a : boolean_expr_a XOR error\n    boolean_expr_b : boolean_expr_b AND error\n    boolean_expr_c : boolean_expr_c EQ error\n                   | boolean_expr_c NEQ error\n    boolean_expr_d : NOT error\n    boolean_expr_e : LP1 error RP1\n    \n    atomic_boolean_expr : error LP1 args RP1\n                        | error IMPLIES unary_pred\n    \n    atomic_boolean_expr : unary_pred error unary_pred\n    \n    print_stmt : PRINTINFO error S_COLON\n    generate_stmt : GENERATE error S_COLON\n    \n    args : error arg\n    vars_id : error var_id\n    type_var_args : error type_var_arg\n    next_anonymous_necessary_preds : error next_anonymous_necessary_pred\n    next_anonymous_opt_preds : error next_anonymous_opt_pred\n    next_named_preds : error next_named_pred\n\n    pred_args : error next_preds\n    necessary_args : error necessary_arg\n    optional_args : error optional_arg\n    \n    pred_expr : error pred_expr_c\n              | pred_expr OR error\n    pred_expr_a : pred_expr_a AND error\n    pred_expr_b : NOT error\n    pred_expr_c : LP1 error RP1\n    \n    assign_stmt : names ASSIGN error S_COLON\n    \n    decl_fn_stmts :\n    decl_cls_fn_stmts :\n    decl_static_fn_stmts :\n    \n    decl_stmts : error S_COLON\n    \n    decl_fn_stmt : fn_id LP1 RP1 error S_COLON\n                 | fn_id LP1 RP1 error R_ARROW unary_pred S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON\n                 | fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON\n    decl_cls_fn_stmt : fn_id LP1 RP1 error S_COLON\n                     | fn_id LP1 RP1 error R_ARROW unary_pred S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON\n                     | fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON\n    \n    decl_static_fn_stmt : static_fn_id LP3 RP3 error S_COLON\n    decl_fn_stmt : fn_id LP3 RP3 error S_COLON\n    decl_cls_fn_stmt : fn_id LP3 RP3 error S_COLON\n    '
    
_lr_action_items = {'PROGRAM_BEGIN':([0,],[2,]),'WS':([0,],[3,]),'$end':([1,3,47,],[0,-2,-1,]),'S_COLON':([2,4,5,6,7,8,9,10,11,16,17,18,19,22,23,24,25,26,27,28,33,34,35,36,38,39,41,42,43,44,50,52,53,56,57,58,77,78,82,83,84,85,86,87,98,99,100,101,102,106,116,117,120,121,122,123,124,125,127,128,130,131,138,140,147,151,152,155,167,177,178,180,182,190,200,202,210,221,223,229,232,233,235,236,240,246,247,248,251,257,261,265,268,273,274,280,281,282,286,295,300,301,315,317,327,329,330,331,332,339,345,350,351,353,354,365,382,391,410,411,414,415,416,417,419,420,423,432,433,434,435,436,439,440,447,448,456,475,476,477,478,479,481,],[4,5,-9,5,-4,-5,-6,-7,-8,-145,-146,47,-3,50,52,-117,-118,-119,-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,82,83,-115,-185,-174,-78,-79,-84,-129,-180,-116,-186,-148,130,131,-144,-183,-120,-175,-122,-176,-81,-132,-181,-124,-177,-126,-178,-127,-179,-135,-184,-143,-201,-182,-80,-82,-134,-147,182,192,-136,-137,200,-151,210,-154,223,-149,248,-150,256,260,262,-103,267,272,279,280,-10,283,297,298,303,305,312,313,-152,329,330,334,343,346,347,355,357,367,-11,-153,369,371,377,381,383,385,388,389,407,418,424,437,438,441,442,443,444,445,446,449,457,459,460,461,462,463,465,467,469,473,482,483,484,485,486,487,]),'TRAIT':([4,5,6,7,8,9,10,11,19,50,52,82,83,130,131,182,200,210,223,248,280,329,330,],[12,-9,12,-4,-5,-6,-7,-8,-3,-115,-185,-116,-186,-143,-201,-151,-154,-149,-150,-10,-152,-11,-153,]),'PRINTINFO':([4,5,6,7,8,9,10,11,19,50,52,82,83,130,131,182,200,210,223,248,280,329,330,],[13,-9,13,-4,-5,-6,-7,-8,-3,-115,-185,-116,-186,-143,-201,-151,-154,-149,-150,-10,-152,-11,-153,]),'GENERATE':([4,5,6,7,8,9,10,11,19,50,52,82,83,130,131,182,200,210,223,248,280,329,330,],[14,-9,14,-4,-5,-6,-7,-8,-3,-115,-185,-116,-186,-143,-201,-151,-154,-149,-150,-10,-152,-11,-153,]),'ID':([4,5,6,7,8,9,10,11,12,13,14,19,23,30,32,37,44,45,46,48,50,52,54,55,59,60,61,64,67,69,70,72,74,75,76,79,80,81,82,83,92,93,94,104,107,108,113,118,119,129,130,131,134,139,148,154,157,162,182,185,186,189,200,206,210,211,213,215,217,218,223,225,226,230,231,234,237,238,241,242,243,248,252,253,254,258,260,262,263,265,269,270,271,275,276,277,280,286,291,298,299,302,303,308,311,317,323,326,329,330,333,334,336,338,340,342,343,344,346,347,348,355,356,357,360,362,366,367,368,369,370,371,372,374,377,381,383,384,385,386,387,388,389,390,400,405,407,414,418,424,426,427,428,430,433,437,438,441,442,443,444,445,446,449,455,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,473,474,482,483,484,485,486,487,],[17,-9,17,-4,-5,-6,-7,-8,21,24,24,-3,58,58,58,58,58,17,17,90,-115,-185,97,58,58,58,105,58,58,58,58,58,58,58,58,105,58,58,-116,-186,58,105,97,105,58,58,58,58,58,17,-143,-201,164,105,176,58,58,164,-151,164,208,58,-154,208,-149,228,235,228,235,245,-150,228,-34,235,-96,235,228,-40,235,245,-105,-10,-33,288,294,-95,-205,-97,58,235,-39,288,294,-104,58,294,-152,58,294,-165,58,235,-167,58,294,58,58,294,-11,-153,58,-160,58,294,288,58,-159,288,-98,-99,58,-110,58,-169,58,404,58,-168,58,-35,58,-206,58,288,-215,-166,-41,58,-210,58,288,-216,-106,58,404,58,-214,58,-100,-111,404,404,404,58,58,-36,-207,-162,-161,-164,-163,-42,-211,-107,58,-112,58,-171,-170,-173,-172,-37,58,-208,58,-43,58,-212,58,404,-108,58,-113,-38,-209,-44,-213,-109,]),'PROGRAM_END':([5,6,7,8,9,10,11,19,50,52,82,83,130,131,182,200,210,223,248,280,329,330,],[-9,18,-4,-5,-6,-7,-8,-3,-115,-185,-116,-186,-143,-201,-151,-154,-149,-150,-10,-152,-11,-153,]),'error':([13,14,20,21,23,24,26,29,30,32,33,37,40,44,45,54,56,57,58,59,60,61,67,69,72,73,74,75,76,79,88,89,90,93,94,97,106,107,108,132,134,140,147,153,158,159,160,161,163,164,185,187,188,193,194,195,197,204,205,207,209,213,217,227,228,230,231,234,241,244,245,253,254,258,260,262,270,271,276,277,285,286,290,298,303,307,308,310,325,336,337,340,344,346,347,360,362,364,366,368,374,381,387,405,413,414,418,422,426,427,471,],[23,44,49,-12,51,-84,-79,-78,64,72,-83,78,81,51,86,94,-78,-79,-84,100,102,104,111,113,51,81,121,123,125,104,133,-14,-15,104,51,-84,-81,142,144,155,162,-80,-82,180,-13,-17,-18,-20,-23,-21,206,-194,-195,212,214,216,219,-16,-19,-22,-24,232,232,255,-45,259,-96,265,259,278,-114,286,291,-95,-205,-97,308,311,317,326,332,333,339,-165,-167,351,333,353,365,333,375,308,308,-98,-99,395,400,406,333,333,414,-166,308,433,440,333,-100,448,400,400,400,]),'LP3':([13,14,23,24,29,30,32,37,44,54,55,56,58,59,60,64,67,69,70,72,74,75,76,80,81,92,94,97,107,108,113,118,119,154,157,189,213,217,227,228,230,231,239,241,244,245,258,260,262,263,276,286,298,299,303,308,317,323,333,336,342,346,347,348,356,360,366,368,370,372,381,384,386,390,405,414,418,430,433,455,458,464,466,468,470,474,],[30,30,30,-84,61,30,30,30,30,30,30,61,-84,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-84,30,30,30,30,30,30,30,30,234,234,254,-45,234,-96,271,234,277,-114,-95,-205,-97,30,30,30,-165,30,-167,30,30,30,30,30,30,-98,-99,30,30,30,30,30,30,30,-166,30,30,30,30,30,-100,30,30,30,30,30,30,30,30,30,]),'TRAIT_OF':([13,14,23,30,32,37,44,54,55,59,60,64,67,69,70,72,74,75,76,80,81,92,94,107,108,113,118,119,154,157,189,263,276,286,299,308,317,323,333,336,342,348,356,360,366,368,370,372,384,386,390,405,414,430,433,455,458,464,466,468,470,474,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NONE':([13,14,23,30,32,37,44,54,55,59,60,64,67,69,70,72,74,75,76,80,81,92,94,107,108,113,118,119,154,157,189,263,276,286,299,308,317,323,333,336,342,348,356,360,366,368,370,372,384,386,390,405,414,430,433,455,458,464,466,468,470,474,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'NOT':([13,14,30,32,54,59,60,69,74,75,76,107,108,],[37,37,67,37,37,37,37,67,37,37,37,67,67,]),'LP1':([13,14,20,21,23,24,26,29,30,31,32,33,37,40,44,51,54,56,57,58,59,60,64,67,69,72,73,74,75,76,78,94,97,100,102,106,107,108,113,121,123,125,140,147,227,228,239,244,245,291,296,326,328,337,352,364,],[32,32,48,-12,54,-84,-79,-78,69,70,32,-83,32,79,54,93,32,-78,-79,-84,32,32,69,69,69,54,79,32,32,32,93,54,-84,93,93,-81,69,69,69,93,93,93,-80,-82,253,-45,270,276,-114,340,344,366,368,374,387,405,]),'TRUE':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FALSE':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'ASSIGN':([15,16,17,84,87,164,208,276,286,308,317,333,336,360,361,366,368,395,405,414,425,430,433,],[45,-145,-146,129,-144,189,189,323,323,323,323,323,323,323,323,323,323,323,323,323,323,455,323,]),'COMMA':([15,16,17,33,56,57,58,84,87,89,90,95,96,97,103,105,106,126,137,140,147,159,160,161,163,164,174,187,188,204,205,207,209,235,264,266,287,288,289,292,293,294,304,309,316,318,319,320,321,322,324,341,349,358,359,363,376,379,392,393,394,396,397,398,399,401,402,429,450,451,452,453,454,472,480,],[46,-145,-146,-83,-78,-79,-84,46,-144,134,-15,139,-141,-142,139,-142,-81,139,-187,-80,-82,185,186,-20,-23,-21,-140,-194,-195,186,-19,-22,-24,-103,302,-102,336,-48,338,-74,-75,-77,-188,338,-62,360,361,362,-61,-64,338,-189,-101,-190,-191,-65,-73,-76,425,426,-60,427,-63,428,-67,-68,-69,-192,471,428,428,-66,-70,-71,428,]),'IMPLIES':([23,24,26,29,33,40,44,51,56,57,58,72,73,78,94,97,100,102,106,121,123,125,140,147,],[55,-84,-79,-78,-83,80,55,55,-78,-79,-84,55,80,55,55,-84,55,55,-81,55,55,55,-80,-82,]),'OR':([25,27,28,33,34,35,36,38,39,41,42,53,56,57,58,62,63,65,66,68,71,77,78,98,99,100,101,102,106,109,110,111,112,116,117,120,121,122,123,124,125,127,128,138,140,141,142,143,144,145,146,147,151,177,178,],[59,-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,-174,-78,-79,-84,107,-86,-90,-88,-91,59,-129,-180,-183,-120,-175,-122,-176,-81,-196,-89,-199,107,-132,-181,-124,-177,-126,-178,-127,-179,-135,-184,-182,-80,-85,-197,-87,-198,-92,-200,-82,-134,-136,-137,]),'RP1':([27,28,33,34,35,36,38,39,41,42,53,56,57,58,63,65,66,68,71,72,77,78,88,89,90,94,95,96,97,98,99,100,101,102,105,106,109,110,111,112,113,114,116,117,120,121,122,123,124,125,126,127,128,137,138,140,141,142,143,144,145,146,147,149,150,151,158,159,160,161,163,164,174,175,176,177,178,187,188,204,205,207,209,253,255,270,276,278,284,287,288,306,314,316,318,319,320,321,322,335,358,359,363,373,374,375,378,380,387,392,393,394,396,397,398,399,401,402,405,406,408,409,412,421,429,431,450,451,452,453,454,472,480,],[-121,-130,-83,-123,-125,-128,-131,-133,-138,-139,-174,-78,-79,-84,-86,-90,-88,-91,116,117,-129,-180,132,-14,-15,117,138,-141,-142,-183,-120,-175,-122,-176,-142,-81,-196,-89,-199,145,146,147,-132,-181,-124,-177,-126,-178,-127,-179,151,-135,-184,-187,-182,-80,-85,-197,-87,-198,-92,-200,-82,177,178,-134,-13,-17,-18,-20,-23,-21,-140,-93,-94,-136,-137,-194,-195,-16,-19,-22,-24,285,295,307,315,327,331,-47,-48,350,354,-62,-54,-57,-59,-61,-64,-193,-190,-191,-65,-46,413,415,416,417,422,-51,-53,-60,-56,-63,-58,-67,-68,-69,432,434,435,436,439,447,-192,456,-50,-52,-55,-66,-70,-71,-49,]),'XOR':([27,28,33,34,35,36,38,39,41,42,56,57,58,77,78,98,99,101,102,106,116,117,120,121,122,123,124,125,127,128,138,140,147,151,177,178,],[60,-130,-83,-123,-125,-128,-131,-133,-138,-139,-78,-79,-84,-129,-180,-183,60,-122,-176,-81,-132,-181,-124,-177,-126,-178,-127,-179,-135,-184,-182,-80,-82,-134,-136,-137,]),'EQ':([28,33,35,36,38,39,41,42,56,57,58,73,77,78,97,98,106,116,117,120,122,123,124,125,127,128,138,140,147,151,177,178,],[-130,-83,75,-128,-131,-133,-138,-139,-78,-79,-84,118,-129,-180,-84,-183,-81,-132,-181,75,-126,-178,-127,-179,-135,-184,-182,-80,-82,-134,-136,-137,]),'NEQ':([28,33,35,36,38,39,41,42,56,57,58,73,77,78,97,98,106,116,117,120,122,123,124,125,127,128,138,140,147,151,177,178,],[-130,-83,76,-128,-131,-133,-138,-139,-78,-79,-84,119,-129,-180,-84,-183,-81,-132,-181,76,-126,-178,-127,-179,-135,-184,-182,-80,-82,-134,-136,-137,]),'AND':([28,33,34,35,36,38,39,41,42,56,57,58,63,65,66,68,77,78,98,101,106,110,111,116,117,120,121,122,123,124,125,127,128,138,140,141,143,144,145,146,147,151,177,178,],[-130,-83,74,-125,-128,-131,-133,-138,-139,-78,-79,-84,108,-90,-88,-91,-129,-180,-183,74,-81,-89,-199,-132,-181,-124,-177,-126,-178,-127,-179,-135,-184,-182,-80,108,-87,-198,-92,-200,-82,-134,-136,-137,]),'RP3':([33,56,57,58,62,63,65,66,68,96,103,105,106,109,110,111,137,140,141,142,143,144,145,146,147,174,232,235,254,255,259,264,266,271,277,278,289,292,293,294,304,309,324,341,349,376,379,],[-83,-78,-79,-84,106,-86,-90,-88,-91,-141,140,-142,-81,-196,-89,-199,-187,-80,-85,-197,-87,-198,-92,-200,-82,-140,261,-103,290,296,261,301,-102,310,325,328,337,-74,-75,-77,-188,352,364,-189,-101,-73,-76,]),'DOT':([33,56,57,58,106,115,140,147,],[-83,-78,-79,-84,-81,148,-80,-82,]),'COLON':([33,49,56,57,58,106,132,136,140,147,168,169,170,171,172,181,184,233,235,261,293,294,301,403,404,],[-83,91,-78,-79,-84,-81,153,173,-80,-82,193,194,195,196,197,201,203,263,-103,299,342,-77,348,430,-72,]),'EXTENDS':([49,132,133,],[92,154,157,]),'LP2':([91,133,153,173,193,194,195,196,197,201,203,],[135,156,179,198,211,213,215,217,218,222,224,]),'PASS':([135,156,179,198,222,224,],[167,167,167,167,167,167,]),'FN':([135,156,165,166,179,183,191,192,198,199,220,222,224,249,250,256,267,272,279,283,297,305,312,313,],[168,168,168,-26,168,168,-25,-27,168,168,168,168,168,168,168,-155,-156,-157,-158,-28,-29,-30,-31,-32,]),'VAR':([135,156,165,166,179,183,191,192,198,199,220,222,224,249,250,256,267,272,279,283,297,305,312,313,],[169,169,169,-26,169,169,-25,-27,169,169,169,169,169,169,169,-155,-156,-157,-158,-28,-29,-30,-31,-32,]),'CLS_FN':([135,156,165,166,179,183,191,192,198,199,220,222,224,249,250,256,267,272,279,283,297,305,312,313,],[170,170,170,-26,170,170,-25,-27,170,170,170,170,170,170,170,-155,-156,-157,-158,-28,-29,-30,-31,-32,]),'CLS_VAR':([135,156,165,166,179,183,191,192,198,199,220,222,224,249,250,256,267,272,279,283,297,305,312,313,],[171,171,171,-26,171,171,-25,-27,171,171,171,171,171,171,171,-155,-156,-157,-158,-28,-29,-30,-31,-32,]),'STATIC_FN':([135,156,165,166,179,183,191,192,198,199,220,222,224,249,250,256,267,272,279,283,297,305,312,313,],[172,172,172,-26,172,172,-25,-27,172,172,172,172,172,172,172,-155,-156,-157,-158,-28,-29,-30,-31,-32,]),'RP2':([165,166,183,191,192,199,211,212,214,215,216,218,219,220,225,226,230,231,237,238,241,242,243,249,250,252,256,258,260,262,267,269,272,275,279,283,297,298,303,305,312,313,334,343,346,347,355,357,367,369,371,377,381,383,385,388,389,407,418,424,437,438,441,442,443,444,445,446,449,457,459,460,461,462,463,465,467,469,473,482,483,484,485,486,487,],[190,-26,202,-25,-27,221,-202,229,236,-203,240,-204,246,247,251,-34,257,-96,268,-40,273,274,-105,281,282,-33,-155,-95,-205,-97,-156,-39,-157,-104,-158,-28,-29,-165,-167,-30,-31,-32,-160,-159,-98,-99,-110,-169,-168,-35,-206,-215,-166,-41,-210,-216,-106,-214,-100,-111,-36,-207,-162,-161,-164,-163,-42,-211,-107,-112,-171,-170,-173,-172,-37,-208,-43,-212,-108,-113,-38,-209,-44,-213,-109,]),'STAR':([276,286,308,336,360,361,366,368,405,414,425,],[320,320,320,320,393,396,320,320,320,320,450,]),'R_ARROW':([315,331,332,350,351,354,432,439,440,447,448,456,],[356,370,372,384,386,390,458,464,466,468,470,474,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmts':([4,],[6,]),'stmt':([4,6,],[7,19,]),'trait_decl':([4,6,],[8,8,]),'print_stmt':([4,6,],[9,9,]),'generate_stmt':([4,6,],[10,10,]),'assign_stmt':([4,6,],[11,11,]),'names':([4,6,45,129,],[15,15,84,84,]),'name':([4,6,45,46,129,],[16,16,16,87,16,]),'trait_id':([12,],[20,]),'to_print':([13,14,],[22,43,]),'boolean_expr':([13,14,32,54,],[25,25,71,71,]),'unnamed_pred':([13,14,23,30,32,37,44,54,55,59,60,64,67,69,70,72,74,75,76,80,81,92,94,107,108,113,118,119,154,157,189,263,276,286,299,308,317,323,333,336,342,348,356,360,366,368,370,372,384,386,390,405,414,430,433,455,458,464,466,468,470,474,],[26,26,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'boolean_expr_a':([13,14,32,54,59,],[27,27,27,27,99,]),'boolean_expr_e':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,],[28,28,53,28,77,53,28,28,28,53,28,28,28,53,]),'pred_name':([13,14,23,30,32,37,44,54,55,59,60,64,67,69,70,72,74,75,76,80,81,92,94,107,108,113,118,119,154,157,189,263,276,286,299,308,317,323,333,336,342,348,356,360,366,368,370,372,384,386,390,405,414,430,433,455,458,464,466,468,470,474,],[29,29,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'boolean_expr_b':([13,14,32,54,59,60,],[34,34,34,34,34,101,]),'boolean_expr_c':([13,14,32,54,59,60,74,],[35,35,35,35,35,35,120,]),'boolean_expr_d':([13,14,32,54,59,60,74,75,76,],[36,36,36,36,36,36,36,122,124,]),'atomic_boolean_expr':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'constants':([13,14,23,32,37,44,54,59,60,72,74,75,76,94,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'unary_pred':([13,14,23,30,32,37,44,54,55,59,60,64,67,69,70,72,74,75,76,80,81,92,94,107,108,113,118,119,154,157,189,263,276,286,299,308,317,323,333,336,342,348,356,360,366,368,370,372,384,386,390,405,414,430,433,455,458,464,466,468,470,474,],[40,40,40,68,73,40,40,73,98,40,40,68,68,68,115,40,40,40,40,127,128,136,40,68,68,68,149,150,181,184,209,300,316,316,345,316,316,363,316,316,379,382,391,316,316,316,410,411,419,420,423,316,316,454,316,472,475,476,477,478,479,481,]),'pred_expr':([30,69,],[62,112,]),'pred_expr_a':([30,69,107,],[63,63,141,]),'pred_expr_c':([30,64,67,69,107,108,113,],[65,109,110,65,65,65,109,]),'pred_expr_b':([30,69,107,108,],[66,66,66,143,]),'assign_expr':([45,129,],[85,152,]),'class_args':([48,],[88,]),'main_arg':([48,],[89,]),'args':([54,61,79,93,],[95,103,126,95,]),'arg':([54,61,79,93,94,104,139,],[96,96,96,96,137,137,174,]),'var_expr':([70,],[114,]),'sub_args':([134,],[158,]),'necessary_args':([134,],[159,]),'optional_args':([134,185,],[160,204,]),'necessary_arg':([134,162,185,],[161,187,205,]),'optional_arg':([134,162,185,186,206,],[163,188,163,207,188,]),'trait_decl_stmts':([135,156,179,198,222,224,],[165,183,199,220,249,250,]),'trait_decl_stmt':([135,156,165,179,183,198,199,220,222,224,249,250,],[166,166,191,166,191,166,191,191,166,166,191,191,]),'member_var_name':([148,],[175,]),'decl_fn_stmts':([211,],[225,]),'decl_fn_stmt':([211,225,],[226,252,]),'fn_id':([211,215,225,237,],[227,239,227,239,]),'decl_stmts':([213,217,],[230,241,]),'decl_stmt':([213,217,230,241,],[231,231,258,258,]),'var_id':([213,217,230,234,241,265,302,],[233,233,233,266,233,304,349,]),'decl_cls_fn_stmts':([215,],[237,]),'decl_cls_fn_stmt':([215,237,],[238,269,]),'decl_static_fn_stmts':([218,],[242,]),'decl_static_fn_stmt':([218,242,],[243,275,]),'static_fn_id':([218,242,],[244,244,]),'vars_id':([234,],[264,]),'pred_args':([253,270,340,344,374,387,],[284,306,378,380,412,421,]),'main_pred':([253,270,340,344,374,387,],[287,287,287,287,287,287,]),'type_var_args':([254,271,277,],[289,309,324,]),'type_var_arg':([254,271,277,291,311,326,338,],[292,292,292,341,341,341,376,]),'type_var_id':([254,271,277,291,311,326,338,],[293,293,293,293,293,293,293,]),'next_preds':([276,286,308,336,366,368,405,414,],[314,335,335,373,408,409,431,335,]),'next_anonymous_necessary_preds':([276,286,308,336,366,368,405,414,],[318,318,318,318,318,318,318,318,]),'next_anonymous_opt_preds':([276,286,308,336,360,366,368,405,414,],[319,319,319,319,392,319,319,319,319,]),'next_anonymous_necessary_pred':([276,286,308,317,333,336,360,366,368,405,414,433,],[321,321,321,358,358,321,394,321,321,321,321,358,]),'next_anonymous_opt_pred':([276,286,308,317,333,336,360,361,366,368,395,405,414,425,433,],[322,322,322,359,359,322,322,397,322,322,359,322,322,397,359,]),'next_named_preds':([362,426,427,471,],[398,451,452,480,]),'next_named_pred':([362,400,426,427,428,471,],[399,429,399,399,453,399,]),'next_named_necessary_pred':([362,400,426,427,428,471,],[401,401,401,401,401,401,]),'next_named_opt_pred':([362,400,426,427,428,471,],[402,402,402,402,402,402,]),'arg_name':([362,400,426,427,428,471,],[403,403,403,403,403,403,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON','program',5,'p_program_r0','parser.py',165),
  ('program -> WS','program',1,'p_program_r1','parser.py',170),
  ('stmts -> stmts stmt','stmts',2,'p_stmts_r0','parser.py',175),
  ('stmts -> stmt','stmts',1,'p_stmts_r1','parser.py',180),
  ('stmt -> trait_decl','stmt',1,'p_stmt_r0','parser.py',185),
  ('stmt -> print_stmt','stmt',1,'p_stmt_r1','parser.py',190),
  ('stmt -> generate_stmt','stmt',1,'p_stmt_r2','parser.py',195),
  ('stmt -> assign_stmt','stmt',1,'p_stmt_r3','parser.py',200),
  ('stmt -> S_COLON','stmt',1,'p_stmt_r4','parser.py',205),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_r0','parser.py',210),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_r1','parser.py',215),
  ('trait_id -> ID','trait_id',1,'p_trait_id_r0','parser.py',220),
  ('class_args -> main_arg COMMA sub_args','class_args',3,'p_class_args_r0','parser.py',225),
  ('class_args -> main_arg','class_args',1,'p_class_args_r1','parser.py',230),
  ('main_arg -> ID','main_arg',1,'p_main_arg_r0','parser.py',235),
  ('sub_args -> necessary_args COMMA optional_args','sub_args',3,'p_sub_args_r0','parser.py',240),
  ('sub_args -> necessary_args','sub_args',1,'p_sub_args_r1','parser.py',245),
  ('sub_args -> optional_args','sub_args',1,'p_sub_args_r2','parser.py',250),
  ('necessary_args -> necessary_args COMMA necessary_arg','necessary_args',3,'p_necessary_args_r0','parser.py',255),
  ('necessary_args -> necessary_arg','necessary_args',1,'p_necessary_args_r1','parser.py',260),
  ('necessary_arg -> ID','necessary_arg',1,'p_necessary_arg_r0','parser.py',265),
  ('optional_args -> optional_args COMMA optional_arg','optional_args',3,'p_optional_args_r0','parser.py',270),
  ('optional_args -> optional_arg','optional_args',1,'p_optional_args_r1','parser.py',275),
  ('optional_arg -> ID ASSIGN unary_pred','optional_arg',3,'p_optional_arg_r0','parser.py',280),
  ('trait_decl_stmts -> trait_decl_stmts trait_decl_stmt','trait_decl_stmts',2,'p_trait_decl_stmts_r0','parser.py',285),
  ('trait_decl_stmts -> trait_decl_stmt','trait_decl_stmts',1,'p_trait_decl_stmts_r1','parser.py',290),
  ('trait_decl_stmts -> PASS S_COLON','trait_decl_stmts',2,'p_trait_decl_stmts_r2','parser.py',295),
  ('trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r0','parser.py',300),
  ('trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r1','parser.py',305),
  ('trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r2','parser.py',310),
  ('trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r3','parser.py',315),
  ('trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON','trait_decl_stmt',6,'p_trait_decl_stmt_r4','parser.py',320),
  ('decl_fn_stmts -> decl_fn_stmts decl_fn_stmt','decl_fn_stmts',2,'p_decl_fn_stmts_r0','parser.py',325),
  ('decl_fn_stmts -> decl_fn_stmt','decl_fn_stmts',1,'p_decl_fn_stmts_r1','parser.py',330),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_fn_stmt',5,'p_decl_fn_stmt_r0','parser.py',335),
  ('decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_r1','parser.py',340),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',8,'p_decl_fn_stmt_r2','parser.py',345),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_decl_fn_stmt_r3','parser.py',350),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt','decl_cls_fn_stmts',2,'p_decl_cls_fn_stmts_r0','parser.py',355),
  ('decl_cls_fn_stmts -> decl_cls_fn_stmt','decl_cls_fn_stmts',1,'p_decl_cls_fn_stmts_r1','parser.py',360),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',5,'p_decl_cls_fn_stmt_r0','parser.py',365),
  ('decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_decl_cls_fn_stmt_r1','parser.py',370),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON','decl_cls_fn_stmt',8,'p_decl_cls_fn_stmt_r2','parser.py',375),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_decl_cls_fn_stmt_r3','parser.py',380),
  ('fn_id -> ID','fn_id',1,'p_fn_id_r0','parser.py',385),
  ('pred_args -> main_pred COMMA next_preds','pred_args',3,'p_pred_args_r0','parser.py',390),
  ('pred_args -> main_pred','pred_args',1,'p_pred_args_r1','parser.py',395),
  ('main_pred -> ID','main_pred',1,'p_main_pred_r0','parser.py',400),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',7,'p_next_preds_r0','parser.py',405),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR','next_preds',5,'p_next_preds_r1','parser.py',410),
  ('next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds','next_preds',3,'p_next_preds_r2','parser.py',415),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r3','parser.py',420),
  ('next_preds -> next_anonymous_necessary_preds COMMA STAR','next_preds',3,'p_next_preds_r4','parser.py',425),
  ('next_preds -> next_anonymous_necessary_preds','next_preds',1,'p_next_preds_r5','parser.py',430),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds','next_preds',5,'p_next_preds_r6','parser.py',435),
  ('next_preds -> next_anonymous_opt_preds COMMA STAR','next_preds',3,'p_next_preds_r7','parser.py',440),
  ('next_preds -> next_anonymous_opt_preds','next_preds',1,'p_next_preds_r8','parser.py',445),
  ('next_preds -> STAR COMMA next_named_preds','next_preds',3,'p_next_preds_r9','parser.py',450),
  ('next_preds -> STAR','next_preds',1,'p_next_preds_r10','parser.py',455),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred','next_anonymous_necessary_preds',3,'p_next_anonymous_necessary_preds_r0','parser.py',460),
  ('next_anonymous_necessary_preds -> next_anonymous_necessary_pred','next_anonymous_necessary_preds',1,'p_next_anonymous_necessary_preds_r1','parser.py',465),
  ('next_anonymous_necessary_pred -> unary_pred','next_anonymous_necessary_pred',1,'p_next_anonymous_necessary_pred_r0','parser.py',470),
  ('next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred','next_anonymous_opt_preds',3,'p_next_anonymous_opt_preds_r0','parser.py',475),
  ('next_anonymous_opt_preds -> next_anonymous_opt_pred','next_anonymous_opt_preds',1,'p_next_anonymous_opt_preds_r1','parser.py',480),
  ('next_anonymous_opt_pred -> ASSIGN unary_pred','next_anonymous_opt_pred',2,'p_next_anonymous_opt_pred_r0','parser.py',485),
  ('next_named_preds -> next_named_preds COMMA next_named_pred','next_named_preds',3,'p_next_named_preds_r0','parser.py',490),
  ('next_named_preds -> next_named_pred','next_named_preds',1,'p_next_named_preds_r1','parser.py',495),
  ('next_named_pred -> next_named_necessary_pred','next_named_pred',1,'p_next_named_pred_r0','parser.py',500),
  ('next_named_pred -> next_named_opt_pred','next_named_pred',1,'p_next_named_pred_r1','parser.py',505),
  ('next_named_necessary_pred -> arg_name COLON unary_pred','next_named_necessary_pred',3,'p_next_named_necessary_pred_r0','parser.py',510),
  ('next_named_opt_pred -> arg_name COLON ASSIGN unary_pred','next_named_opt_pred',4,'p_next_named_opt_pred_r0','parser.py',515),
  ('arg_name -> ID','arg_name',1,'p_arg_name_r0','parser.py',520),
  ('type_var_args -> type_var_args COMMA type_var_arg','type_var_args',3,'p_type_var_args_r0','parser.py',525),
  ('type_var_args -> type_var_arg','type_var_args',1,'p_type_var_args_r1','parser.py',530),
  ('type_var_arg -> type_var_id','type_var_arg',1,'p_type_var_arg_r0','parser.py',535),
  ('type_var_arg -> type_var_id COLON unary_pred','type_var_arg',3,'p_type_var_arg_r1','parser.py',540),
  ('type_var_id -> ID','type_var_id',1,'p_type_var_id_r0','parser.py',545),
  ('unary_pred -> pred_name','unary_pred',1,'p_unary_pred_r0','parser.py',550),
  ('unary_pred -> unnamed_pred','unary_pred',1,'p_unary_pred_r1','parser.py',555),
  ('unnamed_pred -> pred_name LP3 args RP3','unnamed_pred',4,'p_unnamed_pred_r0','parser.py',560),
  ('unnamed_pred -> LP3 pred_expr RP3','unnamed_pred',3,'p_unnamed_pred_r1','parser.py',565),
  ('unnamed_pred -> TRAIT_OF LP1 var_expr RP1','unnamed_pred',4,'p_unnamed_pred_r2','parser.py',570),
  ('unnamed_pred -> NONE','unnamed_pred',1,'p_unnamed_pred_r3','parser.py',575),
  ('pred_name -> ID','pred_name',1,'p_pred_name_r0','parser.py',580),
  ('pred_expr -> pred_expr OR pred_expr_a','pred_expr',3,'p_pred_expr_r0','parser.py',585),
  ('pred_expr -> pred_expr_a','pred_expr',1,'p_pred_expr_r1','parser.py',590),
  ('pred_expr_a -> pred_expr_a AND pred_expr_b','pred_expr_a',3,'p_pred_expr_a_r0','parser.py',595),
  ('pred_expr_a -> pred_expr_b','pred_expr_a',1,'p_pred_expr_a_r1','parser.py',600),
  ('pred_expr_b -> NOT pred_expr_c','pred_expr_b',2,'p_pred_expr_b_r0','parser.py',605),
  ('pred_expr_b -> pred_expr_c','pred_expr_b',1,'p_pred_expr_b_r1','parser.py',610),
  ('pred_expr_c -> unary_pred','pred_expr_c',1,'p_pred_expr_c_r0','parser.py',615),
  ('pred_expr_c -> LP1 pred_expr RP1','pred_expr_c',3,'p_pred_expr_c_r1','parser.py',620),
  ('var_expr -> unary_pred DOT member_var_name','var_expr',3,'p_var_expr_r0','parser.py',625),
  ('member_var_name -> ID','member_var_name',1,'p_member_var_name_r0','parser.py',630),
  ('decl_stmts -> decl_stmts decl_stmt','decl_stmts',2,'p_decl_stmts_r0','parser.py',635),
  ('decl_stmts -> decl_stmt','decl_stmts',1,'p_decl_stmts_r1','parser.py',640),
  ('decl_stmt -> var_id S_COLON','decl_stmt',2,'p_decl_stmt_r0','parser.py',645),
  ('decl_stmt -> var_id COLON unary_pred S_COLON','decl_stmt',4,'p_decl_stmt_r1','parser.py',650),
  ('decl_stmt -> LP3 vars_id RP3 S_COLON','decl_stmt',4,'p_decl_stmt_r2','parser.py',655),
  ('decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON','decl_stmt',6,'p_decl_stmt_r3','parser.py',660),
  ('vars_id -> vars_id COMMA var_id','vars_id',3,'p_vars_id_r0','parser.py',665),
  ('vars_id -> var_id','vars_id',1,'p_vars_id_r1','parser.py',670),
  ('var_id -> ID','var_id',1,'p_var_id_r0','parser.py',675),
  ('decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt','decl_static_fn_stmts',2,'p_decl_static_fn_stmts_r0','parser.py',680),
  ('decl_static_fn_stmts -> decl_static_fn_stmt','decl_static_fn_stmts',1,'p_decl_static_fn_stmts_r1','parser.py',685),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',5,'p_decl_static_fn_stmt_r0','parser.py',690),
  ('decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r1','parser.py',695),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',8,'p_decl_static_fn_stmt_r2','parser.py',700),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',10,'p_decl_static_fn_stmt_r3','parser.py',705),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_r4','parser.py',710),
  ('decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',6,'p_decl_static_fn_stmt_r5','parser.py',715),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_r6','parser.py',720),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON','decl_static_fn_stmt',9,'p_decl_static_fn_stmt_r7','parser.py',725),
  ('static_fn_id -> ID','static_fn_id',1,'p_static_fn_id_r0','parser.py',730),
  ('print_stmt -> PRINTINFO to_print S_COLON','print_stmt',3,'p_print_stmt_r0','parser.py',735),
  ('generate_stmt -> GENERATE to_print S_COLON','generate_stmt',3,'p_generate_stmt_r0','parser.py',740),
  ('to_print -> ID','to_print',1,'p_to_print_r0','parser.py',745),
  ('to_print -> boolean_expr','to_print',1,'p_to_print_r1','parser.py',750),
  ('to_print -> unnamed_pred','to_print',1,'p_to_print_r2','parser.py',755),
  ('boolean_expr -> boolean_expr OR boolean_expr_a','boolean_expr',3,'p_boolean_expr_r0','parser.py',760),
  ('boolean_expr -> boolean_expr_a','boolean_expr',1,'p_boolean_expr_r1','parser.py',765),
  ('boolean_expr_a -> boolean_expr_a XOR boolean_expr_b','boolean_expr_a',3,'p_boolean_expr_a_r0','parser.py',770),
  ('boolean_expr_a -> boolean_expr_b','boolean_expr_a',1,'p_boolean_expr_a_r1','parser.py',775),
  ('boolean_expr_b -> boolean_expr_b AND boolean_expr_c','boolean_expr_b',3,'p_boolean_expr_b_r0','parser.py',780),
  ('boolean_expr_b -> boolean_expr_c','boolean_expr_b',1,'p_boolean_expr_b_r1','parser.py',785),
  ('boolean_expr_c -> boolean_expr_c EQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r0','parser.py',790),
  ('boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d','boolean_expr_c',3,'p_boolean_expr_c_r1','parser.py',795),
  ('boolean_expr_c -> boolean_expr_d','boolean_expr_c',1,'p_boolean_expr_c_r2','parser.py',800),
  ('boolean_expr_d -> NOT boolean_expr_e','boolean_expr_d',2,'p_boolean_expr_d_r0','parser.py',805),
  ('boolean_expr_d -> boolean_expr_e','boolean_expr_d',1,'p_boolean_expr_d_r1','parser.py',810),
  ('boolean_expr_e -> atomic_boolean_expr','boolean_expr_e',1,'p_boolean_expr_e_r0','parser.py',815),
  ('boolean_expr_e -> LP1 boolean_expr RP1','boolean_expr_e',3,'p_boolean_expr_e_r1','parser.py',820),
  ('atomic_boolean_expr -> constants','atomic_boolean_expr',1,'p_atomic_boolean_expr_r0','parser.py',825),
  ('atomic_boolean_expr -> unary_pred LP1 args RP1','atomic_boolean_expr',4,'p_atomic_boolean_expr_r1','parser.py',830),
  ('atomic_boolean_expr -> unary_pred IMPLIES unary_pred','atomic_boolean_expr',3,'p_atomic_boolean_expr_r2','parser.py',835),
  ('atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r3','parser.py',840),
  ('atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1','atomic_boolean_expr',5,'p_atomic_boolean_expr_r4','parser.py',845),
  ('constants -> TRUE','constants',1,'p_constants_r0','parser.py',850),
  ('constants -> FALSE','constants',1,'p_constants_r1','parser.py',855),
  ('args -> args COMMA arg','args',3,'p_args_r0','parser.py',860),
  ('args -> arg','args',1,'p_args_r1','parser.py',865),
  ('arg -> ID','arg',1,'p_arg_r0','parser.py',870),
  ('assign_stmt -> names ASSIGN assign_expr S_COLON','assign_stmt',4,'p_assign_stmt_r0','parser.py',875),
  ('names -> names COMMA name','names',3,'p_names_r0','parser.py',880),
  ('names -> name','names',1,'p_names_r1','parser.py',885),
  ('name -> ID','name',1,'p_name_r0','parser.py',890),
  ('assign_expr -> names ASSIGN assign_expr','assign_expr',3,'p_assign_expr_r0','parser.py',895),
  ('assign_expr -> names','assign_expr',1,'p_assign_expr_r1','parser.py',900),
  ('trait_decl -> TRAIT trait_id error COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',8,'p_trait_decl_err0','parser.py',908),
  ('trait_decl -> TRAIT trait_id LP1 class_args error LP2 trait_decl_stmts RP2 S_COLON','trait_decl',9,'p_trait_decl_err1','parser.py',913),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 error S_COLON','trait_decl',7,'p_trait_decl_err2','parser.py',918),
  ('trait_decl -> TRAIT trait_id error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',10,'p_trait_decl_err4','parser.py',923),
  ('trait_decl -> TRAIT trait_id LP1 class_args error EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON','trait_decl',12,'p_trait_decl_err5','parser.py',928),
  ('trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON error S_COLON','trait_decl',8,'p_trait_decl_err6','parser.py',933),
  ('trait_decl_stmt -> FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err2','parser.py',939),
  ('trait_decl_stmt -> VAR COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err4','parser.py',944),
  ('trait_decl_stmt -> CLS_FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err6','parser.py',949),
  ('trait_decl_stmt -> STATIC_FN COLON error RP2 S_COLON','trait_decl_stmt',5,'p_trait_decl_stmt_err10','parser.py',956),
  ('decl_fn_stmt -> fn_id error RP1 S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err0','parser.py',962),
  ('decl_fn_stmt -> fn_id LP1 error S_COLON','decl_fn_stmt',4,'p_decl_fn_stmt_err1','parser.py',967),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err2','parser.py',972),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err3','parser.py',977),
  ('decl_fn_stmt -> fn_id error RP3 LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err4','parser.py',982),
  ('decl_fn_stmt -> fn_id LP3 error LP1 pred_args RP1 S_COLON','decl_fn_stmt',7,'p_decl_fn_stmt_err5','parser.py',987),
  ('decl_stmt -> error RP3 S_COLON','decl_stmt',3,'p_decl_stmt_err0','parser.py',1024),
  ('decl_stmt -> error RP3 COLON unary_pred S_COLON','decl_stmt',5,'p_decl_stmt_err1','parser.py',1029),
  ('decl_stmt -> LP3 error S_COLON','decl_stmt',3,'p_decl_stmt_err2','parser.py',1034),
  ('decl_static_fn_stmt -> static_fn_id error RP1 S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err0','parser.py',1040),
  ('decl_static_fn_stmt -> static_fn_id LP1 error S_COLON','decl_static_fn_stmt',4,'p_decl_static_fn_stmt_err1','parser.py',1045),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 error RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err2','parser.py',1050),
  ('decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 error S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err3','parser.py',1055),
  ('decl_static_fn_stmt -> static_fn_id error RP3 LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err4','parser.py',1060),
  ('decl_static_fn_stmt -> static_fn_id LP3 error LP1 next_preds RP1 S_COLON','decl_static_fn_stmt',7,'p_decl_static_fn_stmt_err5','parser.py',1065),
  ('boolean_expr -> error boolean_expr_e','boolean_expr',2,'p_error_boolean_0','parser.py',1071),
  ('boolean_expr -> boolean_expr OR error','boolean_expr',3,'p_error_boolean_0','parser.py',1072),
  ('boolean_expr_a -> boolean_expr_a XOR error','boolean_expr_a',3,'p_error_boolean_0','parser.py',1073),
  ('boolean_expr_b -> boolean_expr_b AND error','boolean_expr_b',3,'p_error_boolean_0','parser.py',1074),
  ('boolean_expr_c -> boolean_expr_c EQ error','boolean_expr_c',3,'p_error_boolean_0','parser.py',1075),
  ('boolean_expr_c -> boolean_expr_c NEQ error','boolean_expr_c',3,'p_error_boolean_0','parser.py',1076),
  ('boolean_expr_d -> NOT error','boolean_expr_d',2,'p_error_boolean_0','parser.py',1077),
  ('boolean_expr_e -> LP1 error RP1','boolean_expr_e',3,'p_error_boolean_0','parser.py',1078),
  ('atomic_boolean_expr -> error LP1 args RP1','atomic_boolean_expr',4,'p_error_atomic_boolean_0','parser.py',1085),
  ('atomic_boolean_expr -> error IMPLIES unary_pred','atomic_boolean_expr',3,'p_error_atomic_boolean_0','parser.py',1086),
  ('atomic_boolean_expr -> unary_pred error unary_pred','atomic_boolean_expr',3,'p_error_atomic_boolean_1','parser.py',1093),
  ('print_stmt -> PRINTINFO error S_COLON','print_stmt',3,'p_error_print_stmt_0','parser.py',1100),
  ('generate_stmt -> GENERATE error S_COLON','generate_stmt',3,'p_error_print_stmt_0','parser.py',1101),
  ('args -> error arg','args',2,'p_error_args_0','parser.py',1108),
  ('vars_id -> error var_id','vars_id',2,'p_error_args_0','parser.py',1109),
  ('type_var_args -> error type_var_arg','type_var_args',2,'p_error_args_0','parser.py',1110),
  ('next_anonymous_necessary_preds -> error next_anonymous_necessary_pred','next_anonymous_necessary_preds',2,'p_error_args_0','parser.py',1111),
  ('next_anonymous_opt_preds -> error next_anonymous_opt_pred','next_anonymous_opt_preds',2,'p_error_args_0','parser.py',1112),
  ('next_named_preds -> error next_named_pred','next_named_preds',2,'p_error_args_0','parser.py',1113),
  ('pred_args -> error next_preds','pred_args',2,'p_error_args_0','parser.py',1115),
  ('necessary_args -> error necessary_arg','necessary_args',2,'p_error_args_0','parser.py',1116),
  ('optional_args -> error optional_arg','optional_args',2,'p_error_args_0','parser.py',1117),
  ('pred_expr -> error pred_expr_c','pred_expr',2,'p_error_pred_expr_0','parser.py',1124),
  ('pred_expr -> pred_expr OR error','pred_expr',3,'p_error_pred_expr_0','parser.py',1125),
  ('pred_expr_a -> pred_expr_a AND error','pred_expr_a',3,'p_error_pred_expr_0','parser.py',1126),
  ('pred_expr_b -> NOT error','pred_expr_b',2,'p_error_pred_expr_0','parser.py',1127),
  ('pred_expr_c -> LP1 error RP1','pred_expr_c',3,'p_error_pred_expr_0','parser.py',1128),
  ('assign_stmt -> names ASSIGN error S_COLON','assign_stmt',4,'p_assign_expr_err0','parser.py',1135),
  ('decl_fn_stmts -> <empty>','decl_fn_stmts',0,'p_error_decl_fn_stmts_0','parser.py',1142),
  ('decl_cls_fn_stmts -> <empty>','decl_cls_fn_stmts',0,'p_error_decl_fn_stmts_0','parser.py',1143),
  ('decl_static_fn_stmts -> <empty>','decl_static_fn_stmts',0,'p_error_decl_fn_stmts_0','parser.py',1144),
  ('decl_stmts -> error S_COLON','decl_stmts',2,'p_error_decl_var_stmts_0','parser.py',1152),
  ('decl_fn_stmt -> fn_id LP1 RP1 error S_COLON','decl_fn_stmt',5,'p_error_no_args_in_p1_0','parser.py',1159),
  ('decl_fn_stmt -> fn_id LP1 RP1 error R_ARROW unary_pred S_COLON','decl_fn_stmt',7,'p_error_no_args_in_p1_0','parser.py',1160),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON','decl_fn_stmt',8,'p_error_no_args_in_p1_0','parser.py',1161),
  ('decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON','decl_fn_stmt',10,'p_error_no_args_in_p1_0','parser.py',1162),
  ('decl_cls_fn_stmt -> fn_id LP1 RP1 error S_COLON','decl_cls_fn_stmt',5,'p_error_no_args_in_p1_0','parser.py',1163),
  ('decl_cls_fn_stmt -> fn_id LP1 RP1 error R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',7,'p_error_no_args_in_p1_0','parser.py',1164),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error S_COLON','decl_cls_fn_stmt',8,'p_error_no_args_in_p1_0','parser.py',1165),
  ('decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 RP1 error R_ARROW unary_pred S_COLON','decl_cls_fn_stmt',10,'p_error_no_args_in_p1_0','parser.py',1166),
  ('decl_static_fn_stmt -> static_fn_id LP3 RP3 error S_COLON','decl_static_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1173),
  ('decl_fn_stmt -> fn_id LP3 RP3 error S_COLON','decl_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1174),
  ('decl_cls_fn_stmt -> fn_id LP3 RP3 error S_COLON','decl_cls_fn_stmt',5,'p_error_no_args_in_p3_0','parser.py',1175),
]

Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> E
Rule 1     E -> E ADD F
Rule 2     E -> E SUB F
Rule 3     E -> F
Rule 4     F -> F MUL G
Rule 5     F -> F DIV G
Rule 6     F -> G
Rule 7     G -> LP E RP
Rule 8     G -> INT

Terminals, with rules where they appear

ADD                  : 1
DIV                  : 5
INT                  : 8
LP                   : 7
MUL                  : 4
RP                   : 7
SUB                  : 2
error                : 

Nonterminals, with rules where they appear

E                    : 1 2 7 0
F                    : 1 2 3 4 5
G                    : 4 5 6

Parsing method: LALR

state 0

    (0) S' -> . E
    (1) E -> . E ADD F
    (2) E -> . E SUB F
    (3) E -> . F
    (4) F -> . F MUL G
    (5) F -> . F DIV G
    (6) F -> . G
    (7) G -> . LP E RP
    (8) G -> . INT

    LP              shift and go to state 4
    INT             shift and go to state 5

    E                              shift and go to state 1
    F                              shift and go to state 2
    G                              shift and go to state 3

state 1

    (0) S' -> E .
    (1) E -> E . ADD F
    (2) E -> E . SUB F

    ADD             shift and go to state 6
    SUB             shift and go to state 7


state 2

    (3) E -> F .
    (4) F -> F . MUL G
    (5) F -> F . DIV G

    ADD             reduce using rule 3 (E -> F .)
    SUB             reduce using rule 3 (E -> F .)
    $end            reduce using rule 3 (E -> F .)
    RP              reduce using rule 3 (E -> F .)
    MUL             shift and go to state 8
    DIV             shift and go to state 9


state 3

    (6) F -> G .

    MUL             reduce using rule 6 (F -> G .)
    DIV             reduce using rule 6 (F -> G .)
    ADD             reduce using rule 6 (F -> G .)
    SUB             reduce using rule 6 (F -> G .)
    $end            reduce using rule 6 (F -> G .)
    RP              reduce using rule 6 (F -> G .)


state 4

    (7) G -> LP . E RP
    (1) E -> . E ADD F
    (2) E -> . E SUB F
    (3) E -> . F
    (4) F -> . F MUL G
    (5) F -> . F DIV G
    (6) F -> . G
    (7) G -> . LP E RP
    (8) G -> . INT

    LP              shift and go to state 4
    INT             shift and go to state 5

    E                              shift and go to state 10
    F                              shift and go to state 2
    G                              shift and go to state 3

state 5

    (8) G -> INT .

    MUL             reduce using rule 8 (G -> INT .)
    DIV             reduce using rule 8 (G -> INT .)
    ADD             reduce using rule 8 (G -> INT .)
    SUB             reduce using rule 8 (G -> INT .)
    $end            reduce using rule 8 (G -> INT .)
    RP              reduce using rule 8 (G -> INT .)


state 6

    (1) E -> E ADD . F
    (4) F -> . F MUL G
    (5) F -> . F DIV G
    (6) F -> . G
    (7) G -> . LP E RP
    (8) G -> . INT

    LP              shift and go to state 4
    INT             shift and go to state 5

    F                              shift and go to state 11
    G                              shift and go to state 3

state 7

    (2) E -> E SUB . F
    (4) F -> . F MUL G
    (5) F -> . F DIV G
    (6) F -> . G
    (7) G -> . LP E RP
    (8) G -> . INT

    LP              shift and go to state 4
    INT             shift and go to state 5

    F                              shift and go to state 12
    G                              shift and go to state 3

state 8

    (4) F -> F MUL . G
    (7) G -> . LP E RP
    (8) G -> . INT

    LP              shift and go to state 4
    INT             shift and go to state 5

    G                              shift and go to state 13

state 9

    (5) F -> F DIV . G
    (7) G -> . LP E RP
    (8) G -> . INT

    LP              shift and go to state 4
    INT             shift and go to state 5

    G                              shift and go to state 14

state 10

    (7) G -> LP E . RP
    (1) E -> E . ADD F
    (2) E -> E . SUB F

    RP              shift and go to state 15
    ADD             shift and go to state 6
    SUB             shift and go to state 7


state 11

    (1) E -> E ADD F .
    (4) F -> F . MUL G
    (5) F -> F . DIV G

    ADD             reduce using rule 1 (E -> E ADD F .)
    SUB             reduce using rule 1 (E -> E ADD F .)
    $end            reduce using rule 1 (E -> E ADD F .)
    RP              reduce using rule 1 (E -> E ADD F .)
    MUL             shift and go to state 8
    DIV             shift and go to state 9


state 12

    (2) E -> E SUB F .
    (4) F -> F . MUL G
    (5) F -> F . DIV G

    ADD             reduce using rule 2 (E -> E SUB F .)
    SUB             reduce using rule 2 (E -> E SUB F .)
    $end            reduce using rule 2 (E -> E SUB F .)
    RP              reduce using rule 2 (E -> E SUB F .)
    MUL             shift and go to state 8
    DIV             shift and go to state 9


state 13

    (4) F -> F MUL G .

    MUL             reduce using rule 4 (F -> F MUL G .)
    DIV             reduce using rule 4 (F -> F MUL G .)
    ADD             reduce using rule 4 (F -> F MUL G .)
    SUB             reduce using rule 4 (F -> F MUL G .)
    $end            reduce using rule 4 (F -> F MUL G .)
    RP              reduce using rule 4 (F -> F MUL G .)


state 14

    (5) F -> F DIV G .

    MUL             reduce using rule 5 (F -> F DIV G .)
    DIV             reduce using rule 5 (F -> F DIV G .)
    ADD             reduce using rule 5 (F -> F DIV G .)
    SUB             reduce using rule 5 (F -> F DIV G .)
    $end            reduce using rule 5 (F -> F DIV G .)
    RP              reduce using rule 5 (F -> F DIV G .)


state 15

    (7) G -> LP E RP .

    MUL             reduce using rule 7 (G -> LP E RP .)
    DIV             reduce using rule 7 (G -> LP E RP .)
    ADD             reduce using rule 7 (G -> LP E RP .)
    SUB             reduce using rule 7 (G -> LP E RP .)
    $end            reduce using rule 7 (G -> LP E RP .)
    RP              reduce using rule 7 (G -> LP E RP .)


Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON
Rule 2     program -> WS
Rule 3     stmts -> stmts stmt
Rule 4     stmts -> stmt
Rule 5     stmt -> trait_decl
Rule 6     stmt -> print_stmt
Rule 7     stmt -> generate_stmt
Rule 8     stmt -> assign_stmt
Rule 9     stmt -> S_COLON
Rule 10    trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON
Rule 11    trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON
Rule 12    trait_id -> ID
Rule 13    class_args -> main_arg COMMA sub_args
Rule 14    class_args -> main_arg
Rule 15    main_arg -> ID
Rule 16    sub_args -> necessary_args COMMA optional_args
Rule 17    sub_args -> necessary_args
Rule 18    sub_args -> optional_args
Rule 19    necessary_args -> necessary_args COMMA necessary_arg
Rule 20    necessary_args -> necessary_arg
Rule 21    necessary_arg -> ID
Rule 22    optional_args -> optional_args COMMA optional_arg
Rule 23    optional_args -> optional_arg
Rule 24    optional_arg -> ID ASSIGN unary_pred
Rule 25    trait_decl_stmts -> trait_decl_stmts trait_decl_stmt
Rule 26    trait_decl_stmts -> trait_decl_stmt
Rule 27    trait_decl_stmts -> PASS S_COLON
Rule 28    trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON
Rule 29    trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON
Rule 30    trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON
Rule 31    trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON
Rule 32    trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON
Rule 33    decl_fn_stmts -> decl_fn_stmts decl_fn_stmt
Rule 34    decl_fn_stmts -> decl_fn_stmt
Rule 35    decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON
Rule 36    decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON
Rule 37    decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
Rule 38    decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
Rule 39    decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt
Rule 40    decl_cls_fn_stmts -> decl_cls_fn_stmt
Rule 41    decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON
Rule 42    decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON
Rule 43    decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
Rule 44    decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
Rule 45    fn_id -> ID
Rule 46    pred_args -> main_pred COMMA next_preds
Rule 47    pred_args -> main_pred
Rule 48    main_pred -> ID
Rule 49    next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
Rule 50    next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR
Rule 51    next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds
Rule 52    next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds
Rule 53    next_preds -> next_anonymous_necessary_preds COMMA STAR
Rule 54    next_preds -> next_anonymous_necessary_preds
Rule 55    next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
Rule 56    next_preds -> next_anonymous_opt_preds COMMA STAR
Rule 57    next_preds -> next_anonymous_opt_preds
Rule 58    next_preds -> STAR COMMA next_named_preds
Rule 59    next_preds -> STAR
Rule 60    next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred
Rule 61    next_anonymous_necessary_preds -> next_anonymous_necessary_pred
Rule 62    next_anonymous_necessary_pred -> unary_pred
Rule 63    next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred
Rule 64    next_anonymous_opt_preds -> next_anonymous_opt_pred
Rule 65    next_anonymous_opt_pred -> ASSIGN unary_pred
Rule 66    next_named_preds -> next_named_preds COMMA next_named_pred
Rule 67    next_named_preds -> next_named_pred
Rule 68    next_named_pred -> next_named_necessary_pred
Rule 69    next_named_pred -> next_named_opt_pred
Rule 70    next_named_necessary_pred -> arg_name COLON unary_pred
Rule 71    next_named_opt_pred -> arg_name COLON ASSIGN unary_pred
Rule 72    arg_name -> ID
Rule 73    type_var_args -> type_var_args COMMA type_var_arg
Rule 74    type_var_args -> type_var_arg
Rule 75    type_var_arg -> type_var_id
Rule 76    type_var_arg -> type_var_id COLON unary_pred
Rule 77    type_var_id -> ID
Rule 78    unary_pred -> pred_name
Rule 79    unary_pred -> unnamed_pred
Rule 80    unnamed_pred -> pred_name LP3 args RP3
Rule 81    unnamed_pred -> LP3 pred_expr RP3
Rule 82    unnamed_pred -> TRAIT_OF LP1 var_expr RP1
Rule 83    unnamed_pred -> NONE
Rule 84    pred_name -> ID
Rule 85    pred_expr -> pred_expr OR pred_expr_a
Rule 86    pred_expr -> pred_expr_a
Rule 87    pred_expr_a -> pred_expr_a AND pred_expr_b
Rule 88    pred_expr_a -> pred_expr_b
Rule 89    pred_expr_b -> NOT pred_expr_c
Rule 90    pred_expr_b -> pred_expr_c
Rule 91    pred_expr_c -> unary_pred
Rule 92    pred_expr_c -> LP1 pred_expr RP1
Rule 93    var_expr -> unary_pred DOT member_var_name
Rule 94    member_var_name -> ID
Rule 95    decl_stmts -> decl_stmts decl_stmt
Rule 96    decl_stmts -> decl_stmt
Rule 97    decl_stmt -> var_id S_COLON
Rule 98    decl_stmt -> var_id COLON unary_pred S_COLON
Rule 99    decl_stmt -> LP3 vars_id RP3 S_COLON
Rule 100   decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON
Rule 101   vars_id -> vars_id COMMA var_id
Rule 102   vars_id -> var_id
Rule 103   var_id -> ID
Rule 104   decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt
Rule 105   decl_static_fn_stmts -> decl_static_fn_stmt
Rule 106   decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON
Rule 107   decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON
Rule 108   decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON
Rule 109   decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON
Rule 110   decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON
Rule 111   decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON
Rule 112   decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON
Rule 113   decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON
Rule 114   static_fn_id -> ID
Rule 115   print_stmt -> PRINTINFO to_print S_COLON
Rule 116   generate_stmt -> GENERATE to_print S_COLON
Rule 117   to_print -> ID
Rule 118   to_print -> boolean_expr
Rule 119   to_print -> unnamed_pred
Rule 120   boolean_expr -> boolean_expr OR boolean_expr_a
Rule 121   boolean_expr -> boolean_expr_a
Rule 122   boolean_expr_a -> boolean_expr_a XOR boolean_expr_b
Rule 123   boolean_expr_a -> boolean_expr_b
Rule 124   boolean_expr_b -> boolean_expr_b AND boolean_expr_c
Rule 125   boolean_expr_b -> boolean_expr_c
Rule 126   boolean_expr_c -> boolean_expr_c EQ boolean_expr_d
Rule 127   boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d
Rule 128   boolean_expr_c -> boolean_expr_d
Rule 129   boolean_expr_d -> NOT boolean_expr_e
Rule 130   boolean_expr_d -> boolean_expr_e
Rule 131   boolean_expr_e -> atomic_boolean_expr
Rule 132   boolean_expr_e -> LP1 boolean_expr RP1
Rule 133   atomic_boolean_expr -> constants
Rule 134   atomic_boolean_expr -> unary_pred LP1 args RP1
Rule 135   atomic_boolean_expr -> unary_pred IMPLIES unary_pred
Rule 136   atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1
Rule 137   atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1
Rule 138   constants -> TRUE
Rule 139   constants -> FALSE
Rule 140   args -> args COMMA arg
Rule 141   args -> arg
Rule 142   arg -> ID
Rule 143   assign_stmt -> names ASSIGN assign_expr S_COLON
Rule 144   names -> names COMMA name
Rule 145   names -> name
Rule 146   name -> ID
Rule 147   assign_expr -> names ASSIGN assign_expr
Rule 148   assign_expr -> names
Rule 149   trait_decl_stmt -> error S_COLON
Rule 150   trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON

Terminals, with rules where they appear

AND                  : 87 124
ASSIGN               : 24 65 71 143 147
CLS_FN               : 30
CLS_VAR              : 31
COLON                : 10 11 28 29 30 31 32 70 71 76 98 100
COMMA                : 13 16 19 22 46 49 49 49 50 50 51 52 52 53 55 55 56 58 60 63 66 73 101 140 144
DOT                  : 93
EQ                   : 126 136
EXTENDS              : 11
FALSE                : 139
FN                   : 28
GENERATE             : 116
ID                   : 12 15 21 24 45 48 72 77 84 94 103 114 117 142 146
IMPLIES              : 135
LP1                  : 10 11 35 36 37 38 41 42 43 44 82 92 106 107 108 109 110 111 112 113 132 134 136 137
LP2                  : 10 11 28 29 30 31 32 150
LP3                  : 37 38 43 44 80 81 99 100 108 109 112 113
NEQ                  : 127 137
NONE                 : 83
NOT                  : 89 129
OR                   : 85 120
PASS                 : 27
PRINTINFO            : 115
PROGRAM_BEGIN        : 1
PROGRAM_END          : 1
RP1                  : 10 11 35 36 37 38 41 42 43 44 82 92 106 107 108 109 110 111 112 113 132 134 136 137
RP2                  : 10 11 28 29 30 31 32 150
RP3                  : 37 38 43 44 80 81 99 100 108 109 112 113
R_ARROW              : 36 38 42 44 107 109 111 113
STAR                 : 49 50 52 53 55 56 58 59
STATIC_FN            : 32
S_COLON              : 1 1 9 10 11 27 28 29 30 31 32 35 36 37 38 41 42 43 44 97 98 99 100 106 107 108 109 110 111 112 113 115 116 143 149 150 150
TRAIT                : 10 11
TRAIT_OF             : 82
TRUE                 : 138
VAR                  : 29
WS                   : 2
XOR                  : 122
error                : 149 150 150

Nonterminals, with rules where they appear

arg                  : 140 141
arg_name             : 70 71
args                 : 80 134 140
assign_expr          : 143 147
assign_stmt          : 8
atomic_boolean_expr  : 131
boolean_expr         : 118 120 132
boolean_expr_a       : 120 121 122
boolean_expr_b       : 122 123 124
boolean_expr_c       : 124 125 126 127
boolean_expr_d       : 126 127 128
boolean_expr_e       : 129 130
class_args           : 10 11
constants            : 133
decl_cls_fn_stmt     : 39 40
decl_cls_fn_stmts    : 30 39
decl_fn_stmt         : 33 34
decl_fn_stmts        : 28 33
decl_static_fn_stmt  : 104 105
decl_static_fn_stmts : 32 104
decl_stmt            : 95 96
decl_stmts           : 29 31 95
fn_id                : 35 36 37 38 41 42 43 44
generate_stmt        : 7
main_arg             : 13 14
main_pred            : 46 47
member_var_name      : 93
name                 : 144 145
names                : 143 144 147 148
necessary_arg        : 19 20
necessary_args       : 16 17 19
next_anonymous_necessary_pred : 60 61
next_anonymous_necessary_preds : 49 50 51 52 53 54 60
next_anonymous_opt_pred : 63 64
next_anonymous_opt_preds : 49 50 51 55 56 57 63
next_named_necessary_pred : 68
next_named_opt_pred  : 69
next_named_pred      : 66 67
next_named_preds     : 49 52 55 58 66
next_preds           : 46 106 107 108 109
optional_arg         : 22 23
optional_args        : 16 18 22
pred_args            : 35 36 37 38 41 42 43 44
pred_expr            : 81 85 92
pred_expr_a          : 85 86 87
pred_expr_b          : 87 88
pred_expr_c          : 89 90
pred_name            : 78 80
print_stmt           : 6
program              : 0
static_fn_id         : 106 107 108 109 110 111 112 113
stmt                 : 3 4
stmts                : 1 3
sub_args             : 13
to_print             : 115 116
trait_decl           : 5
trait_decl_stmt      : 25 26
trait_decl_stmts     : 10 11 25
trait_id             : 10 11
type_var_arg         : 73 74
type_var_args        : 37 38 43 44 73 108 109 112 113
type_var_id          : 75 76
unary_pred           : 11 24 36 38 42 44 62 65 70 71 76 91 93 98 100 107 109 111 113 134 135 135 136 136 137 137
unnamed_pred         : 79 119
var_expr             : 82
var_id               : 97 98 101 102
vars_id              : 99 100 101

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON
    (2) program -> . WS

    PROGRAM_BEGIN   shift and go to state 2
    WS              shift and go to state 3

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROGRAM_BEGIN . S_COLON stmts PROGRAM_END S_COLON

    S_COLON         shift and go to state 4


state 3

    (2) program -> WS .

    $end            reduce using rule 2 (program -> WS .)


state 4

    (1) program -> PROGRAM_BEGIN S_COLON . stmts PROGRAM_END S_COLON
    (3) stmts -> . stmts stmt
    (4) stmts -> . stmt
    (5) stmt -> . trait_decl
    (6) stmt -> . print_stmt
    (7) stmt -> . generate_stmt
    (8) stmt -> . assign_stmt
    (9) stmt -> . S_COLON
    (10) trait_decl -> . TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON
    (11) trait_decl -> . TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON
    (115) print_stmt -> . PRINTINFO to_print S_COLON
    (116) generate_stmt -> . GENERATE to_print S_COLON
    (143) assign_stmt -> . names ASSIGN assign_expr S_COLON
    (144) names -> . names COMMA name
    (145) names -> . name
    (146) name -> . ID

    S_COLON         shift and go to state 5
    TRAIT           shift and go to state 12
    PRINTINFO       shift and go to state 13
    GENERATE        shift and go to state 14
    ID              shift and go to state 17

    stmts                          shift and go to state 6
    stmt                           shift and go to state 7
    trait_decl                     shift and go to state 8
    print_stmt                     shift and go to state 9
    generate_stmt                  shift and go to state 10
    assign_stmt                    shift and go to state 11
    names                          shift and go to state 15
    name                           shift and go to state 16

state 5

    (9) stmt -> S_COLON .

    PROGRAM_END     reduce using rule 9 (stmt -> S_COLON .)
    S_COLON         reduce using rule 9 (stmt -> S_COLON .)
    TRAIT           reduce using rule 9 (stmt -> S_COLON .)
    PRINTINFO       reduce using rule 9 (stmt -> S_COLON .)
    GENERATE        reduce using rule 9 (stmt -> S_COLON .)
    ID              reduce using rule 9 (stmt -> S_COLON .)


state 6

    (1) program -> PROGRAM_BEGIN S_COLON stmts . PROGRAM_END S_COLON
    (3) stmts -> stmts . stmt
    (5) stmt -> . trait_decl
    (6) stmt -> . print_stmt
    (7) stmt -> . generate_stmt
    (8) stmt -> . assign_stmt
    (9) stmt -> . S_COLON
    (10) trait_decl -> . TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON
    (11) trait_decl -> . TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON
    (115) print_stmt -> . PRINTINFO to_print S_COLON
    (116) generate_stmt -> . GENERATE to_print S_COLON
    (143) assign_stmt -> . names ASSIGN assign_expr S_COLON
    (144) names -> . names COMMA name
    (145) names -> . name
    (146) name -> . ID

    PROGRAM_END     shift and go to state 18
    S_COLON         shift and go to state 5
    TRAIT           shift and go to state 12
    PRINTINFO       shift and go to state 13
    GENERATE        shift and go to state 14
    ID              shift and go to state 17

    stmt                           shift and go to state 19
    trait_decl                     shift and go to state 8
    print_stmt                     shift and go to state 9
    generate_stmt                  shift and go to state 10
    assign_stmt                    shift and go to state 11
    names                          shift and go to state 15
    name                           shift and go to state 16

state 7

    (4) stmts -> stmt .

    PROGRAM_END     reduce using rule 4 (stmts -> stmt .)
    S_COLON         reduce using rule 4 (stmts -> stmt .)
    TRAIT           reduce using rule 4 (stmts -> stmt .)
    PRINTINFO       reduce using rule 4 (stmts -> stmt .)
    GENERATE        reduce using rule 4 (stmts -> stmt .)
    ID              reduce using rule 4 (stmts -> stmt .)


state 8

    (5) stmt -> trait_decl .

    PROGRAM_END     reduce using rule 5 (stmt -> trait_decl .)
    S_COLON         reduce using rule 5 (stmt -> trait_decl .)
    TRAIT           reduce using rule 5 (stmt -> trait_decl .)
    PRINTINFO       reduce using rule 5 (stmt -> trait_decl .)
    GENERATE        reduce using rule 5 (stmt -> trait_decl .)
    ID              reduce using rule 5 (stmt -> trait_decl .)


state 9

    (6) stmt -> print_stmt .

    PROGRAM_END     reduce using rule 6 (stmt -> print_stmt .)
    S_COLON         reduce using rule 6 (stmt -> print_stmt .)
    TRAIT           reduce using rule 6 (stmt -> print_stmt .)
    PRINTINFO       reduce using rule 6 (stmt -> print_stmt .)
    GENERATE        reduce using rule 6 (stmt -> print_stmt .)
    ID              reduce using rule 6 (stmt -> print_stmt .)


state 10

    (7) stmt -> generate_stmt .

    PROGRAM_END     reduce using rule 7 (stmt -> generate_stmt .)
    S_COLON         reduce using rule 7 (stmt -> generate_stmt .)
    TRAIT           reduce using rule 7 (stmt -> generate_stmt .)
    PRINTINFO       reduce using rule 7 (stmt -> generate_stmt .)
    GENERATE        reduce using rule 7 (stmt -> generate_stmt .)
    ID              reduce using rule 7 (stmt -> generate_stmt .)


state 11

    (8) stmt -> assign_stmt .

    PROGRAM_END     reduce using rule 8 (stmt -> assign_stmt .)
    S_COLON         reduce using rule 8 (stmt -> assign_stmt .)
    TRAIT           reduce using rule 8 (stmt -> assign_stmt .)
    PRINTINFO       reduce using rule 8 (stmt -> assign_stmt .)
    GENERATE        reduce using rule 8 (stmt -> assign_stmt .)
    ID              reduce using rule 8 (stmt -> assign_stmt .)


state 12

    (10) trait_decl -> TRAIT . trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON
    (11) trait_decl -> TRAIT . trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON
    (12) trait_id -> . ID

    ID              shift and go to state 21

    trait_id                       shift and go to state 20

state 13

    (115) print_stmt -> PRINTINFO . to_print S_COLON
    (117) to_print -> . ID
    (118) to_print -> . boolean_expr
    (119) to_print -> . unnamed_pred
    (120) boolean_expr -> . boolean_expr OR boolean_expr_a
    (121) boolean_expr -> . boolean_expr_a
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE
    (122) boolean_expr_a -> . boolean_expr_a XOR boolean_expr_b
    (123) boolean_expr_a -> . boolean_expr_b
    (84) pred_name -> . ID
    (124) boolean_expr_b -> . boolean_expr_b AND boolean_expr_c
    (125) boolean_expr_b -> . boolean_expr_c
    (126) boolean_expr_c -> . boolean_expr_c EQ boolean_expr_d
    (127) boolean_expr_c -> . boolean_expr_c NEQ boolean_expr_d
    (128) boolean_expr_c -> . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred

    ID              shift and go to state 23
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31
    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    to_print                       shift and go to state 22
    boolean_expr                   shift and go to state 24
    unnamed_pred                   shift and go to state 25
    boolean_expr_a                 shift and go to state 26
    pred_name                      shift and go to state 27
    boolean_expr_b                 shift and go to state 32
    boolean_expr_c                 shift and go to state 33
    boolean_expr_d                 shift and go to state 34
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39

state 14

    (116) generate_stmt -> GENERATE . to_print S_COLON
    (117) to_print -> . ID
    (118) to_print -> . boolean_expr
    (119) to_print -> . unnamed_pred
    (120) boolean_expr -> . boolean_expr OR boolean_expr_a
    (121) boolean_expr -> . boolean_expr_a
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE
    (122) boolean_expr_a -> . boolean_expr_a XOR boolean_expr_b
    (123) boolean_expr_a -> . boolean_expr_b
    (84) pred_name -> . ID
    (124) boolean_expr_b -> . boolean_expr_b AND boolean_expr_c
    (125) boolean_expr_b -> . boolean_expr_c
    (126) boolean_expr_c -> . boolean_expr_c EQ boolean_expr_d
    (127) boolean_expr_c -> . boolean_expr_c NEQ boolean_expr_d
    (128) boolean_expr_c -> . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred

    ID              shift and go to state 23
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31
    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    to_print                       shift and go to state 42
    boolean_expr                   shift and go to state 24
    unnamed_pred                   shift and go to state 25
    boolean_expr_a                 shift and go to state 26
    pred_name                      shift and go to state 27
    boolean_expr_b                 shift and go to state 32
    boolean_expr_c                 shift and go to state 33
    boolean_expr_d                 shift and go to state 34
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39

state 15

    (143) assign_stmt -> names . ASSIGN assign_expr S_COLON
    (144) names -> names . COMMA name

    ASSIGN          shift and go to state 43
    COMMA           shift and go to state 44


state 16

    (145) names -> name .

    ASSIGN          reduce using rule 145 (names -> name .)
    COMMA           reduce using rule 145 (names -> name .)
    S_COLON         reduce using rule 145 (names -> name .)


state 17

    (146) name -> ID .

    ASSIGN          reduce using rule 146 (name -> ID .)
    COMMA           reduce using rule 146 (name -> ID .)
    S_COLON         reduce using rule 146 (name -> ID .)


state 18

    (1) program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END . S_COLON

    S_COLON         shift and go to state 45


state 19

    (3) stmts -> stmts stmt .

    PROGRAM_END     reduce using rule 3 (stmts -> stmts stmt .)
    S_COLON         reduce using rule 3 (stmts -> stmts stmt .)
    TRAIT           reduce using rule 3 (stmts -> stmts stmt .)
    PRINTINFO       reduce using rule 3 (stmts -> stmts stmt .)
    GENERATE        reduce using rule 3 (stmts -> stmts stmt .)
    ID              reduce using rule 3 (stmts -> stmts stmt .)


state 20

    (10) trait_decl -> TRAIT trait_id . LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON
    (11) trait_decl -> TRAIT trait_id . LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON

    LP1             shift and go to state 46


state 21

    (12) trait_id -> ID .

    LP1             reduce using rule 12 (trait_id -> ID .)


state 22

    (115) print_stmt -> PRINTINFO to_print . S_COLON

    S_COLON         shift and go to state 47


state 23

    (117) to_print -> ID .
    (84) pred_name -> ID .

    S_COLON         reduce using rule 117 (to_print -> ID .)
    LP3             reduce using rule 84 (pred_name -> ID .)
    LP1             reduce using rule 84 (pred_name -> ID .)
    IMPLIES         reduce using rule 84 (pred_name -> ID .)


state 24

    (118) to_print -> boolean_expr .
    (120) boolean_expr -> boolean_expr . OR boolean_expr_a

    S_COLON         reduce using rule 118 (to_print -> boolean_expr .)
    OR              shift and go to state 48


state 25

    (119) to_print -> unnamed_pred .
    (79) unary_pred -> unnamed_pred .

    S_COLON         reduce using rule 119 (to_print -> unnamed_pred .)
    LP1             reduce using rule 79 (unary_pred -> unnamed_pred .)
    IMPLIES         reduce using rule 79 (unary_pred -> unnamed_pred .)


state 26

    (121) boolean_expr -> boolean_expr_a .
    (122) boolean_expr_a -> boolean_expr_a . XOR boolean_expr_b

    OR              reduce using rule 121 (boolean_expr -> boolean_expr_a .)
    S_COLON         reduce using rule 121 (boolean_expr -> boolean_expr_a .)
    RP1             reduce using rule 121 (boolean_expr -> boolean_expr_a .)
    XOR             shift and go to state 49


state 27

    (80) unnamed_pred -> pred_name . LP3 args RP3
    (78) unary_pred -> pred_name .

    LP3             shift and go to state 50
    LP1             reduce using rule 78 (unary_pred -> pred_name .)
    IMPLIES         reduce using rule 78 (unary_pred -> pred_name .)


state 28

    (81) unnamed_pred -> LP3 . pred_expr RP3
    (85) pred_expr -> . pred_expr OR pred_expr_a
    (86) pred_expr -> . pred_expr_a
    (87) pred_expr_a -> . pred_expr_a AND pred_expr_b
    (88) pred_expr_a -> . pred_expr_b
    (89) pred_expr_b -> . NOT pred_expr_c
    (90) pred_expr_b -> . pred_expr_c
    (91) pred_expr_c -> . unary_pred
    (92) pred_expr_c -> . LP1 pred_expr RP1
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 54
    LP1             shift and go to state 57
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    pred_expr                      shift and go to state 51
    pred_expr_a                    shift and go to state 52
    pred_expr_b                    shift and go to state 53
    pred_expr_c                    shift and go to state 55
    unary_pred                     shift and go to state 56
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 29

    (82) unnamed_pred -> TRAIT_OF . LP1 var_expr RP1

    LP1             shift and go to state 61


state 30

    (132) boolean_expr_e -> LP1 . boolean_expr RP1
    (136) atomic_boolean_expr -> LP1 . unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> LP1 . unary_pred NEQ unary_pred RP1
    (120) boolean_expr -> . boolean_expr OR boolean_expr_a
    (121) boolean_expr -> . boolean_expr_a
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (122) boolean_expr_a -> . boolean_expr_a XOR boolean_expr_b
    (123) boolean_expr_a -> . boolean_expr_b
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE
    (124) boolean_expr_b -> . boolean_expr_b AND boolean_expr_c
    (125) boolean_expr_b -> . boolean_expr_c
    (126) boolean_expr_c -> . boolean_expr_c EQ boolean_expr_d
    (127) boolean_expr_c -> . boolean_expr_c NEQ boolean_expr_d
    (128) boolean_expr_c -> . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31
    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41

    boolean_expr                   shift and go to state 62
    unary_pred                     shift and go to state 63
    boolean_expr_a                 shift and go to state 26
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59
    boolean_expr_b                 shift and go to state 32
    boolean_expr_c                 shift and go to state 33
    boolean_expr_d                 shift and go to state 34
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38

state 31

    (83) unnamed_pred -> NONE .

    S_COLON         reduce using rule 83 (unnamed_pred -> NONE .)
    LP1             reduce using rule 83 (unnamed_pred -> NONE .)
    IMPLIES         reduce using rule 83 (unnamed_pred -> NONE .)
    AND             reduce using rule 83 (unnamed_pred -> NONE .)
    RP3             reduce using rule 83 (unnamed_pred -> NONE .)
    OR              reduce using rule 83 (unnamed_pred -> NONE .)
    EQ              reduce using rule 83 (unnamed_pred -> NONE .)
    NEQ             reduce using rule 83 (unnamed_pred -> NONE .)
    RP1             reduce using rule 83 (unnamed_pred -> NONE .)
    DOT             reduce using rule 83 (unnamed_pred -> NONE .)
    XOR             reduce using rule 83 (unnamed_pred -> NONE .)
    COLON           reduce using rule 83 (unnamed_pred -> NONE .)
    COMMA           reduce using rule 83 (unnamed_pred -> NONE .)


state 32

    (123) boolean_expr_a -> boolean_expr_b .
    (124) boolean_expr_b -> boolean_expr_b . AND boolean_expr_c

    XOR             reduce using rule 123 (boolean_expr_a -> boolean_expr_b .)
    OR              reduce using rule 123 (boolean_expr_a -> boolean_expr_b .)
    S_COLON         reduce using rule 123 (boolean_expr_a -> boolean_expr_b .)
    RP1             reduce using rule 123 (boolean_expr_a -> boolean_expr_b .)
    AND             shift and go to state 64


state 33

    (125) boolean_expr_b -> boolean_expr_c .
    (126) boolean_expr_c -> boolean_expr_c . EQ boolean_expr_d
    (127) boolean_expr_c -> boolean_expr_c . NEQ boolean_expr_d

    AND             reduce using rule 125 (boolean_expr_b -> boolean_expr_c .)
    XOR             reduce using rule 125 (boolean_expr_b -> boolean_expr_c .)
    OR              reduce using rule 125 (boolean_expr_b -> boolean_expr_c .)
    S_COLON         reduce using rule 125 (boolean_expr_b -> boolean_expr_c .)
    RP1             reduce using rule 125 (boolean_expr_b -> boolean_expr_c .)
    EQ              shift and go to state 65
    NEQ             shift and go to state 66


state 34

    (128) boolean_expr_c -> boolean_expr_d .

    EQ              reduce using rule 128 (boolean_expr_c -> boolean_expr_d .)
    NEQ             reduce using rule 128 (boolean_expr_c -> boolean_expr_d .)
    AND             reduce using rule 128 (boolean_expr_c -> boolean_expr_d .)
    XOR             reduce using rule 128 (boolean_expr_c -> boolean_expr_d .)
    OR              reduce using rule 128 (boolean_expr_c -> boolean_expr_d .)
    S_COLON         reduce using rule 128 (boolean_expr_c -> boolean_expr_d .)
    RP1             reduce using rule 128 (boolean_expr_c -> boolean_expr_d .)


state 35

    (129) boolean_expr_d -> NOT . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    boolean_expr_e                 shift and go to state 67
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 36

    (130) boolean_expr_d -> boolean_expr_e .

    EQ              reduce using rule 130 (boolean_expr_d -> boolean_expr_e .)
    NEQ             reduce using rule 130 (boolean_expr_d -> boolean_expr_e .)
    AND             reduce using rule 130 (boolean_expr_d -> boolean_expr_e .)
    XOR             reduce using rule 130 (boolean_expr_d -> boolean_expr_e .)
    OR              reduce using rule 130 (boolean_expr_d -> boolean_expr_e .)
    S_COLON         reduce using rule 130 (boolean_expr_d -> boolean_expr_e .)
    RP1             reduce using rule 130 (boolean_expr_d -> boolean_expr_e .)


state 37

    (131) boolean_expr_e -> atomic_boolean_expr .

    EQ              reduce using rule 131 (boolean_expr_e -> atomic_boolean_expr .)
    NEQ             reduce using rule 131 (boolean_expr_e -> atomic_boolean_expr .)
    AND             reduce using rule 131 (boolean_expr_e -> atomic_boolean_expr .)
    XOR             reduce using rule 131 (boolean_expr_e -> atomic_boolean_expr .)
    OR              reduce using rule 131 (boolean_expr_e -> atomic_boolean_expr .)
    S_COLON         reduce using rule 131 (boolean_expr_e -> atomic_boolean_expr .)
    RP1             reduce using rule 131 (boolean_expr_e -> atomic_boolean_expr .)


state 38

    (133) atomic_boolean_expr -> constants .

    EQ              reduce using rule 133 (atomic_boolean_expr -> constants .)
    NEQ             reduce using rule 133 (atomic_boolean_expr -> constants .)
    AND             reduce using rule 133 (atomic_boolean_expr -> constants .)
    XOR             reduce using rule 133 (atomic_boolean_expr -> constants .)
    OR              reduce using rule 133 (atomic_boolean_expr -> constants .)
    S_COLON         reduce using rule 133 (atomic_boolean_expr -> constants .)
    RP1             reduce using rule 133 (atomic_boolean_expr -> constants .)


state 39

    (134) atomic_boolean_expr -> unary_pred . LP1 args RP1
    (135) atomic_boolean_expr -> unary_pred . IMPLIES unary_pred

    LP1             shift and go to state 68
    IMPLIES         shift and go to state 69


state 40

    (138) constants -> TRUE .

    EQ              reduce using rule 138 (constants -> TRUE .)
    NEQ             reduce using rule 138 (constants -> TRUE .)
    AND             reduce using rule 138 (constants -> TRUE .)
    XOR             reduce using rule 138 (constants -> TRUE .)
    OR              reduce using rule 138 (constants -> TRUE .)
    S_COLON         reduce using rule 138 (constants -> TRUE .)
    RP1             reduce using rule 138 (constants -> TRUE .)


state 41

    (139) constants -> FALSE .

    EQ              reduce using rule 139 (constants -> FALSE .)
    NEQ             reduce using rule 139 (constants -> FALSE .)
    AND             reduce using rule 139 (constants -> FALSE .)
    XOR             reduce using rule 139 (constants -> FALSE .)
    OR              reduce using rule 139 (constants -> FALSE .)
    S_COLON         reduce using rule 139 (constants -> FALSE .)
    RP1             reduce using rule 139 (constants -> FALSE .)


state 42

    (116) generate_stmt -> GENERATE to_print . S_COLON

    S_COLON         shift and go to state 70


state 43

    (143) assign_stmt -> names ASSIGN . assign_expr S_COLON
    (147) assign_expr -> . names ASSIGN assign_expr
    (148) assign_expr -> . names
    (144) names -> . names COMMA name
    (145) names -> . name
    (146) name -> . ID

    ID              shift and go to state 17

    names                          shift and go to state 71
    assign_expr                    shift and go to state 72
    name                           shift and go to state 16

state 44

    (144) names -> names COMMA . name
    (146) name -> . ID

    ID              shift and go to state 17

    name                           shift and go to state 73

state 45

    (1) program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON .

    $end            reduce using rule 1 (program -> PROGRAM_BEGIN S_COLON stmts PROGRAM_END S_COLON .)


state 46

    (10) trait_decl -> TRAIT trait_id LP1 . class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON
    (11) trait_decl -> TRAIT trait_id LP1 . class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON
    (13) class_args -> . main_arg COMMA sub_args
    (14) class_args -> . main_arg
    (15) main_arg -> . ID

    ID              shift and go to state 76

    class_args                     shift and go to state 74
    main_arg                       shift and go to state 75

state 47

    (115) print_stmt -> PRINTINFO to_print S_COLON .

    PROGRAM_END     reduce using rule 115 (print_stmt -> PRINTINFO to_print S_COLON .)
    S_COLON         reduce using rule 115 (print_stmt -> PRINTINFO to_print S_COLON .)
    TRAIT           reduce using rule 115 (print_stmt -> PRINTINFO to_print S_COLON .)
    PRINTINFO       reduce using rule 115 (print_stmt -> PRINTINFO to_print S_COLON .)
    GENERATE        reduce using rule 115 (print_stmt -> PRINTINFO to_print S_COLON .)
    ID              reduce using rule 115 (print_stmt -> PRINTINFO to_print S_COLON .)


state 48

    (120) boolean_expr -> boolean_expr OR . boolean_expr_a
    (122) boolean_expr_a -> . boolean_expr_a XOR boolean_expr_b
    (123) boolean_expr_a -> . boolean_expr_b
    (124) boolean_expr_b -> . boolean_expr_b AND boolean_expr_c
    (125) boolean_expr_b -> . boolean_expr_c
    (126) boolean_expr_c -> . boolean_expr_c EQ boolean_expr_d
    (127) boolean_expr_c -> . boolean_expr_c NEQ boolean_expr_d
    (128) boolean_expr_c -> . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    boolean_expr_a                 shift and go to state 77
    boolean_expr_b                 shift and go to state 32
    boolean_expr_c                 shift and go to state 33
    boolean_expr_d                 shift and go to state 34
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 49

    (122) boolean_expr_a -> boolean_expr_a XOR . boolean_expr_b
    (124) boolean_expr_b -> . boolean_expr_b AND boolean_expr_c
    (125) boolean_expr_b -> . boolean_expr_c
    (126) boolean_expr_c -> . boolean_expr_c EQ boolean_expr_d
    (127) boolean_expr_c -> . boolean_expr_c NEQ boolean_expr_d
    (128) boolean_expr_c -> . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    boolean_expr_b                 shift and go to state 78
    boolean_expr_c                 shift and go to state 33
    boolean_expr_d                 shift and go to state 34
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 50

    (80) unnamed_pred -> pred_name LP3 . args RP3
    (140) args -> . args COMMA arg
    (141) args -> . arg
    (142) arg -> . ID

    ID              shift and go to state 81

    args                           shift and go to state 79
    arg                            shift and go to state 80

state 51

    (81) unnamed_pred -> LP3 pred_expr . RP3
    (85) pred_expr -> pred_expr . OR pred_expr_a

    RP3             shift and go to state 82
    OR              shift and go to state 83


state 52

    (86) pred_expr -> pred_expr_a .
    (87) pred_expr_a -> pred_expr_a . AND pred_expr_b

    RP3             reduce using rule 86 (pred_expr -> pred_expr_a .)
    OR              reduce using rule 86 (pred_expr -> pred_expr_a .)
    RP1             reduce using rule 86 (pred_expr -> pred_expr_a .)
    AND             shift and go to state 84


state 53

    (88) pred_expr_a -> pred_expr_b .

    AND             reduce using rule 88 (pred_expr_a -> pred_expr_b .)
    RP3             reduce using rule 88 (pred_expr_a -> pred_expr_b .)
    OR              reduce using rule 88 (pred_expr_a -> pred_expr_b .)
    RP1             reduce using rule 88 (pred_expr_a -> pred_expr_b .)


state 54

    (89) pred_expr_b -> NOT . pred_expr_c
    (91) pred_expr_c -> . unary_pred
    (92) pred_expr_c -> . LP1 pred_expr RP1
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    LP1             shift and go to state 57
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    pred_expr_c                    shift and go to state 85
    unary_pred                     shift and go to state 56
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 55

    (90) pred_expr_b -> pred_expr_c .

    AND             reduce using rule 90 (pred_expr_b -> pred_expr_c .)
    RP3             reduce using rule 90 (pred_expr_b -> pred_expr_c .)
    OR              reduce using rule 90 (pred_expr_b -> pred_expr_c .)
    RP1             reduce using rule 90 (pred_expr_b -> pred_expr_c .)


state 56

    (91) pred_expr_c -> unary_pred .

    AND             reduce using rule 91 (pred_expr_c -> unary_pred .)
    RP3             reduce using rule 91 (pred_expr_c -> unary_pred .)
    OR              reduce using rule 91 (pred_expr_c -> unary_pred .)
    RP1             reduce using rule 91 (pred_expr_c -> unary_pred .)


state 57

    (92) pred_expr_c -> LP1 . pred_expr RP1
    (85) pred_expr -> . pred_expr OR pred_expr_a
    (86) pred_expr -> . pred_expr_a
    (87) pred_expr_a -> . pred_expr_a AND pred_expr_b
    (88) pred_expr_a -> . pred_expr_b
    (89) pred_expr_b -> . NOT pred_expr_c
    (90) pred_expr_b -> . pred_expr_c
    (91) pred_expr_c -> . unary_pred
    (92) pred_expr_c -> . LP1 pred_expr RP1
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 54
    LP1             shift and go to state 57
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    pred_expr                      shift and go to state 86
    pred_expr_a                    shift and go to state 52
    pred_expr_b                    shift and go to state 53
    pred_expr_c                    shift and go to state 55
    unary_pred                     shift and go to state 56
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 58

    (78) unary_pred -> pred_name .
    (80) unnamed_pred -> pred_name . LP3 args RP3

    AND             reduce using rule 78 (unary_pred -> pred_name .)
    RP3             reduce using rule 78 (unary_pred -> pred_name .)
    OR              reduce using rule 78 (unary_pred -> pred_name .)
    EQ              reduce using rule 78 (unary_pred -> pred_name .)
    NEQ             reduce using rule 78 (unary_pred -> pred_name .)
    LP1             reduce using rule 78 (unary_pred -> pred_name .)
    IMPLIES         reduce using rule 78 (unary_pred -> pred_name .)
    RP1             reduce using rule 78 (unary_pred -> pred_name .)
    DOT             reduce using rule 78 (unary_pred -> pred_name .)
    XOR             reduce using rule 78 (unary_pred -> pred_name .)
    S_COLON         reduce using rule 78 (unary_pred -> pred_name .)
    COLON           reduce using rule 78 (unary_pred -> pred_name .)
    COMMA           reduce using rule 78 (unary_pred -> pred_name .)
    LP3             shift and go to state 50


state 59

    (79) unary_pred -> unnamed_pred .

    AND             reduce using rule 79 (unary_pred -> unnamed_pred .)
    RP3             reduce using rule 79 (unary_pred -> unnamed_pred .)
    OR              reduce using rule 79 (unary_pred -> unnamed_pred .)
    EQ              reduce using rule 79 (unary_pred -> unnamed_pred .)
    NEQ             reduce using rule 79 (unary_pred -> unnamed_pred .)
    LP1             reduce using rule 79 (unary_pred -> unnamed_pred .)
    IMPLIES         reduce using rule 79 (unary_pred -> unnamed_pred .)
    RP1             reduce using rule 79 (unary_pred -> unnamed_pred .)
    DOT             reduce using rule 79 (unary_pred -> unnamed_pred .)
    XOR             reduce using rule 79 (unary_pred -> unnamed_pred .)
    S_COLON         reduce using rule 79 (unary_pred -> unnamed_pred .)
    COLON           reduce using rule 79 (unary_pred -> unnamed_pred .)
    COMMA           reduce using rule 79 (unary_pred -> unnamed_pred .)


state 60

    (84) pred_name -> ID .

    LP3             reduce using rule 84 (pred_name -> ID .)
    AND             reduce using rule 84 (pred_name -> ID .)
    RP3             reduce using rule 84 (pred_name -> ID .)
    OR              reduce using rule 84 (pred_name -> ID .)
    EQ              reduce using rule 84 (pred_name -> ID .)
    NEQ             reduce using rule 84 (pred_name -> ID .)
    LP1             reduce using rule 84 (pred_name -> ID .)
    IMPLIES         reduce using rule 84 (pred_name -> ID .)
    RP1             reduce using rule 84 (pred_name -> ID .)
    DOT             reduce using rule 84 (pred_name -> ID .)
    XOR             reduce using rule 84 (pred_name -> ID .)
    S_COLON         reduce using rule 84 (pred_name -> ID .)
    COLON           reduce using rule 84 (pred_name -> ID .)
    COMMA           reduce using rule 84 (pred_name -> ID .)


state 61

    (82) unnamed_pred -> TRAIT_OF LP1 . var_expr RP1
    (93) var_expr -> . unary_pred DOT member_var_name
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    var_expr                       shift and go to state 87
    unary_pred                     shift and go to state 88
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 62

    (132) boolean_expr_e -> LP1 boolean_expr . RP1
    (120) boolean_expr -> boolean_expr . OR boolean_expr_a

    RP1             shift and go to state 89
    OR              shift and go to state 48


state 63

    (136) atomic_boolean_expr -> LP1 unary_pred . EQ unary_pred RP1
    (137) atomic_boolean_expr -> LP1 unary_pred . NEQ unary_pred RP1
    (134) atomic_boolean_expr -> unary_pred . LP1 args RP1
    (135) atomic_boolean_expr -> unary_pred . IMPLIES unary_pred

    EQ              shift and go to state 90
    NEQ             shift and go to state 91
    LP1             shift and go to state 68
    IMPLIES         shift and go to state 69


state 64

    (124) boolean_expr_b -> boolean_expr_b AND . boolean_expr_c
    (126) boolean_expr_c -> . boolean_expr_c EQ boolean_expr_d
    (127) boolean_expr_c -> . boolean_expr_c NEQ boolean_expr_d
    (128) boolean_expr_c -> . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    boolean_expr_c                 shift and go to state 92
    boolean_expr_d                 shift and go to state 34
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 65

    (126) boolean_expr_c -> boolean_expr_c EQ . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    boolean_expr_d                 shift and go to state 93
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 66

    (127) boolean_expr_c -> boolean_expr_c NEQ . boolean_expr_d
    (129) boolean_expr_d -> . NOT boolean_expr_e
    (130) boolean_expr_d -> . boolean_expr_e
    (131) boolean_expr_e -> . atomic_boolean_expr
    (132) boolean_expr_e -> . LP1 boolean_expr RP1
    (133) atomic_boolean_expr -> . constants
    (134) atomic_boolean_expr -> . unary_pred LP1 args RP1
    (135) atomic_boolean_expr -> . unary_pred IMPLIES unary_pred
    (136) atomic_boolean_expr -> . LP1 unary_pred EQ unary_pred RP1
    (137) atomic_boolean_expr -> . LP1 unary_pred NEQ unary_pred RP1
    (138) constants -> . TRUE
    (139) constants -> . FALSE
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 35
    LP1             shift and go to state 30
    TRUE            shift and go to state 40
    FALSE           shift and go to state 41
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    boolean_expr_d                 shift and go to state 94
    boolean_expr_e                 shift and go to state 36
    atomic_boolean_expr            shift and go to state 37
    constants                      shift and go to state 38
    unary_pred                     shift and go to state 39
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 67

    (129) boolean_expr_d -> NOT boolean_expr_e .

    EQ              reduce using rule 129 (boolean_expr_d -> NOT boolean_expr_e .)
    NEQ             reduce using rule 129 (boolean_expr_d -> NOT boolean_expr_e .)
    AND             reduce using rule 129 (boolean_expr_d -> NOT boolean_expr_e .)
    XOR             reduce using rule 129 (boolean_expr_d -> NOT boolean_expr_e .)
    OR              reduce using rule 129 (boolean_expr_d -> NOT boolean_expr_e .)
    S_COLON         reduce using rule 129 (boolean_expr_d -> NOT boolean_expr_e .)
    RP1             reduce using rule 129 (boolean_expr_d -> NOT boolean_expr_e .)


state 68

    (134) atomic_boolean_expr -> unary_pred LP1 . args RP1
    (140) args -> . args COMMA arg
    (141) args -> . arg
    (142) arg -> . ID

    ID              shift and go to state 81

    args                           shift and go to state 95
    arg                            shift and go to state 80

state 69

    (135) atomic_boolean_expr -> unary_pred IMPLIES . unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 96
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 70

    (116) generate_stmt -> GENERATE to_print S_COLON .

    PROGRAM_END     reduce using rule 116 (generate_stmt -> GENERATE to_print S_COLON .)
    S_COLON         reduce using rule 116 (generate_stmt -> GENERATE to_print S_COLON .)
    TRAIT           reduce using rule 116 (generate_stmt -> GENERATE to_print S_COLON .)
    PRINTINFO       reduce using rule 116 (generate_stmt -> GENERATE to_print S_COLON .)
    GENERATE        reduce using rule 116 (generate_stmt -> GENERATE to_print S_COLON .)
    ID              reduce using rule 116 (generate_stmt -> GENERATE to_print S_COLON .)


state 71

    (147) assign_expr -> names . ASSIGN assign_expr
    (148) assign_expr -> names .
    (144) names -> names . COMMA name

    ASSIGN          shift and go to state 97
    S_COLON         reduce using rule 148 (assign_expr -> names .)
    COMMA           shift and go to state 44


state 72

    (143) assign_stmt -> names ASSIGN assign_expr . S_COLON

    S_COLON         shift and go to state 98


state 73

    (144) names -> names COMMA name .

    ASSIGN          reduce using rule 144 (names -> names COMMA name .)
    COMMA           reduce using rule 144 (names -> names COMMA name .)
    S_COLON         reduce using rule 144 (names -> names COMMA name .)


state 74

    (10) trait_decl -> TRAIT trait_id LP1 class_args . RP1 COLON LP2 trait_decl_stmts RP2 S_COLON
    (11) trait_decl -> TRAIT trait_id LP1 class_args . RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON

    RP1             shift and go to state 99


state 75

    (13) class_args -> main_arg . COMMA sub_args
    (14) class_args -> main_arg .

    COMMA           shift and go to state 100
    RP1             reduce using rule 14 (class_args -> main_arg .)


state 76

    (15) main_arg -> ID .

    COMMA           reduce using rule 15 (main_arg -> ID .)
    RP1             reduce using rule 15 (main_arg -> ID .)


state 77

    (120) boolean_expr -> boolean_expr OR boolean_expr_a .
    (122) boolean_expr_a -> boolean_expr_a . XOR boolean_expr_b

    OR              reduce using rule 120 (boolean_expr -> boolean_expr OR boolean_expr_a .)
    S_COLON         reduce using rule 120 (boolean_expr -> boolean_expr OR boolean_expr_a .)
    RP1             reduce using rule 120 (boolean_expr -> boolean_expr OR boolean_expr_a .)
    XOR             shift and go to state 49


state 78

    (122) boolean_expr_a -> boolean_expr_a XOR boolean_expr_b .
    (124) boolean_expr_b -> boolean_expr_b . AND boolean_expr_c

    XOR             reduce using rule 122 (boolean_expr_a -> boolean_expr_a XOR boolean_expr_b .)
    OR              reduce using rule 122 (boolean_expr_a -> boolean_expr_a XOR boolean_expr_b .)
    S_COLON         reduce using rule 122 (boolean_expr_a -> boolean_expr_a XOR boolean_expr_b .)
    RP1             reduce using rule 122 (boolean_expr_a -> boolean_expr_a XOR boolean_expr_b .)
    AND             shift and go to state 64


state 79

    (80) unnamed_pred -> pred_name LP3 args . RP3
    (140) args -> args . COMMA arg

    RP3             shift and go to state 101
    COMMA           shift and go to state 102


state 80

    (141) args -> arg .

    RP3             reduce using rule 141 (args -> arg .)
    COMMA           reduce using rule 141 (args -> arg .)
    RP1             reduce using rule 141 (args -> arg .)


state 81

    (142) arg -> ID .

    RP3             reduce using rule 142 (arg -> ID .)
    COMMA           reduce using rule 142 (arg -> ID .)
    RP1             reduce using rule 142 (arg -> ID .)


state 82

    (81) unnamed_pred -> LP3 pred_expr RP3 .

    S_COLON         reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    LP1             reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    IMPLIES         reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    AND             reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    RP3             reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    OR              reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    EQ              reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    NEQ             reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    RP1             reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    DOT             reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    XOR             reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    COLON           reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)
    COMMA           reduce using rule 81 (unnamed_pred -> LP3 pred_expr RP3 .)


state 83

    (85) pred_expr -> pred_expr OR . pred_expr_a
    (87) pred_expr_a -> . pred_expr_a AND pred_expr_b
    (88) pred_expr_a -> . pred_expr_b
    (89) pred_expr_b -> . NOT pred_expr_c
    (90) pred_expr_b -> . pred_expr_c
    (91) pred_expr_c -> . unary_pred
    (92) pred_expr_c -> . LP1 pred_expr RP1
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 54
    LP1             shift and go to state 57
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    pred_expr_a                    shift and go to state 103
    pred_expr_b                    shift and go to state 53
    pred_expr_c                    shift and go to state 55
    unary_pred                     shift and go to state 56
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 84

    (87) pred_expr_a -> pred_expr_a AND . pred_expr_b
    (89) pred_expr_b -> . NOT pred_expr_c
    (90) pred_expr_b -> . pred_expr_c
    (91) pred_expr_c -> . unary_pred
    (92) pred_expr_c -> . LP1 pred_expr RP1
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    NOT             shift and go to state 54
    LP1             shift and go to state 57
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    pred_expr_b                    shift and go to state 104
    pred_expr_c                    shift and go to state 55
    unary_pred                     shift and go to state 56
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 85

    (89) pred_expr_b -> NOT pred_expr_c .

    AND             reduce using rule 89 (pred_expr_b -> NOT pred_expr_c .)
    RP3             reduce using rule 89 (pred_expr_b -> NOT pred_expr_c .)
    OR              reduce using rule 89 (pred_expr_b -> NOT pred_expr_c .)
    RP1             reduce using rule 89 (pred_expr_b -> NOT pred_expr_c .)


state 86

    (92) pred_expr_c -> LP1 pred_expr . RP1
    (85) pred_expr -> pred_expr . OR pred_expr_a

    RP1             shift and go to state 105
    OR              shift and go to state 83


state 87

    (82) unnamed_pred -> TRAIT_OF LP1 var_expr . RP1

    RP1             shift and go to state 106


state 88

    (93) var_expr -> unary_pred . DOT member_var_name

    DOT             shift and go to state 107


state 89

    (132) boolean_expr_e -> LP1 boolean_expr RP1 .

    EQ              reduce using rule 132 (boolean_expr_e -> LP1 boolean_expr RP1 .)
    NEQ             reduce using rule 132 (boolean_expr_e -> LP1 boolean_expr RP1 .)
    AND             reduce using rule 132 (boolean_expr_e -> LP1 boolean_expr RP1 .)
    XOR             reduce using rule 132 (boolean_expr_e -> LP1 boolean_expr RP1 .)
    OR              reduce using rule 132 (boolean_expr_e -> LP1 boolean_expr RP1 .)
    S_COLON         reduce using rule 132 (boolean_expr_e -> LP1 boolean_expr RP1 .)
    RP1             reduce using rule 132 (boolean_expr_e -> LP1 boolean_expr RP1 .)


state 90

    (136) atomic_boolean_expr -> LP1 unary_pred EQ . unary_pred RP1
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 108
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 91

    (137) atomic_boolean_expr -> LP1 unary_pred NEQ . unary_pred RP1
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 109
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 92

    (124) boolean_expr_b -> boolean_expr_b AND boolean_expr_c .
    (126) boolean_expr_c -> boolean_expr_c . EQ boolean_expr_d
    (127) boolean_expr_c -> boolean_expr_c . NEQ boolean_expr_d

    AND             reduce using rule 124 (boolean_expr_b -> boolean_expr_b AND boolean_expr_c .)
    XOR             reduce using rule 124 (boolean_expr_b -> boolean_expr_b AND boolean_expr_c .)
    OR              reduce using rule 124 (boolean_expr_b -> boolean_expr_b AND boolean_expr_c .)
    S_COLON         reduce using rule 124 (boolean_expr_b -> boolean_expr_b AND boolean_expr_c .)
    RP1             reduce using rule 124 (boolean_expr_b -> boolean_expr_b AND boolean_expr_c .)
    EQ              shift and go to state 65
    NEQ             shift and go to state 66


state 93

    (126) boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .

    EQ              reduce using rule 126 (boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .)
    NEQ             reduce using rule 126 (boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .)
    AND             reduce using rule 126 (boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .)
    XOR             reduce using rule 126 (boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .)
    OR              reduce using rule 126 (boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .)
    S_COLON         reduce using rule 126 (boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .)
    RP1             reduce using rule 126 (boolean_expr_c -> boolean_expr_c EQ boolean_expr_d .)


state 94

    (127) boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .

    EQ              reduce using rule 127 (boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .)
    NEQ             reduce using rule 127 (boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .)
    AND             reduce using rule 127 (boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .)
    XOR             reduce using rule 127 (boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .)
    OR              reduce using rule 127 (boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .)
    S_COLON         reduce using rule 127 (boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .)
    RP1             reduce using rule 127 (boolean_expr_c -> boolean_expr_c NEQ boolean_expr_d .)


state 95

    (134) atomic_boolean_expr -> unary_pred LP1 args . RP1
    (140) args -> args . COMMA arg

    RP1             shift and go to state 110
    COMMA           shift and go to state 102


state 96

    (135) atomic_boolean_expr -> unary_pred IMPLIES unary_pred .

    EQ              reduce using rule 135 (atomic_boolean_expr -> unary_pred IMPLIES unary_pred .)
    NEQ             reduce using rule 135 (atomic_boolean_expr -> unary_pred IMPLIES unary_pred .)
    AND             reduce using rule 135 (atomic_boolean_expr -> unary_pred IMPLIES unary_pred .)
    XOR             reduce using rule 135 (atomic_boolean_expr -> unary_pred IMPLIES unary_pred .)
    OR              reduce using rule 135 (atomic_boolean_expr -> unary_pred IMPLIES unary_pred .)
    S_COLON         reduce using rule 135 (atomic_boolean_expr -> unary_pred IMPLIES unary_pred .)
    RP1             reduce using rule 135 (atomic_boolean_expr -> unary_pred IMPLIES unary_pred .)


state 97

    (147) assign_expr -> names ASSIGN . assign_expr
    (147) assign_expr -> . names ASSIGN assign_expr
    (148) assign_expr -> . names
    (144) names -> . names COMMA name
    (145) names -> . name
    (146) name -> . ID

    ID              shift and go to state 17

    names                          shift and go to state 71
    assign_expr                    shift and go to state 111
    name                           shift and go to state 16

state 98

    (143) assign_stmt -> names ASSIGN assign_expr S_COLON .

    PROGRAM_END     reduce using rule 143 (assign_stmt -> names ASSIGN assign_expr S_COLON .)
    S_COLON         reduce using rule 143 (assign_stmt -> names ASSIGN assign_expr S_COLON .)
    TRAIT           reduce using rule 143 (assign_stmt -> names ASSIGN assign_expr S_COLON .)
    PRINTINFO       reduce using rule 143 (assign_stmt -> names ASSIGN assign_expr S_COLON .)
    GENERATE        reduce using rule 143 (assign_stmt -> names ASSIGN assign_expr S_COLON .)
    ID              reduce using rule 143 (assign_stmt -> names ASSIGN assign_expr S_COLON .)


state 99

    (10) trait_decl -> TRAIT trait_id LP1 class_args RP1 . COLON LP2 trait_decl_stmts RP2 S_COLON
    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 . EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON

    COLON           shift and go to state 112
    EXTENDS         shift and go to state 113


state 100

    (13) class_args -> main_arg COMMA . sub_args
    (16) sub_args -> . necessary_args COMMA optional_args
    (17) sub_args -> . necessary_args
    (18) sub_args -> . optional_args
    (19) necessary_args -> . necessary_args COMMA necessary_arg
    (20) necessary_args -> . necessary_arg
    (22) optional_args -> . optional_args COMMA optional_arg
    (23) optional_args -> . optional_arg
    (21) necessary_arg -> . ID
    (24) optional_arg -> . ID ASSIGN unary_pred

    ID              shift and go to state 119

    sub_args                       shift and go to state 114
    necessary_args                 shift and go to state 115
    optional_args                  shift and go to state 116
    necessary_arg                  shift and go to state 117
    optional_arg                   shift and go to state 118

state 101

    (80) unnamed_pred -> pred_name LP3 args RP3 .

    S_COLON         reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    LP1             reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    IMPLIES         reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    AND             reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    RP3             reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    OR              reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    EQ              reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    NEQ             reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    RP1             reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    DOT             reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    XOR             reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    COLON           reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)
    COMMA           reduce using rule 80 (unnamed_pred -> pred_name LP3 args RP3 .)


state 102

    (140) args -> args COMMA . arg
    (142) arg -> . ID

    ID              shift and go to state 81

    arg                            shift and go to state 120

state 103

    (85) pred_expr -> pred_expr OR pred_expr_a .
    (87) pred_expr_a -> pred_expr_a . AND pred_expr_b

    RP3             reduce using rule 85 (pred_expr -> pred_expr OR pred_expr_a .)
    OR              reduce using rule 85 (pred_expr -> pred_expr OR pred_expr_a .)
    RP1             reduce using rule 85 (pred_expr -> pred_expr OR pred_expr_a .)
    AND             shift and go to state 84


state 104

    (87) pred_expr_a -> pred_expr_a AND pred_expr_b .

    AND             reduce using rule 87 (pred_expr_a -> pred_expr_a AND pred_expr_b .)
    RP3             reduce using rule 87 (pred_expr_a -> pred_expr_a AND pred_expr_b .)
    OR              reduce using rule 87 (pred_expr_a -> pred_expr_a AND pred_expr_b .)
    RP1             reduce using rule 87 (pred_expr_a -> pred_expr_a AND pred_expr_b .)


state 105

    (92) pred_expr_c -> LP1 pred_expr RP1 .

    AND             reduce using rule 92 (pred_expr_c -> LP1 pred_expr RP1 .)
    RP3             reduce using rule 92 (pred_expr_c -> LP1 pred_expr RP1 .)
    OR              reduce using rule 92 (pred_expr_c -> LP1 pred_expr RP1 .)
    RP1             reduce using rule 92 (pred_expr_c -> LP1 pred_expr RP1 .)


state 106

    (82) unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .

    S_COLON         reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    LP1             reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    IMPLIES         reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    AND             reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    RP3             reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    OR              reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    EQ              reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    NEQ             reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    RP1             reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    DOT             reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    XOR             reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    COLON           reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)
    COMMA           reduce using rule 82 (unnamed_pred -> TRAIT_OF LP1 var_expr RP1 .)


state 107

    (93) var_expr -> unary_pred DOT . member_var_name
    (94) member_var_name -> . ID

    ID              shift and go to state 122

    member_var_name                shift and go to state 121

state 108

    (136) atomic_boolean_expr -> LP1 unary_pred EQ unary_pred . RP1

    RP1             shift and go to state 123


state 109

    (137) atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred . RP1

    RP1             shift and go to state 124


state 110

    (134) atomic_boolean_expr -> unary_pred LP1 args RP1 .

    EQ              reduce using rule 134 (atomic_boolean_expr -> unary_pred LP1 args RP1 .)
    NEQ             reduce using rule 134 (atomic_boolean_expr -> unary_pred LP1 args RP1 .)
    AND             reduce using rule 134 (atomic_boolean_expr -> unary_pred LP1 args RP1 .)
    XOR             reduce using rule 134 (atomic_boolean_expr -> unary_pred LP1 args RP1 .)
    OR              reduce using rule 134 (atomic_boolean_expr -> unary_pred LP1 args RP1 .)
    S_COLON         reduce using rule 134 (atomic_boolean_expr -> unary_pred LP1 args RP1 .)
    RP1             reduce using rule 134 (atomic_boolean_expr -> unary_pred LP1 args RP1 .)


state 111

    (147) assign_expr -> names ASSIGN assign_expr .

    S_COLON         reduce using rule 147 (assign_expr -> names ASSIGN assign_expr .)


state 112

    (10) trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON . LP2 trait_decl_stmts RP2 S_COLON

    LP2             shift and go to state 125


state 113

    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS . unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 126
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 114

    (13) class_args -> main_arg COMMA sub_args .

    RP1             reduce using rule 13 (class_args -> main_arg COMMA sub_args .)


state 115

    (16) sub_args -> necessary_args . COMMA optional_args
    (17) sub_args -> necessary_args .
    (19) necessary_args -> necessary_args . COMMA necessary_arg

    COMMA           shift and go to state 127
    RP1             reduce using rule 17 (sub_args -> necessary_args .)


state 116

    (18) sub_args -> optional_args .
    (22) optional_args -> optional_args . COMMA optional_arg

    RP1             reduce using rule 18 (sub_args -> optional_args .)
    COMMA           shift and go to state 128


state 117

    (20) necessary_args -> necessary_arg .

    COMMA           reduce using rule 20 (necessary_args -> necessary_arg .)
    RP1             reduce using rule 20 (necessary_args -> necessary_arg .)


state 118

    (23) optional_args -> optional_arg .

    COMMA           reduce using rule 23 (optional_args -> optional_arg .)
    RP1             reduce using rule 23 (optional_args -> optional_arg .)


state 119

    (21) necessary_arg -> ID .
    (24) optional_arg -> ID . ASSIGN unary_pred

    COMMA           reduce using rule 21 (necessary_arg -> ID .)
    RP1             reduce using rule 21 (necessary_arg -> ID .)
    ASSIGN          shift and go to state 129


state 120

    (140) args -> args COMMA arg .

    RP3             reduce using rule 140 (args -> args COMMA arg .)
    COMMA           reduce using rule 140 (args -> args COMMA arg .)
    RP1             reduce using rule 140 (args -> args COMMA arg .)


state 121

    (93) var_expr -> unary_pred DOT member_var_name .

    RP1             reduce using rule 93 (var_expr -> unary_pred DOT member_var_name .)


state 122

    (94) member_var_name -> ID .

    RP1             reduce using rule 94 (member_var_name -> ID .)


state 123

    (136) atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .

    EQ              reduce using rule 136 (atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .)
    NEQ             reduce using rule 136 (atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .)
    AND             reduce using rule 136 (atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .)
    XOR             reduce using rule 136 (atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .)
    OR              reduce using rule 136 (atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .)
    S_COLON         reduce using rule 136 (atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .)
    RP1             reduce using rule 136 (atomic_boolean_expr -> LP1 unary_pred EQ unary_pred RP1 .)


state 124

    (137) atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .

    EQ              reduce using rule 137 (atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .)
    NEQ             reduce using rule 137 (atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .)
    AND             reduce using rule 137 (atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .)
    XOR             reduce using rule 137 (atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .)
    OR              reduce using rule 137 (atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .)
    S_COLON         reduce using rule 137 (atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .)
    RP1             reduce using rule 137 (atomic_boolean_expr -> LP1 unary_pred NEQ unary_pred RP1 .)


state 125

    (10) trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 . trait_decl_stmts RP2 S_COLON
    (25) trait_decl_stmts -> . trait_decl_stmts trait_decl_stmt
    (26) trait_decl_stmts -> . trait_decl_stmt
    (27) trait_decl_stmts -> . PASS S_COLON
    (28) trait_decl_stmt -> . FN COLON LP2 decl_fn_stmts RP2 S_COLON
    (29) trait_decl_stmt -> . VAR COLON LP2 decl_stmts RP2 S_COLON
    (30) trait_decl_stmt -> . CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON
    (31) trait_decl_stmt -> . CLS_VAR COLON LP2 decl_stmts RP2 S_COLON
    (32) trait_decl_stmt -> . STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON
    (149) trait_decl_stmt -> . error S_COLON
    (150) trait_decl_stmt -> . error LP2 error S_COLON RP2 S_COLON

    PASS            shift and go to state 132
    FN              shift and go to state 133
    VAR             shift and go to state 134
    CLS_FN          shift and go to state 135
    CLS_VAR         shift and go to state 136
    STATIC_FN       shift and go to state 137
    error           shift and go to state 138

    trait_decl_stmts               shift and go to state 130
    trait_decl_stmt                shift and go to state 131

state 126

    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred . COLON LP2 trait_decl_stmts RP2 S_COLON

    COLON           shift and go to state 139


state 127

    (16) sub_args -> necessary_args COMMA . optional_args
    (19) necessary_args -> necessary_args COMMA . necessary_arg
    (22) optional_args -> . optional_args COMMA optional_arg
    (23) optional_args -> . optional_arg
    (21) necessary_arg -> . ID
    (24) optional_arg -> . ID ASSIGN unary_pred

    ID              shift and go to state 119

    optional_args                  shift and go to state 140
    necessary_arg                  shift and go to state 141
    optional_arg                   shift and go to state 118

state 128

    (22) optional_args -> optional_args COMMA . optional_arg
    (24) optional_arg -> . ID ASSIGN unary_pred

    ID              shift and go to state 143

    optional_arg                   shift and go to state 142

state 129

    (24) optional_arg -> ID ASSIGN . unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 144
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 130

    (10) trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts . RP2 S_COLON
    (25) trait_decl_stmts -> trait_decl_stmts . trait_decl_stmt
    (28) trait_decl_stmt -> . FN COLON LP2 decl_fn_stmts RP2 S_COLON
    (29) trait_decl_stmt -> . VAR COLON LP2 decl_stmts RP2 S_COLON
    (30) trait_decl_stmt -> . CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON
    (31) trait_decl_stmt -> . CLS_VAR COLON LP2 decl_stmts RP2 S_COLON
    (32) trait_decl_stmt -> . STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON
    (149) trait_decl_stmt -> . error S_COLON
    (150) trait_decl_stmt -> . error LP2 error S_COLON RP2 S_COLON

    RP2             shift and go to state 145
    FN              shift and go to state 133
    VAR             shift and go to state 134
    CLS_FN          shift and go to state 135
    CLS_VAR         shift and go to state 136
    STATIC_FN       shift and go to state 137
    error           shift and go to state 138

    trait_decl_stmt                shift and go to state 146

state 131

    (26) trait_decl_stmts -> trait_decl_stmt .

    RP2             reduce using rule 26 (trait_decl_stmts -> trait_decl_stmt .)
    FN              reduce using rule 26 (trait_decl_stmts -> trait_decl_stmt .)
    VAR             reduce using rule 26 (trait_decl_stmts -> trait_decl_stmt .)
    CLS_FN          reduce using rule 26 (trait_decl_stmts -> trait_decl_stmt .)
    CLS_VAR         reduce using rule 26 (trait_decl_stmts -> trait_decl_stmt .)
    STATIC_FN       reduce using rule 26 (trait_decl_stmts -> trait_decl_stmt .)
    error           reduce using rule 26 (trait_decl_stmts -> trait_decl_stmt .)


state 132

    (27) trait_decl_stmts -> PASS . S_COLON

    S_COLON         shift and go to state 147


state 133

    (28) trait_decl_stmt -> FN . COLON LP2 decl_fn_stmts RP2 S_COLON

    COLON           shift and go to state 148


state 134

    (29) trait_decl_stmt -> VAR . COLON LP2 decl_stmts RP2 S_COLON

    COLON           shift and go to state 149


state 135

    (30) trait_decl_stmt -> CLS_FN . COLON LP2 decl_cls_fn_stmts RP2 S_COLON

    COLON           shift and go to state 150


state 136

    (31) trait_decl_stmt -> CLS_VAR . COLON LP2 decl_stmts RP2 S_COLON

    COLON           shift and go to state 151


state 137

    (32) trait_decl_stmt -> STATIC_FN . COLON LP2 decl_static_fn_stmts RP2 S_COLON

    COLON           shift and go to state 152


state 138

    (149) trait_decl_stmt -> error . S_COLON
    (150) trait_decl_stmt -> error . LP2 error S_COLON RP2 S_COLON

    S_COLON         shift and go to state 153
    LP2             shift and go to state 154


state 139

    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON . LP2 trait_decl_stmts RP2 S_COLON

    LP2             shift and go to state 155


state 140

    (16) sub_args -> necessary_args COMMA optional_args .
    (22) optional_args -> optional_args . COMMA optional_arg

    RP1             reduce using rule 16 (sub_args -> necessary_args COMMA optional_args .)
    COMMA           shift and go to state 128


state 141

    (19) necessary_args -> necessary_args COMMA necessary_arg .

    COMMA           reduce using rule 19 (necessary_args -> necessary_args COMMA necessary_arg .)
    RP1             reduce using rule 19 (necessary_args -> necessary_args COMMA necessary_arg .)


state 142

    (22) optional_args -> optional_args COMMA optional_arg .

    COMMA           reduce using rule 22 (optional_args -> optional_args COMMA optional_arg .)
    RP1             reduce using rule 22 (optional_args -> optional_args COMMA optional_arg .)


state 143

    (24) optional_arg -> ID . ASSIGN unary_pred

    ASSIGN          shift and go to state 129


state 144

    (24) optional_arg -> ID ASSIGN unary_pred .

    COMMA           reduce using rule 24 (optional_arg -> ID ASSIGN unary_pred .)
    RP1             reduce using rule 24 (optional_arg -> ID ASSIGN unary_pred .)


state 145

    (10) trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 . S_COLON

    S_COLON         shift and go to state 156


state 146

    (25) trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .

    RP2             reduce using rule 25 (trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .)
    FN              reduce using rule 25 (trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .)
    VAR             reduce using rule 25 (trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .)
    CLS_FN          reduce using rule 25 (trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .)
    CLS_VAR         reduce using rule 25 (trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .)
    STATIC_FN       reduce using rule 25 (trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .)
    error           reduce using rule 25 (trait_decl_stmts -> trait_decl_stmts trait_decl_stmt .)


state 147

    (27) trait_decl_stmts -> PASS S_COLON .

    RP2             reduce using rule 27 (trait_decl_stmts -> PASS S_COLON .)
    FN              reduce using rule 27 (trait_decl_stmts -> PASS S_COLON .)
    VAR             reduce using rule 27 (trait_decl_stmts -> PASS S_COLON .)
    CLS_FN          reduce using rule 27 (trait_decl_stmts -> PASS S_COLON .)
    CLS_VAR         reduce using rule 27 (trait_decl_stmts -> PASS S_COLON .)
    STATIC_FN       reduce using rule 27 (trait_decl_stmts -> PASS S_COLON .)
    error           reduce using rule 27 (trait_decl_stmts -> PASS S_COLON .)


state 148

    (28) trait_decl_stmt -> FN COLON . LP2 decl_fn_stmts RP2 S_COLON

    LP2             shift and go to state 157


state 149

    (29) trait_decl_stmt -> VAR COLON . LP2 decl_stmts RP2 S_COLON

    LP2             shift and go to state 158


state 150

    (30) trait_decl_stmt -> CLS_FN COLON . LP2 decl_cls_fn_stmts RP2 S_COLON

    LP2             shift and go to state 159


state 151

    (31) trait_decl_stmt -> CLS_VAR COLON . LP2 decl_stmts RP2 S_COLON

    LP2             shift and go to state 160


state 152

    (32) trait_decl_stmt -> STATIC_FN COLON . LP2 decl_static_fn_stmts RP2 S_COLON

    LP2             shift and go to state 161


state 153

    (149) trait_decl_stmt -> error S_COLON .

    RP2             reduce using rule 149 (trait_decl_stmt -> error S_COLON .)
    FN              reduce using rule 149 (trait_decl_stmt -> error S_COLON .)
    VAR             reduce using rule 149 (trait_decl_stmt -> error S_COLON .)
    CLS_FN          reduce using rule 149 (trait_decl_stmt -> error S_COLON .)
    CLS_VAR         reduce using rule 149 (trait_decl_stmt -> error S_COLON .)
    STATIC_FN       reduce using rule 149 (trait_decl_stmt -> error S_COLON .)
    error           reduce using rule 149 (trait_decl_stmt -> error S_COLON .)


state 154

    (150) trait_decl_stmt -> error LP2 . error S_COLON RP2 S_COLON

    error           shift and go to state 162


state 155

    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 . trait_decl_stmts RP2 S_COLON
    (25) trait_decl_stmts -> . trait_decl_stmts trait_decl_stmt
    (26) trait_decl_stmts -> . trait_decl_stmt
    (27) trait_decl_stmts -> . PASS S_COLON
    (28) trait_decl_stmt -> . FN COLON LP2 decl_fn_stmts RP2 S_COLON
    (29) trait_decl_stmt -> . VAR COLON LP2 decl_stmts RP2 S_COLON
    (30) trait_decl_stmt -> . CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON
    (31) trait_decl_stmt -> . CLS_VAR COLON LP2 decl_stmts RP2 S_COLON
    (32) trait_decl_stmt -> . STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON
    (149) trait_decl_stmt -> . error S_COLON
    (150) trait_decl_stmt -> . error LP2 error S_COLON RP2 S_COLON

    PASS            shift and go to state 132
    FN              shift and go to state 133
    VAR             shift and go to state 134
    CLS_FN          shift and go to state 135
    CLS_VAR         shift and go to state 136
    STATIC_FN       shift and go to state 137
    error           shift and go to state 138

    trait_decl_stmts               shift and go to state 163
    trait_decl_stmt                shift and go to state 131

state 156

    (10) trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON .

    PROGRAM_END     reduce using rule 10 (trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON .)
    S_COLON         reduce using rule 10 (trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON .)
    TRAIT           reduce using rule 10 (trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON .)
    PRINTINFO       reduce using rule 10 (trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON .)
    GENERATE        reduce using rule 10 (trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON .)
    ID              reduce using rule 10 (trait_decl -> TRAIT trait_id LP1 class_args RP1 COLON LP2 trait_decl_stmts RP2 S_COLON .)


state 157

    (28) trait_decl_stmt -> FN COLON LP2 . decl_fn_stmts RP2 S_COLON
    (33) decl_fn_stmts -> . decl_fn_stmts decl_fn_stmt
    (34) decl_fn_stmts -> . decl_fn_stmt
    (35) decl_fn_stmt -> . fn_id LP1 pred_args RP1 S_COLON
    (36) decl_fn_stmt -> . fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (37) decl_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
    (38) decl_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (45) fn_id -> . ID

    ID              shift and go to state 167

    decl_fn_stmts                  shift and go to state 164
    decl_fn_stmt                   shift and go to state 165
    fn_id                          shift and go to state 166

state 158

    (29) trait_decl_stmt -> VAR COLON LP2 . decl_stmts RP2 S_COLON
    (95) decl_stmts -> . decl_stmts decl_stmt
    (96) decl_stmts -> . decl_stmt
    (97) decl_stmt -> . var_id S_COLON
    (98) decl_stmt -> . var_id COLON unary_pred S_COLON
    (99) decl_stmt -> . LP3 vars_id RP3 S_COLON
    (100) decl_stmt -> . LP3 vars_id RP3 COLON unary_pred S_COLON
    (103) var_id -> . ID

    LP3             shift and go to state 171
    ID              shift and go to state 172

    decl_stmts                     shift and go to state 168
    decl_stmt                      shift and go to state 169
    var_id                         shift and go to state 170

state 159

    (30) trait_decl_stmt -> CLS_FN COLON LP2 . decl_cls_fn_stmts RP2 S_COLON
    (39) decl_cls_fn_stmts -> . decl_cls_fn_stmts decl_cls_fn_stmt
    (40) decl_cls_fn_stmts -> . decl_cls_fn_stmt
    (41) decl_cls_fn_stmt -> . fn_id LP1 pred_args RP1 S_COLON
    (42) decl_cls_fn_stmt -> . fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (43) decl_cls_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
    (44) decl_cls_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (45) fn_id -> . ID

    ID              shift and go to state 167

    decl_cls_fn_stmts              shift and go to state 173
    decl_cls_fn_stmt               shift and go to state 174
    fn_id                          shift and go to state 175

state 160

    (31) trait_decl_stmt -> CLS_VAR COLON LP2 . decl_stmts RP2 S_COLON
    (95) decl_stmts -> . decl_stmts decl_stmt
    (96) decl_stmts -> . decl_stmt
    (97) decl_stmt -> . var_id S_COLON
    (98) decl_stmt -> . var_id COLON unary_pred S_COLON
    (99) decl_stmt -> . LP3 vars_id RP3 S_COLON
    (100) decl_stmt -> . LP3 vars_id RP3 COLON unary_pred S_COLON
    (103) var_id -> . ID

    LP3             shift and go to state 171
    ID              shift and go to state 172

    decl_stmts                     shift and go to state 176
    decl_stmt                      shift and go to state 169
    var_id                         shift and go to state 170

state 161

    (32) trait_decl_stmt -> STATIC_FN COLON LP2 . decl_static_fn_stmts RP2 S_COLON
    (104) decl_static_fn_stmts -> . decl_static_fn_stmts decl_static_fn_stmt
    (105) decl_static_fn_stmts -> . decl_static_fn_stmt
    (106) decl_static_fn_stmt -> . static_fn_id LP1 next_preds RP1 S_COLON
    (107) decl_static_fn_stmt -> . static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (108) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON
    (109) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (110) decl_static_fn_stmt -> . static_fn_id LP1 RP1 S_COLON
    (111) decl_static_fn_stmt -> . static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON
    (112) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON
    (113) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON
    (114) static_fn_id -> . ID

    ID              shift and go to state 180

    decl_static_fn_stmts           shift and go to state 177
    decl_static_fn_stmt            shift and go to state 178
    static_fn_id                   shift and go to state 179

state 162

    (150) trait_decl_stmt -> error LP2 error . S_COLON RP2 S_COLON

    S_COLON         shift and go to state 181


state 163

    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts . RP2 S_COLON
    (25) trait_decl_stmts -> trait_decl_stmts . trait_decl_stmt
    (28) trait_decl_stmt -> . FN COLON LP2 decl_fn_stmts RP2 S_COLON
    (29) trait_decl_stmt -> . VAR COLON LP2 decl_stmts RP2 S_COLON
    (30) trait_decl_stmt -> . CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON
    (31) trait_decl_stmt -> . CLS_VAR COLON LP2 decl_stmts RP2 S_COLON
    (32) trait_decl_stmt -> . STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON
    (149) trait_decl_stmt -> . error S_COLON
    (150) trait_decl_stmt -> . error LP2 error S_COLON RP2 S_COLON

    RP2             shift and go to state 182
    FN              shift and go to state 133
    VAR             shift and go to state 134
    CLS_FN          shift and go to state 135
    CLS_VAR         shift and go to state 136
    STATIC_FN       shift and go to state 137
    error           shift and go to state 138

    trait_decl_stmt                shift and go to state 146

state 164

    (28) trait_decl_stmt -> FN COLON LP2 decl_fn_stmts . RP2 S_COLON
    (33) decl_fn_stmts -> decl_fn_stmts . decl_fn_stmt
    (35) decl_fn_stmt -> . fn_id LP1 pred_args RP1 S_COLON
    (36) decl_fn_stmt -> . fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (37) decl_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
    (38) decl_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (45) fn_id -> . ID

    RP2             shift and go to state 183
    ID              shift and go to state 167

    decl_fn_stmt                   shift and go to state 184
    fn_id                          shift and go to state 166

state 165

    (34) decl_fn_stmts -> decl_fn_stmt .

    RP2             reduce using rule 34 (decl_fn_stmts -> decl_fn_stmt .)
    ID              reduce using rule 34 (decl_fn_stmts -> decl_fn_stmt .)


state 166

    (35) decl_fn_stmt -> fn_id . LP1 pred_args RP1 S_COLON
    (36) decl_fn_stmt -> fn_id . LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (37) decl_fn_stmt -> fn_id . LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
    (38) decl_fn_stmt -> fn_id . LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON

    LP1             shift and go to state 185
    LP3             shift and go to state 186


state 167

    (45) fn_id -> ID .

    LP1             reduce using rule 45 (fn_id -> ID .)
    LP3             reduce using rule 45 (fn_id -> ID .)


state 168

    (29) trait_decl_stmt -> VAR COLON LP2 decl_stmts . RP2 S_COLON
    (95) decl_stmts -> decl_stmts . decl_stmt
    (97) decl_stmt -> . var_id S_COLON
    (98) decl_stmt -> . var_id COLON unary_pred S_COLON
    (99) decl_stmt -> . LP3 vars_id RP3 S_COLON
    (100) decl_stmt -> . LP3 vars_id RP3 COLON unary_pred S_COLON
    (103) var_id -> . ID

    RP2             shift and go to state 187
    LP3             shift and go to state 171
    ID              shift and go to state 172

    decl_stmt                      shift and go to state 188
    var_id                         shift and go to state 170

state 169

    (96) decl_stmts -> decl_stmt .

    RP2             reduce using rule 96 (decl_stmts -> decl_stmt .)
    LP3             reduce using rule 96 (decl_stmts -> decl_stmt .)
    ID              reduce using rule 96 (decl_stmts -> decl_stmt .)


state 170

    (97) decl_stmt -> var_id . S_COLON
    (98) decl_stmt -> var_id . COLON unary_pred S_COLON

    S_COLON         shift and go to state 189
    COLON           shift and go to state 190


state 171

    (99) decl_stmt -> LP3 . vars_id RP3 S_COLON
    (100) decl_stmt -> LP3 . vars_id RP3 COLON unary_pred S_COLON
    (101) vars_id -> . vars_id COMMA var_id
    (102) vars_id -> . var_id
    (103) var_id -> . ID

    ID              shift and go to state 172

    vars_id                        shift and go to state 191
    var_id                         shift and go to state 192

state 172

    (103) var_id -> ID .

    S_COLON         reduce using rule 103 (var_id -> ID .)
    COLON           reduce using rule 103 (var_id -> ID .)
    RP3             reduce using rule 103 (var_id -> ID .)
    COMMA           reduce using rule 103 (var_id -> ID .)


state 173

    (30) trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts . RP2 S_COLON
    (39) decl_cls_fn_stmts -> decl_cls_fn_stmts . decl_cls_fn_stmt
    (41) decl_cls_fn_stmt -> . fn_id LP1 pred_args RP1 S_COLON
    (42) decl_cls_fn_stmt -> . fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (43) decl_cls_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
    (44) decl_cls_fn_stmt -> . fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (45) fn_id -> . ID

    RP2             shift and go to state 193
    ID              shift and go to state 167

    decl_cls_fn_stmt               shift and go to state 194
    fn_id                          shift and go to state 175

state 174

    (40) decl_cls_fn_stmts -> decl_cls_fn_stmt .

    RP2             reduce using rule 40 (decl_cls_fn_stmts -> decl_cls_fn_stmt .)
    ID              reduce using rule 40 (decl_cls_fn_stmts -> decl_cls_fn_stmt .)


state 175

    (41) decl_cls_fn_stmt -> fn_id . LP1 pred_args RP1 S_COLON
    (42) decl_cls_fn_stmt -> fn_id . LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (43) decl_cls_fn_stmt -> fn_id . LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON
    (44) decl_cls_fn_stmt -> fn_id . LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON

    LP1             shift and go to state 195
    LP3             shift and go to state 196


state 176

    (31) trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts . RP2 S_COLON
    (95) decl_stmts -> decl_stmts . decl_stmt
    (97) decl_stmt -> . var_id S_COLON
    (98) decl_stmt -> . var_id COLON unary_pred S_COLON
    (99) decl_stmt -> . LP3 vars_id RP3 S_COLON
    (100) decl_stmt -> . LP3 vars_id RP3 COLON unary_pred S_COLON
    (103) var_id -> . ID

    RP2             shift and go to state 197
    LP3             shift and go to state 171
    ID              shift and go to state 172

    decl_stmt                      shift and go to state 188
    var_id                         shift and go to state 170

state 177

    (32) trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts . RP2 S_COLON
    (104) decl_static_fn_stmts -> decl_static_fn_stmts . decl_static_fn_stmt
    (106) decl_static_fn_stmt -> . static_fn_id LP1 next_preds RP1 S_COLON
    (107) decl_static_fn_stmt -> . static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (108) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON
    (109) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (110) decl_static_fn_stmt -> . static_fn_id LP1 RP1 S_COLON
    (111) decl_static_fn_stmt -> . static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON
    (112) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON
    (113) decl_static_fn_stmt -> . static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON
    (114) static_fn_id -> . ID

    RP2             shift and go to state 198
    ID              shift and go to state 180

    decl_static_fn_stmt            shift and go to state 199
    static_fn_id                   shift and go to state 179

state 178

    (105) decl_static_fn_stmts -> decl_static_fn_stmt .

    RP2             reduce using rule 105 (decl_static_fn_stmts -> decl_static_fn_stmt .)
    ID              reduce using rule 105 (decl_static_fn_stmts -> decl_static_fn_stmt .)


state 179

    (106) decl_static_fn_stmt -> static_fn_id . LP1 next_preds RP1 S_COLON
    (107) decl_static_fn_stmt -> static_fn_id . LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (108) decl_static_fn_stmt -> static_fn_id . LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON
    (109) decl_static_fn_stmt -> static_fn_id . LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (110) decl_static_fn_stmt -> static_fn_id . LP1 RP1 S_COLON
    (111) decl_static_fn_stmt -> static_fn_id . LP1 RP1 R_ARROW unary_pred S_COLON
    (112) decl_static_fn_stmt -> static_fn_id . LP3 type_var_args RP3 LP1 RP1 S_COLON
    (113) decl_static_fn_stmt -> static_fn_id . LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON

    LP1             shift and go to state 200
    LP3             shift and go to state 201


state 180

    (114) static_fn_id -> ID .

    LP1             reduce using rule 114 (static_fn_id -> ID .)
    LP3             reduce using rule 114 (static_fn_id -> ID .)


state 181

    (150) trait_decl_stmt -> error LP2 error S_COLON . RP2 S_COLON

    RP2             shift and go to state 202


state 182

    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 . S_COLON

    S_COLON         shift and go to state 203


state 183

    (28) trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 . S_COLON

    S_COLON         shift and go to state 204


state 184

    (33) decl_fn_stmts -> decl_fn_stmts decl_fn_stmt .

    RP2             reduce using rule 33 (decl_fn_stmts -> decl_fn_stmts decl_fn_stmt .)
    ID              reduce using rule 33 (decl_fn_stmts -> decl_fn_stmts decl_fn_stmt .)


state 185

    (35) decl_fn_stmt -> fn_id LP1 . pred_args RP1 S_COLON
    (36) decl_fn_stmt -> fn_id LP1 . pred_args RP1 R_ARROW unary_pred S_COLON
    (46) pred_args -> . main_pred COMMA next_preds
    (47) pred_args -> . main_pred
    (48) main_pred -> . ID

    ID              shift and go to state 207

    pred_args                      shift and go to state 205
    main_pred                      shift and go to state 206

state 186

    (37) decl_fn_stmt -> fn_id LP3 . type_var_args RP3 LP1 pred_args RP1 S_COLON
    (38) decl_fn_stmt -> fn_id LP3 . type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (73) type_var_args -> . type_var_args COMMA type_var_arg
    (74) type_var_args -> . type_var_arg
    (75) type_var_arg -> . type_var_id
    (76) type_var_arg -> . type_var_id COLON unary_pred
    (77) type_var_id -> . ID

    ID              shift and go to state 211

    type_var_args                  shift and go to state 208
    type_var_arg                   shift and go to state 209
    type_var_id                    shift and go to state 210

state 187

    (29) trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 . S_COLON

    S_COLON         shift and go to state 212


state 188

    (95) decl_stmts -> decl_stmts decl_stmt .

    RP2             reduce using rule 95 (decl_stmts -> decl_stmts decl_stmt .)
    LP3             reduce using rule 95 (decl_stmts -> decl_stmts decl_stmt .)
    ID              reduce using rule 95 (decl_stmts -> decl_stmts decl_stmt .)


state 189

    (97) decl_stmt -> var_id S_COLON .

    RP2             reduce using rule 97 (decl_stmt -> var_id S_COLON .)
    LP3             reduce using rule 97 (decl_stmt -> var_id S_COLON .)
    ID              reduce using rule 97 (decl_stmt -> var_id S_COLON .)


state 190

    (98) decl_stmt -> var_id COLON . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 213
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 191

    (99) decl_stmt -> LP3 vars_id . RP3 S_COLON
    (100) decl_stmt -> LP3 vars_id . RP3 COLON unary_pred S_COLON
    (101) vars_id -> vars_id . COMMA var_id

    RP3             shift and go to state 214
    COMMA           shift and go to state 215


state 192

    (102) vars_id -> var_id .

    RP3             reduce using rule 102 (vars_id -> var_id .)
    COMMA           reduce using rule 102 (vars_id -> var_id .)


state 193

    (30) trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 . S_COLON

    S_COLON         shift and go to state 216


state 194

    (39) decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt .

    RP2             reduce using rule 39 (decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt .)
    ID              reduce using rule 39 (decl_cls_fn_stmts -> decl_cls_fn_stmts decl_cls_fn_stmt .)


state 195

    (41) decl_cls_fn_stmt -> fn_id LP1 . pred_args RP1 S_COLON
    (42) decl_cls_fn_stmt -> fn_id LP1 . pred_args RP1 R_ARROW unary_pred S_COLON
    (46) pred_args -> . main_pred COMMA next_preds
    (47) pred_args -> . main_pred
    (48) main_pred -> . ID

    ID              shift and go to state 207

    pred_args                      shift and go to state 217
    main_pred                      shift and go to state 206

state 196

    (43) decl_cls_fn_stmt -> fn_id LP3 . type_var_args RP3 LP1 pred_args RP1 S_COLON
    (44) decl_cls_fn_stmt -> fn_id LP3 . type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (73) type_var_args -> . type_var_args COMMA type_var_arg
    (74) type_var_args -> . type_var_arg
    (75) type_var_arg -> . type_var_id
    (76) type_var_arg -> . type_var_id COLON unary_pred
    (77) type_var_id -> . ID

    ID              shift and go to state 211

    type_var_args                  shift and go to state 218
    type_var_arg                   shift and go to state 209
    type_var_id                    shift and go to state 210

state 197

    (31) trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 . S_COLON

    S_COLON         shift and go to state 219


state 198

    (32) trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 . S_COLON

    S_COLON         shift and go to state 220


state 199

    (104) decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt .

    RP2             reduce using rule 104 (decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt .)
    ID              reduce using rule 104 (decl_static_fn_stmts -> decl_static_fn_stmts decl_static_fn_stmt .)


state 200

    (106) decl_static_fn_stmt -> static_fn_id LP1 . next_preds RP1 S_COLON
    (107) decl_static_fn_stmt -> static_fn_id LP1 . next_preds RP1 R_ARROW unary_pred S_COLON
    (110) decl_static_fn_stmt -> static_fn_id LP1 . RP1 S_COLON
    (111) decl_static_fn_stmt -> static_fn_id LP1 . RP1 R_ARROW unary_pred S_COLON
    (49) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (50) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR
    (51) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds
    (52) next_preds -> . next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds
    (53) next_preds -> . next_anonymous_necessary_preds COMMA STAR
    (54) next_preds -> . next_anonymous_necessary_preds
    (55) next_preds -> . next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (56) next_preds -> . next_anonymous_opt_preds COMMA STAR
    (57) next_preds -> . next_anonymous_opt_preds
    (58) next_preds -> . STAR COMMA next_named_preds
    (59) next_preds -> . STAR
    (60) next_anonymous_necessary_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred
    (61) next_anonymous_necessary_preds -> . next_anonymous_necessary_pred
    (63) next_anonymous_opt_preds -> . next_anonymous_opt_preds COMMA next_anonymous_opt_pred
    (64) next_anonymous_opt_preds -> . next_anonymous_opt_pred
    (62) next_anonymous_necessary_pred -> . unary_pred
    (65) next_anonymous_opt_pred -> . ASSIGN unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    RP1             shift and go to state 222
    STAR            shift and go to state 226
    ASSIGN          shift and go to state 229
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    next_preds                     shift and go to state 221
    unary_pred                     shift and go to state 223
    next_anonymous_necessary_preds shift and go to state 224
    next_anonymous_opt_preds       shift and go to state 225
    next_anonymous_necessary_pred  shift and go to state 227
    next_anonymous_opt_pred        shift and go to state 228
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 201

    (108) decl_static_fn_stmt -> static_fn_id LP3 . type_var_args RP3 LP1 next_preds RP1 S_COLON
    (109) decl_static_fn_stmt -> static_fn_id LP3 . type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (112) decl_static_fn_stmt -> static_fn_id LP3 . type_var_args RP3 LP1 RP1 S_COLON
    (113) decl_static_fn_stmt -> static_fn_id LP3 . type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON
    (73) type_var_args -> . type_var_args COMMA type_var_arg
    (74) type_var_args -> . type_var_arg
    (75) type_var_arg -> . type_var_id
    (76) type_var_arg -> . type_var_id COLON unary_pred
    (77) type_var_id -> . ID

    ID              shift and go to state 211

    type_var_args                  shift and go to state 230
    type_var_arg                   shift and go to state 209
    type_var_id                    shift and go to state 210

state 202

    (150) trait_decl_stmt -> error LP2 error S_COLON RP2 . S_COLON

    S_COLON         shift and go to state 231


state 203

    (11) trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON .

    PROGRAM_END     reduce using rule 11 (trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON .)
    S_COLON         reduce using rule 11 (trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON .)
    TRAIT           reduce using rule 11 (trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON .)
    PRINTINFO       reduce using rule 11 (trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON .)
    GENERATE        reduce using rule 11 (trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON .)
    ID              reduce using rule 11 (trait_decl -> TRAIT trait_id LP1 class_args RP1 EXTENDS unary_pred COLON LP2 trait_decl_stmts RP2 S_COLON .)


state 204

    (28) trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .

    RP2             reduce using rule 28 (trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .)
    FN              reduce using rule 28 (trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .)
    VAR             reduce using rule 28 (trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .)
    CLS_FN          reduce using rule 28 (trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .)
    CLS_VAR         reduce using rule 28 (trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .)
    STATIC_FN       reduce using rule 28 (trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .)
    error           reduce using rule 28 (trait_decl_stmt -> FN COLON LP2 decl_fn_stmts RP2 S_COLON .)


state 205

    (35) decl_fn_stmt -> fn_id LP1 pred_args . RP1 S_COLON
    (36) decl_fn_stmt -> fn_id LP1 pred_args . RP1 R_ARROW unary_pred S_COLON

    RP1             shift and go to state 232


state 206

    (46) pred_args -> main_pred . COMMA next_preds
    (47) pred_args -> main_pred .

    COMMA           shift and go to state 233
    RP1             reduce using rule 47 (pred_args -> main_pred .)


state 207

    (48) main_pred -> ID .

    COMMA           reduce using rule 48 (main_pred -> ID .)
    RP1             reduce using rule 48 (main_pred -> ID .)


state 208

    (37) decl_fn_stmt -> fn_id LP3 type_var_args . RP3 LP1 pred_args RP1 S_COLON
    (38) decl_fn_stmt -> fn_id LP3 type_var_args . RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (73) type_var_args -> type_var_args . COMMA type_var_arg

    RP3             shift and go to state 234
    COMMA           shift and go to state 235


state 209

    (74) type_var_args -> type_var_arg .

    RP3             reduce using rule 74 (type_var_args -> type_var_arg .)
    COMMA           reduce using rule 74 (type_var_args -> type_var_arg .)


state 210

    (75) type_var_arg -> type_var_id .
    (76) type_var_arg -> type_var_id . COLON unary_pred

    RP3             reduce using rule 75 (type_var_arg -> type_var_id .)
    COMMA           reduce using rule 75 (type_var_arg -> type_var_id .)
    COLON           shift and go to state 236


state 211

    (77) type_var_id -> ID .

    COLON           reduce using rule 77 (type_var_id -> ID .)
    RP3             reduce using rule 77 (type_var_id -> ID .)
    COMMA           reduce using rule 77 (type_var_id -> ID .)


state 212

    (29) trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .

    RP2             reduce using rule 29 (trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .)
    FN              reduce using rule 29 (trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .)
    VAR             reduce using rule 29 (trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .)
    CLS_FN          reduce using rule 29 (trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .)
    CLS_VAR         reduce using rule 29 (trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .)
    STATIC_FN       reduce using rule 29 (trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .)
    error           reduce using rule 29 (trait_decl_stmt -> VAR COLON LP2 decl_stmts RP2 S_COLON .)


state 213

    (98) decl_stmt -> var_id COLON unary_pred . S_COLON

    S_COLON         shift and go to state 237


state 214

    (99) decl_stmt -> LP3 vars_id RP3 . S_COLON
    (100) decl_stmt -> LP3 vars_id RP3 . COLON unary_pred S_COLON

    S_COLON         shift and go to state 238
    COLON           shift and go to state 239


state 215

    (101) vars_id -> vars_id COMMA . var_id
    (103) var_id -> . ID

    ID              shift and go to state 172

    var_id                         shift and go to state 240

state 216

    (30) trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .

    RP2             reduce using rule 30 (trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .)
    FN              reduce using rule 30 (trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .)
    VAR             reduce using rule 30 (trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .)
    CLS_FN          reduce using rule 30 (trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .)
    CLS_VAR         reduce using rule 30 (trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .)
    STATIC_FN       reduce using rule 30 (trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .)
    error           reduce using rule 30 (trait_decl_stmt -> CLS_FN COLON LP2 decl_cls_fn_stmts RP2 S_COLON .)


state 217

    (41) decl_cls_fn_stmt -> fn_id LP1 pred_args . RP1 S_COLON
    (42) decl_cls_fn_stmt -> fn_id LP1 pred_args . RP1 R_ARROW unary_pred S_COLON

    RP1             shift and go to state 241


state 218

    (43) decl_cls_fn_stmt -> fn_id LP3 type_var_args . RP3 LP1 pred_args RP1 S_COLON
    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args . RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON
    (73) type_var_args -> type_var_args . COMMA type_var_arg

    RP3             shift and go to state 242
    COMMA           shift and go to state 235


state 219

    (31) trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .

    RP2             reduce using rule 31 (trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .)
    FN              reduce using rule 31 (trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .)
    VAR             reduce using rule 31 (trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .)
    CLS_FN          reduce using rule 31 (trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .)
    CLS_VAR         reduce using rule 31 (trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .)
    STATIC_FN       reduce using rule 31 (trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .)
    error           reduce using rule 31 (trait_decl_stmt -> CLS_VAR COLON LP2 decl_stmts RP2 S_COLON .)


state 220

    (32) trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .

    RP2             reduce using rule 32 (trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .)
    FN              reduce using rule 32 (trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .)
    VAR             reduce using rule 32 (trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .)
    CLS_FN          reduce using rule 32 (trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .)
    CLS_VAR         reduce using rule 32 (trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .)
    STATIC_FN       reduce using rule 32 (trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .)
    error           reduce using rule 32 (trait_decl_stmt -> STATIC_FN COLON LP2 decl_static_fn_stmts RP2 S_COLON .)


state 221

    (106) decl_static_fn_stmt -> static_fn_id LP1 next_preds . RP1 S_COLON
    (107) decl_static_fn_stmt -> static_fn_id LP1 next_preds . RP1 R_ARROW unary_pred S_COLON

    RP1             shift and go to state 243


state 222

    (110) decl_static_fn_stmt -> static_fn_id LP1 RP1 . S_COLON
    (111) decl_static_fn_stmt -> static_fn_id LP1 RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 244
    R_ARROW         shift and go to state 245


state 223

    (62) next_anonymous_necessary_pred -> unary_pred .

    COMMA           reduce using rule 62 (next_anonymous_necessary_pred -> unary_pred .)
    RP1             reduce using rule 62 (next_anonymous_necessary_pred -> unary_pred .)


state 224

    (49) next_preds -> next_anonymous_necessary_preds . COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (50) next_preds -> next_anonymous_necessary_preds . COMMA next_anonymous_opt_preds COMMA STAR
    (51) next_preds -> next_anonymous_necessary_preds . COMMA next_anonymous_opt_preds
    (52) next_preds -> next_anonymous_necessary_preds . COMMA STAR COMMA next_named_preds
    (53) next_preds -> next_anonymous_necessary_preds . COMMA STAR
    (54) next_preds -> next_anonymous_necessary_preds .
    (60) next_anonymous_necessary_preds -> next_anonymous_necessary_preds . COMMA next_anonymous_necessary_pred

    COMMA           shift and go to state 246
    RP1             reduce using rule 54 (next_preds -> next_anonymous_necessary_preds .)


state 225

    (55) next_preds -> next_anonymous_opt_preds . COMMA STAR COMMA next_named_preds
    (56) next_preds -> next_anonymous_opt_preds . COMMA STAR
    (57) next_preds -> next_anonymous_opt_preds .
    (63) next_anonymous_opt_preds -> next_anonymous_opt_preds . COMMA next_anonymous_opt_pred

    COMMA           shift and go to state 247
    RP1             reduce using rule 57 (next_preds -> next_anonymous_opt_preds .)


state 226

    (58) next_preds -> STAR . COMMA next_named_preds
    (59) next_preds -> STAR .

    COMMA           shift and go to state 248
    RP1             reduce using rule 59 (next_preds -> STAR .)


state 227

    (61) next_anonymous_necessary_preds -> next_anonymous_necessary_pred .

    COMMA           reduce using rule 61 (next_anonymous_necessary_preds -> next_anonymous_necessary_pred .)
    RP1             reduce using rule 61 (next_anonymous_necessary_preds -> next_anonymous_necessary_pred .)


state 228

    (64) next_anonymous_opt_preds -> next_anonymous_opt_pred .

    COMMA           reduce using rule 64 (next_anonymous_opt_preds -> next_anonymous_opt_pred .)
    RP1             reduce using rule 64 (next_anonymous_opt_preds -> next_anonymous_opt_pred .)


state 229

    (65) next_anonymous_opt_pred -> ASSIGN . unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 249
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 230

    (108) decl_static_fn_stmt -> static_fn_id LP3 type_var_args . RP3 LP1 next_preds RP1 S_COLON
    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args . RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (112) decl_static_fn_stmt -> static_fn_id LP3 type_var_args . RP3 LP1 RP1 S_COLON
    (113) decl_static_fn_stmt -> static_fn_id LP3 type_var_args . RP3 LP1 RP1 R_ARROW unary_pred S_COLON
    (73) type_var_args -> type_var_args . COMMA type_var_arg

    RP3             shift and go to state 250
    COMMA           shift and go to state 235


state 231

    (150) trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .

    RP2             reduce using rule 150 (trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .)
    FN              reduce using rule 150 (trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .)
    VAR             reduce using rule 150 (trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .)
    CLS_FN          reduce using rule 150 (trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .)
    CLS_VAR         reduce using rule 150 (trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .)
    STATIC_FN       reduce using rule 150 (trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .)
    error           reduce using rule 150 (trait_decl_stmt -> error LP2 error S_COLON RP2 S_COLON .)


state 232

    (35) decl_fn_stmt -> fn_id LP1 pred_args RP1 . S_COLON
    (36) decl_fn_stmt -> fn_id LP1 pred_args RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 251
    R_ARROW         shift and go to state 252


state 233

    (46) pred_args -> main_pred COMMA . next_preds
    (49) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (50) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR
    (51) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds
    (52) next_preds -> . next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds
    (53) next_preds -> . next_anonymous_necessary_preds COMMA STAR
    (54) next_preds -> . next_anonymous_necessary_preds
    (55) next_preds -> . next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (56) next_preds -> . next_anonymous_opt_preds COMMA STAR
    (57) next_preds -> . next_anonymous_opt_preds
    (58) next_preds -> . STAR COMMA next_named_preds
    (59) next_preds -> . STAR
    (60) next_anonymous_necessary_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred
    (61) next_anonymous_necessary_preds -> . next_anonymous_necessary_pred
    (63) next_anonymous_opt_preds -> . next_anonymous_opt_preds COMMA next_anonymous_opt_pred
    (64) next_anonymous_opt_preds -> . next_anonymous_opt_pred
    (62) next_anonymous_necessary_pred -> . unary_pred
    (65) next_anonymous_opt_pred -> . ASSIGN unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    STAR            shift and go to state 226
    ASSIGN          shift and go to state 229
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    next_preds                     shift and go to state 253
    next_anonymous_necessary_preds shift and go to state 224
    next_anonymous_opt_preds       shift and go to state 225
    next_anonymous_necessary_pred  shift and go to state 227
    next_anonymous_opt_pred        shift and go to state 228
    unary_pred                     shift and go to state 223
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 234

    (37) decl_fn_stmt -> fn_id LP3 type_var_args RP3 . LP1 pred_args RP1 S_COLON
    (38) decl_fn_stmt -> fn_id LP3 type_var_args RP3 . LP1 pred_args RP1 R_ARROW unary_pred S_COLON

    LP1             shift and go to state 254


state 235

    (73) type_var_args -> type_var_args COMMA . type_var_arg
    (75) type_var_arg -> . type_var_id
    (76) type_var_arg -> . type_var_id COLON unary_pred
    (77) type_var_id -> . ID

    ID              shift and go to state 211

    type_var_arg                   shift and go to state 255
    type_var_id                    shift and go to state 210

state 236

    (76) type_var_arg -> type_var_id COLON . unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 256
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 237

    (98) decl_stmt -> var_id COLON unary_pred S_COLON .

    RP2             reduce using rule 98 (decl_stmt -> var_id COLON unary_pred S_COLON .)
    LP3             reduce using rule 98 (decl_stmt -> var_id COLON unary_pred S_COLON .)
    ID              reduce using rule 98 (decl_stmt -> var_id COLON unary_pred S_COLON .)


state 238

    (99) decl_stmt -> LP3 vars_id RP3 S_COLON .

    RP2             reduce using rule 99 (decl_stmt -> LP3 vars_id RP3 S_COLON .)
    LP3             reduce using rule 99 (decl_stmt -> LP3 vars_id RP3 S_COLON .)
    ID              reduce using rule 99 (decl_stmt -> LP3 vars_id RP3 S_COLON .)


state 239

    (100) decl_stmt -> LP3 vars_id RP3 COLON . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 257
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 240

    (101) vars_id -> vars_id COMMA var_id .

    RP3             reduce using rule 101 (vars_id -> vars_id COMMA var_id .)
    COMMA           reduce using rule 101 (vars_id -> vars_id COMMA var_id .)


state 241

    (41) decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 . S_COLON
    (42) decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 258
    R_ARROW         shift and go to state 259


state 242

    (43) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 . LP1 pred_args RP1 S_COLON
    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 . LP1 pred_args RP1 R_ARROW unary_pred S_COLON

    LP1             shift and go to state 260


state 243

    (106) decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 . S_COLON
    (107) decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 261
    R_ARROW         shift and go to state 262


state 244

    (110) decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON .

    RP2             reduce using rule 110 (decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON .)
    ID              reduce using rule 110 (decl_static_fn_stmt -> static_fn_id LP1 RP1 S_COLON .)


state 245

    (111) decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 263
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 246

    (49) next_preds -> next_anonymous_necessary_preds COMMA . next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (50) next_preds -> next_anonymous_necessary_preds COMMA . next_anonymous_opt_preds COMMA STAR
    (51) next_preds -> next_anonymous_necessary_preds COMMA . next_anonymous_opt_preds
    (52) next_preds -> next_anonymous_necessary_preds COMMA . STAR COMMA next_named_preds
    (53) next_preds -> next_anonymous_necessary_preds COMMA . STAR
    (60) next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA . next_anonymous_necessary_pred
    (63) next_anonymous_opt_preds -> . next_anonymous_opt_preds COMMA next_anonymous_opt_pred
    (64) next_anonymous_opt_preds -> . next_anonymous_opt_pred
    (62) next_anonymous_necessary_pred -> . unary_pred
    (65) next_anonymous_opt_pred -> . ASSIGN unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    STAR            shift and go to state 265
    ASSIGN          shift and go to state 229
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    next_anonymous_opt_preds       shift and go to state 264
    next_anonymous_necessary_pred  shift and go to state 266
    next_anonymous_opt_pred        shift and go to state 228
    unary_pred                     shift and go to state 223
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 247

    (55) next_preds -> next_anonymous_opt_preds COMMA . STAR COMMA next_named_preds
    (56) next_preds -> next_anonymous_opt_preds COMMA . STAR
    (63) next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA . next_anonymous_opt_pred
    (65) next_anonymous_opt_pred -> . ASSIGN unary_pred

    STAR            shift and go to state 267
    ASSIGN          shift and go to state 229

    next_anonymous_opt_pred        shift and go to state 268

state 248

    (58) next_preds -> STAR COMMA . next_named_preds
    (66) next_named_preds -> . next_named_preds COMMA next_named_pred
    (67) next_named_preds -> . next_named_pred
    (68) next_named_pred -> . next_named_necessary_pred
    (69) next_named_pred -> . next_named_opt_pred
    (70) next_named_necessary_pred -> . arg_name COLON unary_pred
    (71) next_named_opt_pred -> . arg_name COLON ASSIGN unary_pred
    (72) arg_name -> . ID

    ID              shift and go to state 274

    next_named_preds               shift and go to state 269
    next_named_pred                shift and go to state 270
    next_named_necessary_pred      shift and go to state 271
    next_named_opt_pred            shift and go to state 272
    arg_name                       shift and go to state 273

state 249

    (65) next_anonymous_opt_pred -> ASSIGN unary_pred .

    COMMA           reduce using rule 65 (next_anonymous_opt_pred -> ASSIGN unary_pred .)
    RP1             reduce using rule 65 (next_anonymous_opt_pred -> ASSIGN unary_pred .)


state 250

    (108) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 . LP1 next_preds RP1 S_COLON
    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 . LP1 next_preds RP1 R_ARROW unary_pred S_COLON
    (112) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 . LP1 RP1 S_COLON
    (113) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 . LP1 RP1 R_ARROW unary_pred S_COLON

    LP1             shift and go to state 275


state 251

    (35) decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON .

    RP2             reduce using rule 35 (decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON .)
    ID              reduce using rule 35 (decl_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON .)


state 252

    (36) decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 276
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 253

    (46) pred_args -> main_pred COMMA next_preds .

    RP1             reduce using rule 46 (pred_args -> main_pred COMMA next_preds .)


state 254

    (37) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 . pred_args RP1 S_COLON
    (38) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 . pred_args RP1 R_ARROW unary_pred S_COLON
    (46) pred_args -> . main_pred COMMA next_preds
    (47) pred_args -> . main_pred
    (48) main_pred -> . ID

    ID              shift and go to state 207

    pred_args                      shift and go to state 277
    main_pred                      shift and go to state 206

state 255

    (73) type_var_args -> type_var_args COMMA type_var_arg .

    RP3             reduce using rule 73 (type_var_args -> type_var_args COMMA type_var_arg .)
    COMMA           reduce using rule 73 (type_var_args -> type_var_args COMMA type_var_arg .)


state 256

    (76) type_var_arg -> type_var_id COLON unary_pred .

    RP3             reduce using rule 76 (type_var_arg -> type_var_id COLON unary_pred .)
    COMMA           reduce using rule 76 (type_var_arg -> type_var_id COLON unary_pred .)


state 257

    (100) decl_stmt -> LP3 vars_id RP3 COLON unary_pred . S_COLON

    S_COLON         shift and go to state 278


state 258

    (41) decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON .

    RP2             reduce using rule 41 (decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON .)
    ID              reduce using rule 41 (decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 S_COLON .)


state 259

    (42) decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 279
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 260

    (43) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 . pred_args RP1 S_COLON
    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 . pred_args RP1 R_ARROW unary_pred S_COLON
    (46) pred_args -> . main_pred COMMA next_preds
    (47) pred_args -> . main_pred
    (48) main_pred -> . ID

    ID              shift and go to state 207

    pred_args                      shift and go to state 280
    main_pred                      shift and go to state 206

state 261

    (106) decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON .

    RP2             reduce using rule 106 (decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON .)
    ID              reduce using rule 106 (decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 S_COLON .)


state 262

    (107) decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 281
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 263

    (111) decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 282


state 264

    (49) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds . COMMA STAR COMMA next_named_preds
    (50) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds . COMMA STAR
    (51) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds .
    (63) next_anonymous_opt_preds -> next_anonymous_opt_preds . COMMA next_anonymous_opt_pred

    COMMA           shift and go to state 283
    RP1             reduce using rule 51 (next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds .)


state 265

    (52) next_preds -> next_anonymous_necessary_preds COMMA STAR . COMMA next_named_preds
    (53) next_preds -> next_anonymous_necessary_preds COMMA STAR .

    COMMA           shift and go to state 284
    RP1             reduce using rule 53 (next_preds -> next_anonymous_necessary_preds COMMA STAR .)


state 266

    (60) next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred .

    COMMA           reduce using rule 60 (next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred .)
    RP1             reduce using rule 60 (next_anonymous_necessary_preds -> next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred .)


state 267

    (55) next_preds -> next_anonymous_opt_preds COMMA STAR . COMMA next_named_preds
    (56) next_preds -> next_anonymous_opt_preds COMMA STAR .

    COMMA           shift and go to state 285
    RP1             reduce using rule 56 (next_preds -> next_anonymous_opt_preds COMMA STAR .)


state 268

    (63) next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred .

    COMMA           reduce using rule 63 (next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred .)
    RP1             reduce using rule 63 (next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA next_anonymous_opt_pred .)


state 269

    (58) next_preds -> STAR COMMA next_named_preds .
    (66) next_named_preds -> next_named_preds . COMMA next_named_pred

    RP1             reduce using rule 58 (next_preds -> STAR COMMA next_named_preds .)
    COMMA           shift and go to state 286


state 270

    (67) next_named_preds -> next_named_pred .

    COMMA           reduce using rule 67 (next_named_preds -> next_named_pred .)
    RP1             reduce using rule 67 (next_named_preds -> next_named_pred .)


state 271

    (68) next_named_pred -> next_named_necessary_pred .

    COMMA           reduce using rule 68 (next_named_pred -> next_named_necessary_pred .)
    RP1             reduce using rule 68 (next_named_pred -> next_named_necessary_pred .)


state 272

    (69) next_named_pred -> next_named_opt_pred .

    COMMA           reduce using rule 69 (next_named_pred -> next_named_opt_pred .)
    RP1             reduce using rule 69 (next_named_pred -> next_named_opt_pred .)


state 273

    (70) next_named_necessary_pred -> arg_name . COLON unary_pred
    (71) next_named_opt_pred -> arg_name . COLON ASSIGN unary_pred

    COLON           shift and go to state 287


state 274

    (72) arg_name -> ID .

    COLON           reduce using rule 72 (arg_name -> ID .)


state 275

    (108) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 . next_preds RP1 S_COLON
    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 . next_preds RP1 R_ARROW unary_pred S_COLON
    (112) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 . RP1 S_COLON
    (113) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 . RP1 R_ARROW unary_pred S_COLON
    (49) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (50) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR
    (51) next_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_opt_preds
    (52) next_preds -> . next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds
    (53) next_preds -> . next_anonymous_necessary_preds COMMA STAR
    (54) next_preds -> . next_anonymous_necessary_preds
    (55) next_preds -> . next_anonymous_opt_preds COMMA STAR COMMA next_named_preds
    (56) next_preds -> . next_anonymous_opt_preds COMMA STAR
    (57) next_preds -> . next_anonymous_opt_preds
    (58) next_preds -> . STAR COMMA next_named_preds
    (59) next_preds -> . STAR
    (60) next_anonymous_necessary_preds -> . next_anonymous_necessary_preds COMMA next_anonymous_necessary_pred
    (61) next_anonymous_necessary_preds -> . next_anonymous_necessary_pred
    (63) next_anonymous_opt_preds -> . next_anonymous_opt_preds COMMA next_anonymous_opt_pred
    (64) next_anonymous_opt_preds -> . next_anonymous_opt_pred
    (62) next_anonymous_necessary_pred -> . unary_pred
    (65) next_anonymous_opt_pred -> . ASSIGN unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    RP1             shift and go to state 289
    STAR            shift and go to state 226
    ASSIGN          shift and go to state 229
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    next_preds                     shift and go to state 288
    unary_pred                     shift and go to state 223
    next_anonymous_necessary_preds shift and go to state 224
    next_anonymous_opt_preds       shift and go to state 225
    next_anonymous_necessary_pred  shift and go to state 227
    next_anonymous_opt_pred        shift and go to state 228
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 276

    (36) decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 290


state 277

    (37) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args . RP1 S_COLON
    (38) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args . RP1 R_ARROW unary_pred S_COLON

    RP1             shift and go to state 291


state 278

    (100) decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON .

    RP2             reduce using rule 100 (decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON .)
    LP3             reduce using rule 100 (decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON .)
    ID              reduce using rule 100 (decl_stmt -> LP3 vars_id RP3 COLON unary_pred S_COLON .)


state 279

    (42) decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 292


state 280

    (43) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args . RP1 S_COLON
    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args . RP1 R_ARROW unary_pred S_COLON

    RP1             shift and go to state 293


state 281

    (107) decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 294


state 282

    (111) decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 111 (decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 111 (decl_static_fn_stmt -> static_fn_id LP1 RP1 R_ARROW unary_pred S_COLON .)


state 283

    (49) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA . STAR COMMA next_named_preds
    (50) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA . STAR
    (63) next_anonymous_opt_preds -> next_anonymous_opt_preds COMMA . next_anonymous_opt_pred
    (65) next_anonymous_opt_pred -> . ASSIGN unary_pred

    STAR            shift and go to state 295
    ASSIGN          shift and go to state 229

    next_anonymous_opt_pred        shift and go to state 268

state 284

    (52) next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA . next_named_preds
    (66) next_named_preds -> . next_named_preds COMMA next_named_pred
    (67) next_named_preds -> . next_named_pred
    (68) next_named_pred -> . next_named_necessary_pred
    (69) next_named_pred -> . next_named_opt_pred
    (70) next_named_necessary_pred -> . arg_name COLON unary_pred
    (71) next_named_opt_pred -> . arg_name COLON ASSIGN unary_pred
    (72) arg_name -> . ID

    ID              shift and go to state 274

    next_named_preds               shift and go to state 296
    next_named_pred                shift and go to state 270
    next_named_necessary_pred      shift and go to state 271
    next_named_opt_pred            shift and go to state 272
    arg_name                       shift and go to state 273

state 285

    (55) next_preds -> next_anonymous_opt_preds COMMA STAR COMMA . next_named_preds
    (66) next_named_preds -> . next_named_preds COMMA next_named_pred
    (67) next_named_preds -> . next_named_pred
    (68) next_named_pred -> . next_named_necessary_pred
    (69) next_named_pred -> . next_named_opt_pred
    (70) next_named_necessary_pred -> . arg_name COLON unary_pred
    (71) next_named_opt_pred -> . arg_name COLON ASSIGN unary_pred
    (72) arg_name -> . ID

    ID              shift and go to state 274

    next_named_preds               shift and go to state 297
    next_named_pred                shift and go to state 270
    next_named_necessary_pred      shift and go to state 271
    next_named_opt_pred            shift and go to state 272
    arg_name                       shift and go to state 273

state 286

    (66) next_named_preds -> next_named_preds COMMA . next_named_pred
    (68) next_named_pred -> . next_named_necessary_pred
    (69) next_named_pred -> . next_named_opt_pred
    (70) next_named_necessary_pred -> . arg_name COLON unary_pred
    (71) next_named_opt_pred -> . arg_name COLON ASSIGN unary_pred
    (72) arg_name -> . ID

    ID              shift and go to state 274

    next_named_pred                shift and go to state 298
    next_named_necessary_pred      shift and go to state 271
    next_named_opt_pred            shift and go to state 272
    arg_name                       shift and go to state 273

state 287

    (70) next_named_necessary_pred -> arg_name COLON . unary_pred
    (71) next_named_opt_pred -> arg_name COLON . ASSIGN unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ASSIGN          shift and go to state 300
    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 299
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 288

    (108) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds . RP1 S_COLON
    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds . RP1 R_ARROW unary_pred S_COLON

    RP1             shift and go to state 301


state 289

    (112) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 . S_COLON
    (113) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 302
    R_ARROW         shift and go to state 303


state 290

    (36) decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 36 (decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 36 (decl_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)


state 291

    (37) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 . S_COLON
    (38) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 304
    R_ARROW         shift and go to state 305


state 292

    (42) decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 42 (decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 42 (decl_cls_fn_stmt -> fn_id LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)


state 293

    (43) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 . S_COLON
    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 306
    R_ARROW         shift and go to state 307


state 294

    (107) decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 107 (decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 107 (decl_static_fn_stmt -> static_fn_id LP1 next_preds RP1 R_ARROW unary_pred S_COLON .)


state 295

    (49) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR . COMMA next_named_preds
    (50) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR .

    COMMA           shift and go to state 308
    RP1             reduce using rule 50 (next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR .)


state 296

    (52) next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds .
    (66) next_named_preds -> next_named_preds . COMMA next_named_pred

    RP1             reduce using rule 52 (next_preds -> next_anonymous_necessary_preds COMMA STAR COMMA next_named_preds .)
    COMMA           shift and go to state 286


state 297

    (55) next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds .
    (66) next_named_preds -> next_named_preds . COMMA next_named_pred

    RP1             reduce using rule 55 (next_preds -> next_anonymous_opt_preds COMMA STAR COMMA next_named_preds .)
    COMMA           shift and go to state 286


state 298

    (66) next_named_preds -> next_named_preds COMMA next_named_pred .

    COMMA           reduce using rule 66 (next_named_preds -> next_named_preds COMMA next_named_pred .)
    RP1             reduce using rule 66 (next_named_preds -> next_named_preds COMMA next_named_pred .)


state 299

    (70) next_named_necessary_pred -> arg_name COLON unary_pred .

    COMMA           reduce using rule 70 (next_named_necessary_pred -> arg_name COLON unary_pred .)
    RP1             reduce using rule 70 (next_named_necessary_pred -> arg_name COLON unary_pred .)


state 300

    (71) next_named_opt_pred -> arg_name COLON ASSIGN . unary_pred
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 309
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 301

    (108) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 . S_COLON
    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 . R_ARROW unary_pred S_COLON

    S_COLON         shift and go to state 310
    R_ARROW         shift and go to state 311


state 302

    (112) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON .

    RP2             reduce using rule 112 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON .)
    ID              reduce using rule 112 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 S_COLON .)


state 303

    (113) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 312
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 304

    (37) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON .

    RP2             reduce using rule 37 (decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON .)
    ID              reduce using rule 37 (decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON .)


state 305

    (38) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 313
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 306

    (43) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON .

    RP2             reduce using rule 43 (decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON .)
    ID              reduce using rule 43 (decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 S_COLON .)


state 307

    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 314
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 308

    (49) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA . next_named_preds
    (66) next_named_preds -> . next_named_preds COMMA next_named_pred
    (67) next_named_preds -> . next_named_pred
    (68) next_named_pred -> . next_named_necessary_pred
    (69) next_named_pred -> . next_named_opt_pred
    (70) next_named_necessary_pred -> . arg_name COLON unary_pred
    (71) next_named_opt_pred -> . arg_name COLON ASSIGN unary_pred
    (72) arg_name -> . ID

    ID              shift and go to state 274

    next_named_preds               shift and go to state 315
    next_named_pred                shift and go to state 270
    next_named_necessary_pred      shift and go to state 271
    next_named_opt_pred            shift and go to state 272
    arg_name                       shift and go to state 273

state 309

    (71) next_named_opt_pred -> arg_name COLON ASSIGN unary_pred .

    COMMA           reduce using rule 71 (next_named_opt_pred -> arg_name COLON ASSIGN unary_pred .)
    RP1             reduce using rule 71 (next_named_opt_pred -> arg_name COLON ASSIGN unary_pred .)


state 310

    (108) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON .

    RP2             reduce using rule 108 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON .)
    ID              reduce using rule 108 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 S_COLON .)


state 311

    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW . unary_pred S_COLON
    (78) unary_pred -> . pred_name
    (79) unary_pred -> . unnamed_pred
    (84) pred_name -> . ID
    (80) unnamed_pred -> . pred_name LP3 args RP3
    (81) unnamed_pred -> . LP3 pred_expr RP3
    (82) unnamed_pred -> . TRAIT_OF LP1 var_expr RP1
    (83) unnamed_pred -> . NONE

    ID              shift and go to state 60
    LP3             shift and go to state 28
    TRAIT_OF        shift and go to state 29
    NONE            shift and go to state 31

    unary_pred                     shift and go to state 316
    pred_name                      shift and go to state 58
    unnamed_pred                   shift and go to state 59

state 312

    (113) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 317


state 313

    (38) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 318


state 314

    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 319


state 315

    (49) next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds .
    (66) next_named_preds -> next_named_preds . COMMA next_named_pred

    RP1             reduce using rule 49 (next_preds -> next_anonymous_necessary_preds COMMA next_anonymous_opt_preds COMMA STAR COMMA next_named_preds .)
    COMMA           shift and go to state 286


state 316

    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred . S_COLON

    S_COLON         shift and go to state 320


state 317

    (113) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 113 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 113 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 RP1 R_ARROW unary_pred S_COLON .)


state 318

    (38) decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 38 (decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 38 (decl_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)


state 319

    (44) decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 44 (decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 44 (decl_cls_fn_stmt -> fn_id LP3 type_var_args RP3 LP1 pred_args RP1 R_ARROW unary_pred S_COLON .)


state 320

    (109) decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON .

    RP2             reduce using rule 109 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON .)
    ID              reduce using rule 109 (decl_static_fn_stmt -> static_fn_id LP3 type_var_args RP3 LP1 next_preds RP1 R_ARROW unary_pred S_COLON .)

